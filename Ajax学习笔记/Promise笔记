<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>ES6-Promise语法与原理 | XC's Blog</title><noscript>开启JavaScript才能访问本站哦~</noscript><link rel="icon" href="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><!-- index.css--><link rel="stylesheet" href="/css/index.css?v=1.5.1"><!-- inject head--><link rel="stylesheet" href="https://cdn.cbd.int/solitude-source/icon/scoicon.min.css"><link rel="stylesheet" href="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.css"><!-- aplayer--><link rel="stylesheet" href="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css"><!-- swiper--><!-- Open Graph--><meta name="description" content="01. Promise作用: 解决回调地狱1.1 回调地狱: 异步回调 层层嵌套1.2 js代码分为2种: 同步(默认) 异步 同步: 按照顺序立即执行 异步: 没有顺序 延迟执行 (事件、定时器、ajax) 1.3 层层嵌套:12345678910111213141516171819202122"><!-- pwa--><script>(win => {
        win.saveToLocal = {
            set: function setWithExpiry(key, value, ttl) {
                if (ttl === 0)
                    return
                const now = new Date()
                const expiryDay = ttl * 86400000
                const item = {
                    value: value,
                    expiry: now.getTime() + expiryDay,
                }
                localStorage.setItem(key, JSON.stringify(item))
            },

            get: function getWithExpiry(key) {
                const itemStr = localStorage.getItem(key)

                if (!itemStr) {
                    return undefined
                }
                const item = JSON.parse(itemStr)
                const now = new Date()

                if (now.getTime() > item.expiry) {
                    localStorage.removeItem(key)
                    return undefined
                }
                return item.value
            }
        }

        const DarkModeStatus = localStorage.getItem('theme')
        if (DarkModeStatus !== null) {
            if (DarkModeStatus === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-theme', 'light')
            }
        }

        const asideStatus = saveToLocal.get('aside-status')
        if (asideStatus !== undefined) {
            if (asideStatus === 'hide') {
                document.documentElement.classList.add('hide-aside')
            } else {
                document.documentElement.classList.remove('hide-aside')
            }
        }
    }
)(window)

console.log(
    "%c Program: Hexo %c Theme: Hexo-Theme-Solitude %c Version: v1.5.1",
    "border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#ff3842;margin:10px 0",
    "padding: 5px 10px;color:white;background:#3e9f50;",
    "border-radius:0 5px 5px 0;padding: 5px 10px;background:#0084ff;"
);</script><!-- global head--><script>const GLOBAL_CONFIG = {
    root: '/',
    algolia: undefined,
    localsearch: undefined,
    runtime: '2021-04-20 00:00:00',
    lazyload: {
        enable: true,
        error: '/img/error_load.png'
    },
    hightlight: {
        enable: true,
        limit: 200,
        expand: false,
        copy: true,
    },
    randomlinks: false,
    lang: {
        theme: {
            dark: '已切换至深色模式',
            light: '已切换至浅色模式',
        },
        copy: {
            success: '复制成功',
            error: '复制失败',
        },
        backtop: '返回顶部',
        time: {
            recent: '最近',
            yesterday: '昨天',
            berforeyesterday: '前天',
            daybefore: '天前',
            runtime: '天',
        },
        search: {
            empty: '找不到你查询的内容：${query}',
            hit: '找到 ${hits} 条结果，用时 ${time} 毫秒',
            placeholder: '输入关键词快速查找',
        },
        chs: {
            chs_to_cht: '繁體中文',
            cht_to_chs: '简体中文',
        }
    },
    aside: {
        sayhello: {
            morning: '一日之计在于晨',
            noon: '吃饱了才有力气干活',
            afternoon: '集中精力，攻克难关',
            night: '不要太劳累了，早睡更健康',
            goodnight: '睡个好觉，保证精力充沛',
        },
        sayhello2: ["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙","🤝 专修交互与设计","🏃 脚踏实地行动派","🧱 团队小组发动机","💢 壮汉人狠话不多","🎮 电竞游戏爱好者"],
    },
    covercolor: {
        enable: true
    },
    comment: {
        enable: false,
        type: '',
        commentBarrage: false,
        randomInfoStart: ["聪敏的","可爱的","美丽的"],
        randomInfoEnd: ["白菜","小可爱","小仙女"],
        twikoo: {
            url: '',
            accessToken: ''
        },
        waline: {
            url: '',
        }
    },
    lightbox: 'null',
    rightside: {
        enable: false
    },
    ai: {
        enable: true,
        key: '',
        talk: '我是王卓Sco开发的摘要生成助理ScoGPT，ScoGPT在静态部署时进行摘要的撰写，并且在访客访问时通过ScoCorrection转译后的文本摘要实现工具。我在这里只负责已经生成的摘要显示，你无法与我直接沟通，但我可以回答一些预设的问题。',
        randomPost: false,
    },
    music: {
        enable: false,
    },
    translate: undefined,
};</script><meta name="generator" content="Hexo 6.3.0"></head><body id="body"><!-- universe--><canvas id="universe"></canvas><!-- loading--><!-- console--><div id="console"><div class="close-btn" onclick="sco.hideConsole()"><i class="scoicon sco-close-fill"></i></div><div class="button-group"><div class="console-btn-item"><a class="darkmode_switchbutton" onclick="sco.switchDarkMode()" title="昼夜切换" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i></a></div><div class="console-btn-item" id="consoleHideAside"><a class="asideSwitch" onclick="sco.switchHideAside()" title="边栏显示控制" href="javascript:void(0);"><i class="scoicon sco-side-bar-fill"></i></a></div><div class="console-btn-item" id="consoleMusic" onclick="sco.musicToggle()"><a class="music-switch" title="音乐开关" href="javascript:void(0);"><i class="scoicon sco-disc-fill"></i></a></div></div><div class="console-mask" onclick="sco.hideConsole()"></div></div><!-- sidebar--><div id="sidebar" style="zoom: 1;"><div id="menu-mask" style="display: none;"></div><div id="sidebar-menus"><span class="sidebar-menu-item-title">功能</span><div class="sidebar-menu-item"><a class="darkmode_switchbutton menu-child" onclick="sco.switchDarkMode()" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i><span>显示模式</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div><span class="sidebar-menu-item-title">标签</span><div class="card-widget card-tags card-archives card-webinfo card-allinfo"><div class="card-tag-cloud"><a href="/tags/Ajax%E7%AC%94%E8%AE%B0/">Ajax笔记<sup>6</sup></a><a href="/tags/Hexo/">Hexo<sup>6</sup></a><a href="/tags/Qexo/">Qexo<sup>1</sup></a><a href="/tags/GitHub/">GitHub<sup>3</sup></a><a href="/tags/JavaScript/">JavaScript<sup>3</sup></a><a href="/tags/Markdown/">Markdown<sup>2</sup></a><a href="/tags/JavaScript%E7%AC%94%E8%AE%B0/">JavaScript笔记<sup>5</sup></a><a href="/tags/Vscode/">Vscode<sup>2</sup></a><a href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/">Vue前置基础<sup>5</sup></a><a href="/tags/Vue%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/">Vue框架笔记<sup>6</sup></a><a href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/">面试题<sup>2</sup></a><a href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/">Web APIs笔记<sup>10</sup></a><a href="/tags/JavaScript%E9%AB%98%E7%BA%A7/">JavaScript高级<sup>5</sup></a><a href="/tags/Windows/">Windows<sup>3</sup></a><a href="/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF%E6%A0%88/">其他技术栈<sup>6</sup></a><a href="/tags/jQuery/">jQuery<sup>1</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/">前端技术栈<sup>3</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CSS/">学习笔记-CSS<sup>9</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-HTML/">学习笔记-HTML<sup>2</sup></a><a href="/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/">前端经验<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/">前端笔记<sup>3</sup></a><a href="/tags/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/">网站资源<sup>2</sup></a><a href="/tags/%E5%AE%89%E5%8D%93%E7%8E%A9%E6%9C%BA/">安卓玩机<sup>1</sup></a><a href="/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/">网络协议<sup>1</sup></a></div></div></div></div><!-- keyboard--><div class="post" id="body-wrap"><header class="post-bg" id="page-header"><nav class="show" id="nav"><div id="nav-group"><div id="blog_name"><a id="site-name" href="/" title="返回博客主页"><span class="title">XC's Blog</span></a></div><div id="page-name-mask"><div id="page-name"><a id="page-name-text" onclick="sco.toTop()">ES6-Promise语法与原理</a></div></div><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div></div><div id="nav-left"></div><div id="nav-right"><div class="nav-button" id="randomPost_button"><a class="site-page" onclick="toRandomPost()" title="随机一篇文章" href="javascript:void(0);"><i class="scoicon sco-signal-tower-fill"></i></a></div><div class="nav-button" id="nav-console"><a class="console_switchbutton" onclick="sco.showConsole()" title="中控台" href="javascript:void(0);"><i class="scoicon sco-dashboard-fill"></i></a></div><div class="nav-button" id="nav-totop" onclick="sco.toTop()"><a class="totopbtn"><i class="scoicon sco-arrow-up-line"></i><span id="percent">0</span></a></div><div id="toggle-menu"><a class="site-page"><i class="scoicon sco-menu-line"></i></a></div></div></div></nav><div class="coverdiv" id="coverdiv"><img class="nolazyload" id="post-cover" src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/promise.webp" alt="ES6-Promise语法与原理"></div><div id="post-info"><div id="post-firstinfo"><div class="meta-firstline"><a class="post-meta-original" title="该文章为原创文章，注意版权协议">原创</a><span class="post-meta-categories"><a class="post-meta-categories" href="/categories/Ajax笔记/">Ajax笔记</a></span><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Ajax%E7%AC%94%E8%AE%B0/"><span class="tags-name tags-punctuation">Ajax笔记</span></a></div></div></div></div><h1 class="post-title">ES6-Promise语法与原理</h1><div id="post-meta"><div class="meta-secondline"></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><div class="post-ai"><div class="ai-title"><div class="ai-title-left"><i class="ai-title-icon scoicon sco-robot-fill"></i><div class="ai-title-text">文章摘要</div></div><div class="ai-tag" id="ai-tag">GPT 4</div></div><div class="ai-explanation" style="display: block;"></div><div class="ai-suggestions"></div><div class="ai-bottom"><div class="ai-tips">此内容根据文章生成，并经过人工审核，仅用于文章内容的解释与总结</div><a class="ai-report" title="投诉" target="_blank" rel="noopener" href="https://blog.wzsco.top/about/">投诉</a></div></div><article class="post-content" id="article-container"><h1 id="01-Promise作用-解决回调地狱"><a href="#01-Promise作用-解决回调地狱" class="headerlink" title="01. Promise作用: 解决回调地狱"></a>01. Promise作用: 解决回调地狱</h1><h3 id="1-1-回调地狱-异步回调-层层嵌套"><a href="#1-1-回调地狱-异步回调-层层嵌套" class="headerlink" title="1.1 回调地狱: 异步回调 层层嵌套"></a>1.1 回调地狱: 异步回调 层层嵌套</h3><h3 id="1-2-js代码分为2种-同步-默认-异步"><a href="#1-2-js代码分为2种-同步-默认-异步" class="headerlink" title="1.2 js代码分为2种: 同步(默认) 异步"></a>1.2 js代码分为2种: 同步(默认) 异步</h3><ol>
<li><strong>同步: 按照顺序立即执行</strong></li>
<li><strong>异步: 没有顺序 延迟执行 (事件、定时器、ajax)</strong></li>
</ol>
<h3 id="1-3-层层嵌套"><a href="#1-3-层层嵌套" class="headerlink" title="1.3 层层嵌套:"></a>1.3 层层嵌套:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.1 一级分类</span></span><br><span class="line"><span class="keyword">let</span> xhr1 = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr1.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line">xhr1.<span class="title function_">send</span>()</span><br><span class="line">xhr1.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一级&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr1.<span class="property">response</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 二级分类</span></span><br><span class="line"><span class="keyword">let</span> xhr2 = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr2.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://123.57.109.30:3999/api/categorySecond?firstId=621&#x27;</span>)</span><br><span class="line">xhr2.<span class="title function_">send</span>()</span><br><span class="line">xhr2.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;二级&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr2.<span class="property">response</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.3 三级分类</span></span><br><span class="line"><span class="keyword">let</span> xhr3 = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr3.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://123.57.109.30:3999/api/categoryThird?secondId=622&#x27;</span>)</span><br><span class="line">xhr3.<span class="title function_">send</span>()</span><br><span class="line">xhr3.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;三级&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr3.<span class="property">response</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.4 浏览器刷新打印顺序会不同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="02-Promise语法"><a href="#02-Promise语法" class="headerlink" title="02. Promise语法"></a>02. Promise语法</h1><h3 id="2-1-调用构造函数-创建Promise实例"><a href="#2-1-调用构造函数-创建Promise实例" class="headerlink" title="2.1 调用构造函数 创建Promise实例"></a>2.1 调用构造函数 创建Promise实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (resolve, reject) 是箭头函数的参数</span></span><br><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步代码</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// resolve(1) // 成功 1是实参</span></span><br><span class="line">       <span class="title function_">reject</span>(<span class="number">2</span>) <span class="comment">// 失败</span></span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-调用Promise实例对象的then-catch方法"><a href="#2-2-调用Promise实例对象的then-catch方法" class="headerlink" title="2.2 调用Promise实例对象的then/catch方法"></a>2.2 调用Promise实例对象的then/catch方法</h3><ul>
<li><strong>resolve本质就是调用res res是形参 resolve(1)是实参</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve和reject状态二选一的</span></span><br><span class="line">pro.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// reject失败则调用catch方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-Promise在创建实例时-里面代码会立即执行"><a href="#2-3-Promise在创建实例时-里面代码会立即执行" class="headerlink" title="2.3 Promise在创建实例时 里面代码会立即执行"></a>2.3 Promise在创建实例时 里面代码会立即执行</h3><ul>
<li><strong>Promise自己是同步的 只有then方法才是异步的</strong></li>
</ul>
<hr>
<h1 id="03-Promise工作原理"><a href="#03-Promise工作原理" class="headerlink" title="03. Promise工作原理"></a>03. Promise工作原理</h1><blockquote>
<p><strong>3.1 Promise是什么? 是ES6新增的构造函数</strong></p>
<p><strong>3.2 Promise作用: 解决回调地狱</strong></p>
<p><strong>3.3 Promise应用场景/原理 Promise对象有三种状态:</strong></p>
<ol>
<li><strong>pending 进行中(默认状态) 所以一旦创建Promise 里面代码会立即执行</strong></li>
<li><strong>fuifilled 已完成</strong></li>
<li><strong>rejected 已失败</strong></li>
<li><strong>Promise相当于是一个容器 把异步代码放入容器中</strong></li>
<li><strong>状态只能改变一次 不管成功/失败 都会有一个数据结果</strong></li>
</ol>
</blockquote>
<h3 id="4-Promise对象状态只有两种状态"><a href="#4-Promise对象状态只有两种状态" class="headerlink" title="4. Promise对象状态只有两种状态:"></a>4. Promise对象状态只有两种状态:</h3><ol>
<li><strong>调用resolve()方法时: 从pending变为fuifilled</strong></li>
<li><strong>调用reject()方法时: 从pending变为rejected</strong></li>
<li><strong>状态只能改变一次 不管成功/失败 都会有一个数据结果</strong></li>
</ol>
<h3 id="5-Promise状态发生改变后-在任何时候都可以获取结果"><a href="#5-Promise状态发生改变后-在任何时候都可以获取结果" class="headerlink" title="5. Promise状态发生改变后 在任何时候都可以获取结果"></a>5. Promise状态发生改变后 在任何时候都可以获取结果</h3><ol>
<li><strong>Promise实例的then方法获取成功结果</strong></li>
<li><strong>Promise实例的catch方法获取失败结果</strong></li>
</ol>
<h3 id="6-Promise在创建实例时-里面代码会立即执行"><a href="#6-Promise在创建实例时-里面代码会立即执行" class="headerlink" title="6. Promise在创建实例时 里面代码会立即执行"></a>6. Promise在创建实例时 里面代码会立即执行</h3><ul>
<li><strong>Promise自己是同步的 只有then方法才是异步的</strong></li>
</ul>
<hr>
<h1 id="04-Promise使用链式语法解决回调地狱"><a href="#04-Promise使用链式语法解决回调地狱" class="headerlink" title="04. Promise使用链式语法解决回调地狱"></a>04. Promise使用链式语法解决回调地狱</h1><h3 id="1-创建Promise实例"><a href="#1-创建Promise实例" class="headerlink" title="1. 创建Promise实例"></a>1. 创建Promise实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建xhr对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 设置请求方式和url</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    <span class="comment">// 注册响应事件函数</span></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一级&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line">    <span class="comment">// 1.1 Promise成功状态</span></span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-取出Promise实例对象结果"><a href="#2-取出Promise实例对象结果" class="headerlink" title="2. 取出Promise实例对象结果"></a>2. 取出Promise实例对象结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-取出Promise实例对象的函数结果"><a href="#3-取出Promise实例对象的函数结果" class="headerlink" title="3. 取出Promise实例对象的函数结果"></a>3. 取出Promise实例对象的函数结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">p3.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-1-三个实例对象只有url不一样-可封装成函数-帮我们创建Promise实例对象"><a href="#4-1-三个实例对象只有url不一样-可封装成函数-帮我们创建Promise实例对象" class="headerlink" title="4.1 三个实例对象只有url不一样 可封装成函数 帮我们创建Promise实例对象"></a>4.1 三个实例对象只有url不一样 可封装成函数 帮我们创建Promise实例对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 2.1 url是形参 调用时写入实参</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url) </span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line">    <span class="comment">// 2.2 Promise成功状态</span></span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-调用封装好的Promise实例对象函数"><a href="#4-2-调用封装好的Promise实例对象函数" class="headerlink" title="4.2 调用封装好的Promise实例对象函数"></a>4.2 调用封装好的Promise实例对象函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categorySecond?firstId=622&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryThird?secondId=621&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-3-但打印结果还是随机的-因为只要创建代码就会立即执行"><a href="#4-3-但打印结果还是随机的-因为只要创建代码就会立即执行" class="headerlink" title="4.3 但打印结果还是随机的 因为只要创建代码就会立即执行"></a>4.3 但打印结果还是随机的 因为只要创建代码就会立即执行</h3><ul>
<li><strong>p1进行完后 return 返回p2的实例对象 .then可换行</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; </span><br><span class="line"><span class="comment">// p2的then</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> p3</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// p3的then</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-Promise是如何解决回调地狱的呢"><a href="#5-Promise是如何解决回调地狱的呢" class="headerlink" title="5. Promise是如何解决回调地狱的呢?"></a>5. Promise是如何解决回调地狱的呢?</h3><ol>
<li><strong>Promise通过链式调用解决回调地狱</strong></li>
<li><strong>链式调用: 在上一个then里 返回下一个Promise实例 就可以继续后面的then</strong></li>
</ol>
<hr>
<h1 id="05-Promise的all-race方法-语法"><a href="#05-Promise的all-race方法-语法" class="headerlink" title="05. Promise的all/race方法/语法"></a>05. Promise的all/race方法/语法</h1><h3 id="1-Promise的all方法-Promise-all"><a href="#1-Promise的all方法-Promise-all" class="headerlink" title="1. Promise的all方法 Promise.all"></a>1. Promise的all方法 Promise.all</h3><ol>
<li><strong>把多个Promise实例合并为一个新的Promise 结果为数组</strong></li>
<li><strong>所有Promise要全部成功 才会执行then 只要有一个失败就会执行catch</strong></li>
<li><strong>then的结果为数组</strong></li>
<li><strong>finally 不管成功失败都执行</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    xhr.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="title function_">resolve</span>(res) <span class="comment">// 成功状态</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categorySecond?firstId=621&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryThird?secondId=622&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3])</span><br><span class="line"><span class="comment">// 所有Promise要全部成功 才会执行then 只要有一个失败就会执行catch</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// then的结果为数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// finally 不管成功失败都执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是finally 我完事了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-Promise的race方法-Promise-race"><a href="#2-Promise的race方法-Promise-race" class="headerlink" title="2.  Promise的race方法 Promise.race"></a>2.  Promise的race方法 Promise.race</h3><ol>
<li><strong>所有Promise谁最先成功 就会执行then 如果有失败就执行catch</strong></li>
<li><strong>这里res不是数组 谁最先成功就是谁</strong></li>
<li><strong>then的结果为最快的那个Promise</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pp = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3])</span><br><span class="line">pp.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;race方法&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="06-async-await异步函数"><a href="#06-async-await异步函数" class="headerlink" title="06. async/await异步函数"></a>06. async/await异步函数</h1><ol>
<li>async异步函数 async/await 主要帮我们执行Promise</li>
<li>async作用: 修饰函数 让函数内部使用await</li>
<li>await作用: 取代then 并获取then结果 </li>
<li>await 只能用于被async修饰的函数 否则报错 加上async变为异步函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Promise实例对象的then方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="await语法"><a href="#await语法" class="headerlink" title="await语法:"></a>await语法:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// let res = await Promise对象</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> p</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// await箭头函数语法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> p</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 2.2 let res = await 后面的代码</span></span><br><span class="line"><span class="comment">// 如果p是Promise对象 就正常执行Promise</span></span><br><span class="line">    <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 如果p不是Promise对象 就会把代码包在Promise里面</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 后面的代码在then里</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>

<h3 id="6-1-使用async-await解决回调地狱练习"><a href="#6-1-使用async-await解决回调地狱练习" class="headerlink" title="6.1 使用async/await解决回调地狱练习"></a>6.1 使用async/await解决回调地狱练习</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 封装Promise实例对象函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url)</span><br><span class="line">        xhr.<span class="title function_">send</span>()</span><br><span class="line">        xhr.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 创建Promise实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categorySecond?firstId=621&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title function_">fn</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryThird?secondId=622&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. Promise通过链式调用解决回调地狱</span></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> p3</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 01. 使用async/await解决回调地狱</span></span><br><span class="line"><span class="comment">// 1.1 await右边的代码就是Promise内部的代码 .then</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res1 = <span class="keyword">await</span> p1</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一级&#x27;</span>, res1)</span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">await</span> p2</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;二级&#x27;</span>, res2)</span><br><span class="line">    <span class="keyword">let</span> res3 = <span class="keyword">await</span> p3</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;三级&#x27;</span>, res3)</span><br><span class="line"><span class="comment">// 1.2 分析: await下面的代码全都是then里的代码</span></span><br><span class="line">    <span class="comment">// p1.then(res1 =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res1)</span></span><br><span class="line">    <span class="comment">// p2.then(res2 =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res2)</span></span><br><span class="line">    <span class="comment">// p3.then(res3 =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res3)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="07-了解axios底层原理-手写Promise封装xhr"><a href="#07-了解axios底层原理-手写Promise封装xhr" class="headerlink" title="07. 了解axios底层原理/手写Promise封装xhr"></a>07. 了解axios底层原理/手写Promise封装xhr</h1><h3 id="7-1-以前使用的axios"><a href="#7-1-以前使用的axios" class="headerlink" title="7.1 以前使用的axios"></a>7.1 以前使用的axios</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-2-axios底层原理"><a href="#7-2-axios底层原理" class="headerlink" title="7.2 axios底层原理"></a>7.2 axios底层原理</h3><ol>
<li>axios其实就是把xhr对象包装在Promise里面</li>
<li>axios方法本质是返回一个Promise对象</li>
<li>Promise内部是原生xhr发送ajax请求</li>
<li>请求成功则用resolve返回给Promise对象 结果给外面的then</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = axios.<span class="title function_">get</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-手写Promise源码封装xhr"><a href="#7-3-手写Promise源码封装xhr" class="headerlink" title="7.3 手写Promise源码封装xhr"></a>7.3 手写Promise源码封装xhr</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = &#123;</span><br><span class="line"><span class="comment">// 2.1 封装一个get函数</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">url</span>) &#123;</span><br><span class="line"><span class="comment">// 2.2 创建Promise实例对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 2.3 这里的代码是原生xhr对象</span></span><br><span class="line">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url)</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">            xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.4 调用get方法 会返回Promise对象</span></span><br><span class="line"><span class="keyword">let</span> p1 = fn.<span class="title function_">get</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/news&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="comment">// 2.5 取出Promise实例对象结果</span></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2.6 简写语法</span></span><br><span class="line">fn.<span class="title function_">get</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/news&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2.7 使用async/await简写</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> fn.<span class="title function_">get</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/news&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>

<h3 id="7-4-使用axios异步函数依次加载-async-await"><a href="#7-4-使用axios异步函数依次加载-async-await" class="headerlink" title="7.4 使用axios异步函数依次加载-async/await"></a>7.4 使用axios异步函数依次加载-async/await</h3><ul>
<li>使用async/await 依次加载一 二 三级的列表</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明async异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res1 = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">data</span>)</span><br><span class="line"><span class="comment">// 2. await调用Promise 会取代Promise的then</span></span><br><span class="line"><span class="comment">// 3. 只要是await后面的代码都在then方法里</span></span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categorySecond?firstId=621&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="property">data</span>)</span><br><span class="line">    <span class="keyword">let</span> res3 = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryThird?secondId=622&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res3.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<h1 id="08-try-catch捕获异常"><a href="#08-try-catch捕获异常" class="headerlink" title="08. try-catch捕获异常"></a>08. try-catch捕获异常</h1><ol>
<li>Error对象: 内置对象 提示错误代码信息</li>
<li>throw错误信息: 抛出异常 让控制台变红</li>
<li>try-catch语法: 捕捉错误代码</li>
</ol>
<h3 id="8-1-try-throw语法"><a href="#8-1-try-throw语法" class="headerlink" title="8.1 try-throw语法"></a>8.1 try-throw语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">// 这里代码如果遇到错误 就会执行catch</span><br><span class="line">    console.log(1)</span><br><span class="line">// 在try里写throw就会执行catch</span><br><span class="line">    throw &#x27;错误信息&#x27;</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    console.log(666)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-应用场景"><a href="#8-2-应用场景" class="headerlink" title="8.2 应用场景"></a>8.2 应用场景</h3><h3 id="8-3-用于结束forEach-面试题"><a href="#8-3-用于结束forEach-面试题" class="headerlink" title="8.3 用于结束forEach(面试题)"></a>8.3 用于结束forEach(面试题)</h3><ul>
<li>throw主动抛出错误 就会结束try代码 然后立即执行catch </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"><span class="comment">// throw主动抛出错误 就会结束try代码 然后立即执行catch </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-捕捉await的错误信息"><a href="#8-4-捕捉await的错误信息" class="headerlink" title="8.4 捕捉await的错误信息"></a>8.4 捕捉await的错误信息</h3><ol>
<li>错误的Promise走catch 但await走不了catch 只能then</li>
<li>所以使用try-catch方法 配合捕捉await错误</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 错误的Promise走catch 但await走不了catch 只能then</span></span><br><span class="line"><span class="comment">// 所以使用try-catch方法 配合捕捉await错误</span></span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://1hmajax.itheima.net/api/news&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

</article><div class="post-copyright"><div class="post-copyright__author_group"><a class="post-copyright__author_img" href="/about/"><img class="post-copyright__author_img_front" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"></a><div class="post-copyright__author_name">XC's Blog</div><div class="post-copyright__author_desc"></div></div><div class="post-tools" id="post-tools"><div class="post-tools-left"><div id="quit-box" onclick="RemoveRewardMask()"></div></div></div><div class="post-copyright__notice"><span class="post-copyright-info">本文是原创文章，采用<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</a>协议，完整转载请注明来自<a href="/">XC's Blog</a></span></div></div><div class="post-tools-right"><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Ajax%E7%AC%94%E8%AE%B0/"><span class="tags-punctuation"></span>Ajax笔记<span class="tagsPageCount">6</span></a></div></div></div><nav class="needEndHide pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">黑马头条-数据管理平台</div></div></a></div><div class="next-post pull-right"><a href="/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ajax%E7%AC%AC%E5%9B%9B%E5%A4%A9"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">Ajax第四天</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="scoicon sco-star-smile-fill"></i><span>喜欢这篇的人也看了</span><div class="relatedPosts-link"><a onclick="event.preventDefault(); toRandomPost();" href="javascript:void(0);" rel="external nofollow" data-pjax-state="">随便逛逛</a></div></div><div class="relatedPosts-list"><div><a href="/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0" title="黑马头条-数据管理平台"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/ajax.webp" alt="cover"><div class="content is-center"><div class="title">黑马头条-数据管理平台</div></div></a></div><div><a href="/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Ajax%E7%AC%AC%E5%9B%9B%E5%A4%A9" title="Ajax第四天"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/ajax.webp" alt="cover"><div class="content is-center"><div class="title">Ajax第四天</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="card-content"><div class="card-info-avatar is-center"><div class="author-info__top-group"><div class="author-info__sayhi" id="author-info__sayhi" onclick="sco.changeSayHelloText()">sayhello.morning</div></div></div><div class="avatar-img-group"><img class="avatar-img" alt="头像" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><div class="avatar-sticker"><img class="avatar-sticker-img" data-lazy-src="https://bu.dusays.com/2023/12/30/659011053e246.png" alt="心情贴纸"></div></div><div class="author-info__description_group"><div class="author-info__description">分享自己对编程的<b>热爱</b>，对美好生活的<b>向往</b>，对知识海洋<b>探索历程</b>。</div><div class="author-info__description2">相信你可以在这里找到对你有用的知识和教程。</div></div><div class="author-info__bottom-group"><a class="author-info__bottom-group-left" href="/about/"><div class="author-info__name">XC's Blog</div><div class="author-info__desc"></div></a><div class="card-info-social-icons is-center"></div></div></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="scoicon sco-menu-line"></i><span>文章目录</span></div><div class="toc-content" id="toc-content"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#01-Promise%E4%BD%9C%E7%94%A8-%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1"><span class="toc-text">01. Promise作用: 解决回调地狱</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-1-%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1-%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83-%E5%B1%82%E5%B1%82%E5%B5%8C%E5%A5%97"><span class="toc-text">1.1 回调地狱: 异步回调 层层嵌套</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-2-js%E4%BB%A3%E7%A0%81%E5%88%86%E4%B8%BA2%E7%A7%8D-%E5%90%8C%E6%AD%A5-%E9%BB%98%E8%AE%A4-%E5%BC%82%E6%AD%A5"><span class="toc-text">1.2 js代码分为2种: 同步(默认) 异步</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-3-%E5%B1%82%E5%B1%82%E5%B5%8C%E5%A5%97"><span class="toc-text">1.3 层层嵌套:</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#02-Promise%E8%AF%AD%E6%B3%95"><span class="toc-text">02. Promise语法</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-1-%E8%B0%83%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%88%9B%E5%BB%BAPromise%E5%AE%9E%E4%BE%8B"><span class="toc-text">2.1 调用构造函数 创建Promise实例</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-%E8%B0%83%E7%94%A8Promise%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E7%9A%84then-catch%E6%96%B9%E6%B3%95"><span class="toc-text">2.2 调用Promise实例对象的then&#x2F;catch方法</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-3-Promise%E5%9C%A8%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%E6%97%B6-%E9%87%8C%E9%9D%A2%E4%BB%A3%E7%A0%81%E4%BC%9A%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C"><span class="toc-text">2.3 Promise在创建实例时 里面代码会立即执行</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#03-Promise%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86"><span class="toc-text">03. Promise工作原理</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#4-Promise%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81%E5%8F%AA%E6%9C%89%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%81"><span class="toc-text">4. Promise对象状态只有两种状态:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-Promise%E7%8A%B6%E6%80%81%E5%8F%91%E7%94%9F%E6%94%B9%E5%8F%98%E5%90%8E-%E5%9C%A8%E4%BB%BB%E4%BD%95%E6%97%B6%E5%80%99%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C"><span class="toc-text">5. Promise状态发生改变后 在任何时候都可以获取结果</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#6-Promise%E5%9C%A8%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B%E6%97%B6-%E9%87%8C%E9%9D%A2%E4%BB%A3%E7%A0%81%E4%BC%9A%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C"><span class="toc-text">6. Promise在创建实例时 里面代码会立即执行</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#04-Promise%E4%BD%BF%E7%94%A8%E9%93%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1"><span class="toc-text">04. Promise使用链式语法解决回调地狱</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-%E5%88%9B%E5%BB%BAPromise%E5%AE%9E%E4%BE%8B"><span class="toc-text">1. 创建Promise实例</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-%E5%8F%96%E5%87%BAPromise%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%9C"><span class="toc-text">2. 取出Promise实例对象结果</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-%E5%8F%96%E5%87%BAPromise%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%BD%E6%95%B0%E7%BB%93%E6%9E%9C"><span class="toc-text">3. 取出Promise实例对象的函数结果</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-1-%E4%B8%89%E4%B8%AA%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E5%8F%AA%E6%9C%89url%E4%B8%8D%E4%B8%80%E6%A0%B7-%E5%8F%AF%E5%B0%81%E8%A3%85%E6%88%90%E5%87%BD%E6%95%B0-%E5%B8%AE%E6%88%91%E4%BB%AC%E5%88%9B%E5%BB%BAPromise%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1"><span class="toc-text">4.1 三个实例对象只有url不一样 可封装成函数 帮我们创建Promise实例对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-2-%E8%B0%83%E7%94%A8%E5%B0%81%E8%A3%85%E5%A5%BD%E7%9A%84Promise%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E5%87%BD%E6%95%B0"><span class="toc-text">4.2 调用封装好的Promise实例对象函数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-3-%E4%BD%86%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C%E8%BF%98%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%9A%84-%E5%9B%A0%E4%B8%BA%E5%8F%AA%E8%A6%81%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%B0%B1%E4%BC%9A%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C"><span class="toc-text">4.3 但打印结果还是随机的 因为只要创建代码就会立即执行</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-Promise%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E7%9A%84%E5%91%A2"><span class="toc-text">5. Promise是如何解决回调地狱的呢?</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#05-Promise%E7%9A%84all-race%E6%96%B9%E6%B3%95-%E8%AF%AD%E6%B3%95"><span class="toc-text">05. Promise的all&#x2F;race方法&#x2F;语法</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-Promise%E7%9A%84all%E6%96%B9%E6%B3%95-Promise-all"><span class="toc-text">1. Promise的all方法 Promise.all</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-Promise%E7%9A%84race%E6%96%B9%E6%B3%95-Promise-race"><span class="toc-text">2.  Promise的race方法 Promise.race</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#06-async-await%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0"><span class="toc-text">06. async&#x2F;await异步函数</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#await%E8%AF%AD%E6%B3%95"><span class="toc-text">await语法:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#6-1-%E4%BD%BF%E7%94%A8async-await%E8%A7%A3%E5%86%B3%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1%E7%BB%83%E4%B9%A0"><span class="toc-text">6.1 使用async&#x2F;await解决回调地狱练习</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#07-%E4%BA%86%E8%A7%A3axios%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86-%E6%89%8B%E5%86%99Promise%E5%B0%81%E8%A3%85xhr"><span class="toc-text">07. 了解axios底层原理&#x2F;手写Promise封装xhr</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#7-1-%E4%BB%A5%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84axios"><span class="toc-text">7.1 以前使用的axios</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#7-2-axios%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86"><span class="toc-text">7.2 axios底层原理</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#7-3-%E6%89%8B%E5%86%99Promise%E6%BA%90%E7%A0%81%E5%B0%81%E8%A3%85xhr"><span class="toc-text">7.3 手写Promise源码封装xhr</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#7-4-%E4%BD%BF%E7%94%A8axios%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E4%BE%9D%E6%AC%A1%E5%8A%A0%E8%BD%BD-async-await"><span class="toc-text">7.4 使用axios异步函数依次加载-async&#x2F;await</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#08-try-catch%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8"><span class="toc-text">08. try-catch捕获异常</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#8-1-try-throw%E8%AF%AD%E6%B3%95"><span class="toc-text">8.1 try-throw语法</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#8-2-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"><span class="toc-text">8.2 应用场景</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#8-3-%E7%94%A8%E4%BA%8E%E7%BB%93%E6%9D%9FforEach-%E9%9D%A2%E8%AF%95%E9%A2%98"><span class="toc-text">8.3 用于结束forEach(面试题)</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#8-4-%E6%8D%95%E6%8D%89await%E7%9A%84%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF"><span class="toc-text">8.4 捕捉await的错误信息</span></a></li></ol></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="scoicon sco-map-line"></i><span>最近发布</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题"><img alt="整个前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题">整个前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img alt="常见前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题">常见前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台"><img alt="硅谷甄选运营平台" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台">硅谷甄选运营平台</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天"><img alt="Vue第三天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天">Vue第三天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天"><img alt="Vue第二天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天">Vue第二天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9">Vue框架笔记</a></div></div></div></div></div></div></main><footer id="footer"><div id="sco-footer-bar"><div class="footer-logo"><span class="scoicon">XC's Blog</span></div><div class="footer-bar-description">来自XC's Blog - 的文章</div><a class="footer-bar-link" href="/">了解更多</a></div><div id="footer_deal"><div class="footer_mini_logo" id="footer_mini_logo" title="返回顶部" onclick="sco.toTop()"><img data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg" alt="返回顶部"></div></div><div id="sco-footer"></div><div id="footer-bar"><div class="footer-bar-links"><div class="footer-bar-left"><div class="copyright">© 2021 - 2024 By&nbsp;<a class="footer-bar-link" href="/">XC's Blog</a></div></div><div class="footer-bar-right"><a class="footer-bar-link" target="_blank" rel="noopener" href="https://github.com/wleelw/hexo-theme-solitude" title="主题">主题</a><a class="footer-bar-link cc"><i class="scoicon sco-copyright-line"></i><i class="scoicon sco-creative-commons-by-line"></i><i class="scoicon sco-creative-commons-nc-line"></i><i class="scoicon sco-creative-commons-nd-line"></i></a></div></div></div></footer></div><!-- inject body--><div><script src="/js/main.js?v=1.5.1"></script><script src="/js/utils.js?v=1.5.1"></script><script src="https://cdn.cbd.int/solitude-source/js/universe.min.js"></script><script>dark()
</script><script src="https://cdn.staticfile.org/pjax/0.2.8/pjax.min.js"></script><script src="https://cdn.staticfile.org/vanilla-lazyload/17.8.5/lazyload.iife.min.js"></script><script src="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.js"></script><script src="/js/sco-ai.min.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js"></script><script src="https://cdn.staticfile.org/meting/2.0.1/Meting.min.js"></script><script>const meting_api = 'https://meting.qjqq.cn/?server=:server&type=:type&id=:id&auth=:auth&r=:r';
</script><script src="/js/covercolor/local.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/pace/1.2.4/pace.min.js"></script></div><div id="js-pjax"><script async src="https://cdn.staticfile.org/busuanzi/2.3.0/bsz.pure.mini.min.js"></script><script id="config-diff">var PAGE_CONFIG = {
    is_post: true,
    is_page: false,
    is_home: false,
    page: 'post',
    toc: true,
    comment: false,
}
</script></div><!-- newest comment--><!-- pjax--><script>let pjaxSelectors = [
    'title',
    '#body-wrap',
    '#site-config',
    'meta[name="description"]',
    '#js-pjax',
    'meta[property^="og:"]',
]

const pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
})

document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
})

document.addEventListener('pjax:complete', () => {
    window.refreshFn()
})

document.addEventListener('pjax:error', (e) => {
    if (e.request.status === 404) {
        pjax.loadUrl('/404.html')
    }
})</script><!-- theme--><script>initTheme = () => {
    const cachedMode = saveToLocal.get('theme');
    if (cachedMode === undefined)
        document.documentElement.setAttribute('data-theme', 'light');
    else
        document.documentElement.setAttribute('data-theme', cachedMode);
}
initTheme()</script><!-- search--><!-- music--><div class="needEndHide" id="nav-music" onclick="sco.musicToggle()"><div id="nav-music-hoverTips">音乐已暂停</div><meting-js id="8407304077" server="netease" type="playlist" mutex="true" preload="none" data-lrctype="0" order="random" theme="var(--sco-main)"></meting-js></div></body></html><script>const posts=["Vue笔记/前端面试题","Vue笔记/面试题","Vue笔记/硅谷甄选项目笔记","Vue笔记/vue第三天","Vue笔记/vue第二天","Vue笔记/Vue第一天","Vue笔记/vue框架笔记","Vue前置基础/5.ES6模块化与Webpack入门","Vue前置基础/1.Vue前置JS功底","Vue前置基础/4.跨域的基本概念","Vue前置基础/3.NPM的使用","Vue前置基础/2.Nodejs基础","Ajax学习笔记/黑马头条数据管理平台","Ajax学习笔记/Promise笔记","Ajax学习笔记/Ajax第四天","Ajax学习笔记/Ajax第三天","Ajax学习笔记/Ajax第二天","Ajax学习笔记/Ajax第一天","WebAPI学习笔记/JS进阶复习","WebAPI学习笔记/JS进阶第四天","WebAPI学习笔记/JS进阶第三天","WebAPI学习笔记/JS进阶第二天","WebAPI学习笔记/JS进阶第一天","WebAPI学习笔记/WebAPIs第七天","WebAPI学习笔记/WebAPIs第六天","WebAPI学习笔记/WebAPIs第五天","WebAPI学习笔记/WebAPIs第四天","WebAPI学习笔记/WebAPIs第三天","WebAPI学习笔记/WebAPIs第二天","WebAPI学习笔记/WebAPIs第一天","WebAPI学习笔记/WebAPIs学习笔记","WebAPI学习笔记/JS-ES6模块化","WebAPI学习笔记/JavaScript进阶","JavaScript学习笔记/JavaScript第五天","JavaScript学习笔记/JavaScript第四天","JavaScript学习笔记/JavaScript第三天","JavaScript学习笔记/JavaScript第二天","JavaScript学习笔记/JavaScript第一天","基础学习路线/移动开发-响应式布局","基础学习路线/移动开发-rem布局","基础学习路线/移动开发-flex布局","基础学习路线/移动开发-流式布局","基础学习路线/CSS3转换问题","基础学习路线/CSS-2D-3D转换","基础学习路线/前端168个单词","基础学习路线/CSS高级技巧","前端技术栈/前端路线","Hexo/图床方案汇总","其他技术栈/Windows软件推荐","Hexo/Butterfly主题配置","Hexo/Qexo","JavaScript/This指向与改变This指向","JavaScript/JS防抖与节流","JavaScript/如何在1分钟内完美解释什么是 JSONP 请求？","前端技术栈/移动端最佳适配解决方案","GitHub/Git常用命令","前端技术栈/来自2.5年前端小白的总结","网站资源/如何买到合适的域名","其他技术栈/CentOS一键安装Docker","网站资源/阿里云资源合集","其他技术栈/15个前端必备学习网站","其他技术栈/CSS3（圆角边框、阴影、浮动详解及示例）","网络协议/浅谈 HTTP 和 HTTPS","学习笔记/CSS属性大全","基础学习路线/CSS第五天-定位","基础学习路线/CSS第四天-浮动","基础学习路线/CSS第三天","基础学习路线/CSS第二天","基础学习路线/CSS第一天","基础学习路线/HTML第二天","基础学习路线/HTML第一天","学习笔记/「学习笔记」JavaScript基础","学习笔记/HTML与CSS进阶","Vue笔记/Vue X-数组对象的双向数据绑定","学习笔记/「学习笔记」CSS基础","学习笔记/「学习笔记」HTML基础","学习笔记/HTML基础","Windows/PE-Win10教程","Windows/Win系统网站-KMS","安卓玩机/Magisk卡刷-通刷官方-了解Fastboot","其他技术栈/前端开发免费资源大汇总","GitHub/Git基础-Github自定义域名","学习笔记/CSS笔记","Vscode/Vscode笔记-24款插件","其他技术栈/免费常用的前端CDN库","其他技术栈/软件及网站推荐","Vscode/记录 Vscode 插件","Hexo/Hexo音乐排行-Netlify CMS","GitHub/玩转GitHub","jQuery/jQuery自动触发事件与bootstrapjQuery插件用法","Hexo/使用Hexo和Github搭建个人博客","Hexo/Hexo博客搭建指南","Hexo/Hexo相关","Markdown/Markdown基础--高级教程","Markdown/Markdown基础教程"];function toRandomPost(){ pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]); };</script>