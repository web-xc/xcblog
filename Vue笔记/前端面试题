<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>整个前端面试题 | XC's Blog</title><noscript>开启JavaScript才能访问本站哦~</noscript><link rel="icon" href="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><!-- index.css--><link rel="stylesheet" href="/css/index.css?v=1.5.1"><!-- inject head--><link rel="stylesheet" href="https://cdn.cbd.int/solitude-source/icon/scoicon.min.css"><link rel="stylesheet" href="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.css"><!-- aplayer--><link rel="stylesheet" href="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css"><!-- swiper--><!-- Open Graph--><meta name="description" content="前端基础html1.1 html标签的类型（head， body，!Doctype） 他们的作用是什么!DOCTYPE 标签 它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令 head： 是所有头部元素的容器, 绝大多数头部标签的内容不会显示给读者 该标签下所包含的部分可"><!-- pwa--><script>(win => {
        win.saveToLocal = {
            set: function setWithExpiry(key, value, ttl) {
                if (ttl === 0)
                    return
                const now = new Date()
                const expiryDay = ttl * 86400000
                const item = {
                    value: value,
                    expiry: now.getTime() + expiryDay,
                }
                localStorage.setItem(key, JSON.stringify(item))
            },

            get: function getWithExpiry(key) {
                const itemStr = localStorage.getItem(key)

                if (!itemStr) {
                    return undefined
                }
                const item = JSON.parse(itemStr)
                const now = new Date()

                if (now.getTime() > item.expiry) {
                    localStorage.removeItem(key)
                    return undefined
                }
                return item.value
            }
        }

        const DarkModeStatus = localStorage.getItem('theme')
        if (DarkModeStatus !== null) {
            if (DarkModeStatus === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-theme', 'light')
            }
        }

        const asideStatus = saveToLocal.get('aside-status')
        if (asideStatus !== undefined) {
            if (asideStatus === 'hide') {
                document.documentElement.classList.add('hide-aside')
            } else {
                document.documentElement.classList.remove('hide-aside')
            }
        }
    }
)(window)

console.log(
    "%c Program: Hexo %c Theme: Hexo-Theme-Solitude %c Version: v1.5.1",
    "border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#ff3842;margin:10px 0",
    "padding: 5px 10px;color:white;background:#3e9f50;",
    "border-radius:0 5px 5px 0;padding: 5px 10px;background:#0084ff;"
);</script><!-- global head--><script>const GLOBAL_CONFIG = {
    root: '/',
    algolia: undefined,
    localsearch: undefined,
    runtime: '2021-04-20 00:00:00',
    lazyload: {
        enable: true,
        error: '/img/error_load.png'
    },
    hightlight: {
        enable: true,
        limit: 200,
        expand: false,
        copy: true,
    },
    randomlinks: false,
    lang: {
        theme: {
            dark: '已切换至深色模式',
            light: '已切换至浅色模式',
        },
        copy: {
            success: '复制成功',
            error: '复制失败',
        },
        backtop: '返回顶部',
        time: {
            recent: '最近',
            yesterday: '昨天',
            berforeyesterday: '前天',
            daybefore: '天前',
            runtime: '天',
        },
        search: {
            empty: '找不到你查询的内容：${query}',
            hit: '找到 ${hits} 条结果，用时 ${time} 毫秒',
            placeholder: '输入关键词快速查找',
        },
        chs: {
            chs_to_cht: '繁體中文',
            cht_to_chs: '简体中文',
        }
    },
    aside: {
        sayhello: {
            morning: '一日之计在于晨',
            noon: '吃饱了才有力气干活',
            afternoon: '集中精力，攻克难关',
            night: '不要太劳累了，早睡更健康',
            goodnight: '睡个好觉，保证精力充沛',
        },
        sayhello2: ["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙","🤝 专修交互与设计","🏃 脚踏实地行动派","🧱 团队小组发动机","💢 壮汉人狠话不多","🎮 电竞游戏爱好者"],
    },
    covercolor: {
        enable: true
    },
    comment: {
        enable: false,
        type: '',
        commentBarrage: false,
        randomInfoStart: ["聪敏的","可爱的","美丽的"],
        randomInfoEnd: ["白菜","小可爱","小仙女"],
        twikoo: {
            url: '',
            accessToken: ''
        },
        waline: {
            url: '',
        }
    },
    lightbox: 'null',
    rightside: {
        enable: false
    },
    ai: {
        enable: true,
        key: '',
        talk: '我是王卓Sco开发的摘要生成助理ScoGPT，ScoGPT在静态部署时进行摘要的撰写，并且在访客访问时通过ScoCorrection转译后的文本摘要实现工具。我在这里只负责已经生成的摘要显示，你无法与我直接沟通，但我可以回答一些预设的问题。',
        randomPost: false,
    },
    music: {
        enable: false,
    },
    translate: undefined,
};</script><meta name="generator" content="Hexo 6.3.0"></head><body id="body"><!-- universe--><canvas id="universe"></canvas><!-- loading--><!-- console--><div id="console"><div class="close-btn" onclick="sco.hideConsole()"><i class="scoicon sco-close-fill"></i></div><div class="button-group"><div class="console-btn-item"><a class="darkmode_switchbutton" onclick="sco.switchDarkMode()" title="昼夜切换" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i></a></div><div class="console-btn-item" id="consoleHideAside"><a class="asideSwitch" onclick="sco.switchHideAside()" title="边栏显示控制" href="javascript:void(0);"><i class="scoicon sco-side-bar-fill"></i></a></div><div class="console-btn-item" id="consoleMusic" onclick="sco.musicToggle()"><a class="music-switch" title="音乐开关" href="javascript:void(0);"><i class="scoicon sco-disc-fill"></i></a></div></div><div class="console-mask" onclick="sco.hideConsole()"></div></div><!-- sidebar--><div id="sidebar" style="zoom: 1;"><div id="menu-mask" style="display: none;"></div><div id="sidebar-menus"><span class="sidebar-menu-item-title">功能</span><div class="sidebar-menu-item"><a class="darkmode_switchbutton menu-child" onclick="sco.switchDarkMode()" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i><span>显示模式</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div><span class="sidebar-menu-item-title">标签</span><div class="card-widget card-tags card-archives card-webinfo card-allinfo"><div class="card-tag-cloud"><a href="/tags/Ajax%E7%AC%94%E8%AE%B0/">Ajax笔记<sup>6</sup></a><a href="/tags/Hexo/">Hexo<sup>6</sup></a><a href="/tags/Qexo/">Qexo<sup>1</sup></a><a href="/tags/GitHub/">GitHub<sup>3</sup></a><a href="/tags/JavaScript/">JavaScript<sup>3</sup></a><a href="/tags/Markdown/">Markdown<sup>2</sup></a><a href="/tags/JavaScript%E7%AC%94%E8%AE%B0/">JavaScript笔记<sup>5</sup></a><a href="/tags/Vscode/">Vscode<sup>2</sup></a><a href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/">Vue前置基础<sup>5</sup></a><a href="/tags/Vue%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/">Vue框架笔记<sup>6</sup></a><a href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/">面试题<sup>2</sup></a><a href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/">Web APIs笔记<sup>10</sup></a><a href="/tags/JavaScript%E9%AB%98%E7%BA%A7/">JavaScript高级<sup>5</sup></a><a href="/tags/Windows/">Windows<sup>3</sup></a><a href="/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF%E6%A0%88/">其他技术栈<sup>6</sup></a><a href="/tags/jQuery/">jQuery<sup>1</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/">前端技术栈<sup>3</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CSS/">学习笔记-CSS<sup>9</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-HTML/">学习笔记-HTML<sup>2</sup></a><a href="/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/">前端经验<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/">前端笔记<sup>3</sup></a><a href="/tags/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/">网站资源<sup>2</sup></a><a href="/tags/%E5%AE%89%E5%8D%93%E7%8E%A9%E6%9C%BA/">安卓玩机<sup>1</sup></a><a href="/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/">网络协议<sup>1</sup></a></div></div></div></div><!-- keyboard--><div class="post" id="body-wrap"><header class="post-bg" id="page-header"><nav class="show" id="nav"><div id="nav-group"><div id="blog_name"><a id="site-name" href="/" title="返回博客主页"><span class="title">XC's Blog</span></a></div><div id="page-name-mask"><div id="page-name"><a id="page-name-text" onclick="sco.toTop()">整个前端面试题</a></div></div><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div></div><div id="nav-left"></div><div id="nav-right"><div class="nav-button" id="randomPost_button"><a class="site-page" onclick="toRandomPost()" title="随机一篇文章" href="javascript:void(0);"><i class="scoicon sco-signal-tower-fill"></i></a></div><div class="nav-button" id="nav-console"><a class="console_switchbutton" onclick="sco.showConsole()" title="中控台" href="javascript:void(0);"><i class="scoicon sco-dashboard-fill"></i></a></div><div class="nav-button" id="nav-totop" onclick="sco.toTop()"><a class="totopbtn"><i class="scoicon sco-arrow-up-line"></i><span id="percent">0</span></a></div><div id="toggle-menu"><a class="site-page"><i class="scoicon sco-menu-line"></i></a></div></div></div></nav><div class="coverdiv" id="coverdiv"><img class="nolazyload" id="post-cover" src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png" alt="整个前端面试题"></div><div id="post-info"><div id="post-firstinfo"><div class="meta-firstline"><a class="post-meta-original" title="该文章为原创文章，注意版权协议">原创</a><span class="post-meta-categories"><a class="post-meta-categories" href="/categories/面试题/">面试题</a></span><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"><span class="tags-name tags-punctuation">面试题</span></a></div></div></div></div><h1 class="post-title">整个前端面试题</h1><div id="post-meta"><div class="meta-secondline"></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><div class="post-ai"><div class="ai-title"><div class="ai-title-left"><i class="ai-title-icon scoicon sco-robot-fill"></i><div class="ai-title-text">文章摘要</div></div><div class="ai-tag" id="ai-tag">GPT 4</div></div><div class="ai-explanation" style="display: block;"></div><div class="ai-suggestions"></div><div class="ai-bottom"><div class="ai-tips">此内容根据文章生成，并经过人工审核，仅用于文章内容的解释与总结</div><a class="ai-report" title="投诉" target="_blank" rel="noopener" href="https://blog.wzsco.top/about/">投诉</a></div></div><article class="post-content" id="article-container"><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="1-1-html标签的类型（head，-body，-Doctype）-他们的作用是什么"><a href="#1-1-html标签的类型（head，-body，-Doctype）-他们的作用是什么" class="headerlink" title="1.1 html标签的类型（head， body，!Doctype） 他们的作用是什么"></a>1.1 html标签的类型（head， body，!Doctype） 他们的作用是什么</h2><p><strong>!DOCTYPE 标签</strong></p>
<ul>
<li>它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令</li>
</ul>
<p>head：</p>
<ul>
<li>是所有头部元素的容器, 绝大多数头部标签的内容不会显示给读者</li>
<li>该标签下所包含的部分可加入的标签有 base, link, meta, script, style和title</li>
</ul>
<p>body：</p>
<ul>
<li>用于定义文档的主体, 包含了文档的所有内容</li>
<li>该标签支持 html 的全局属性和事件属性</li>
</ul>
<h2 id="1-2-h5新特性"><a href="#1-2-h5新特性" class="headerlink" title="1.2 h5新特性"></a>1.2 h5新特性</h2><ul>
<li>新增选择器 document.querySelector、document.querySelectorAll</li>
<li>拖拽释放(Drag and drop) API</li>
<li>媒体播放的 video 和 audio</li>
<li>本地存储 localStorage 和 sessionStorage</li>
<li>离线应用 manifest</li>
<li>桌面通知 Notififications</li>
<li>语意化标签 article、footer、header、nav、section</li>
<li>增强表单控件 calendar、date、time、email、url、search</li>
<li>地理位置 Geolocation</li>
<li>多任务 webworker</li>
<li>全双工通信协议 websocket</li>
<li>历史管理 history</li>
<li>跨域资源共享(CORS) Access-Control-Allow-Origin</li>
<li>页面可见性改变事件 visibilitychange</li>
<li>跨窗口通信 PostMessage</li>
<li>Form Data 对象</li>
<li>绘画 canvas</li>
</ul>
<h2 id="1-3-伪类和伪元素"><a href="#1-3-伪类和伪元素" class="headerlink" title="1.3 伪类和伪元素"></a>1.3 伪类和伪元素</h2><p>伪类：用于已有元素处于某种状态时为其添加对应的样式，这个状态是根据用户行为而动态变化的</p>
<p>&#x9;    例如：当用户悬停在指定元素时，可以通过:hover来描述这个元素的状态，虽然它和一般css相似，可以为 已有元素添加样式，但是它只有处于DOM树无法描述的状态下才能为元素添加样式，所以称为伪类</p>
<p>伪元素：用于创建一些不在DOM树中的元素，并为其添加样式</p>
<p>&#x9;    例如，我们可以通过:before来在一个元素之前添加一些文本，并为这些文本添加样式，虽然用户可以看见 这些文本，但是它实际上并不在DOM文档中</p>
<h2 id="1-4-html语义化"><a href="#1-4-html语义化" class="headerlink" title="1.4 html语义化"></a>1.4 html语义化</h2><table>
<thead>
<tr>
<th align="left">title</th>
<th align="left">页面主体内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hn</td>
<td align="left">h1~h6，分级标题，&lt;h1&gt; 与 &lt;title&gt; 协调有利于搜索引擎优化</td>
</tr>
<tr>
<td align="left">ul li</td>
<td align="left">无序列表</td>
</tr>
<tr>
<td align="left">ol li</td>
<td align="left">有序列表</td>
</tr>
<tr>
<td align="left">header</td>
<td align="left">页眉通常包括网站标志、主导航、全站链接以及搜索框</td>
</tr>
<tr>
<td align="left">nav</td>
<td align="left">标记导航，仅对文档中重要的链接群使用</td>
</tr>
<tr>
<td align="left">main</td>
<td align="left">页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能</td>
</tr>
<tr>
<td align="left">article</td>
<td align="left">定义外部的内容，其中的内容独立于文档的其余部分</td>
</tr>
<tr>
<td align="left">section</td>
<td align="left">定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分</td>
</tr>
<tr>
<td align="left">aside</td>
<td align="left">定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等</td>
</tr>
<tr>
<td align="left">footer</td>
<td align="left">页脚，只有当父级是body时，才是整个页面的页脚</td>
</tr>
<tr>
<td align="left">small</td>
<td align="left">呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权</td>
</tr>
<tr>
<td align="left">strong</td>
<td align="left">和 em 标签一样，用于强调文本，但它强调的程度更强一些</td>
</tr>
<tr>
<td align="left">em</td>
<td align="left">将其中的文本表示为强调的内容，表现为斜体</td>
</tr>
<tr>
<td align="left">mark</td>
<td align="left">使用黄色突出显示部分文本</td>
</tr>
<tr>
<td align="left">figure</td>
<td align="left">规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）</td>
</tr>
<tr>
<td align="left">figcaption</td>
<td align="left">定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置</td>
</tr>
<tr>
<td align="left">cite</td>
<td align="left">表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题</td>
</tr>
<tr>
<td align="left">progress</td>
<td align="left">定义运行中的进度（进程）</td>
</tr>
<tr>
<td align="left">address</td>
<td align="left">作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）</td>
</tr>
<tr>
<td align="left">blockquoto</td>
<td align="left">定义块引用，块引用拥有它们自己的空间</td>
</tr>
<tr>
<td align="left">del、ins、code</td>
<td align="left">移除的内容、添加的内容、标记代码</td>
</tr>
</tbody></table>
<p><strong>语义化优点</strong></p>
<ul>
<li>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构</li>
<li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重</li>
<li>方便屏幕阅读器解析，如盲人阅读器根据语义渲染网页</li>
<li>有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐</li>
</ul>
<h2 id="1-5-引入样式时，link和-import的区别？"><a href="#1-5-引入样式时，link和-import的区别？" class="headerlink" title="1.5 引入样式时，link和@import的区别？"></a>1.5 引入样式时，link和@import的区别？</h2><ul>
<li>链接样式时，link只能在HTML页面中引入外部样式</li>
<li>导入样式表时，@import 既可以在HTML页面中导入外部样式，也可以在css样式文件中导入外部css样式</li>
</ul>
<h2 id="1-6-介绍一下你对浏览器内核的理解"><a href="#1-6-介绍一下你对浏览器内核的理解" class="headerlink" title="1.6 介绍一下你对浏览器内核的理解"></a>1.6 介绍一下你对浏览器内核的理解</h2><p>主要分成两部分：渲染引擎(Layout Engine或Rendering Engine)和js引擎</p>
<ul>
<li>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</li>
<li>js引擎：解析和执行JavaScript来实现网页的动态效果</li>
</ul>
<h2 id="1-7-常见的浏览器内核有哪些"><a href="#1-7-常见的浏览器内核有哪些" class="headerlink" title="1.7 常见的浏览器内核有哪些"></a>1.7 常见的浏览器内核有哪些</h2><ul>
<li>Trident( MSHTML )：IE MaxThon TT The World 360 搜狗浏览器</li>
<li>Geckos：Netscape6及以上版本 FireFox Mozilla Suite/SeaMonkey</li>
<li>Presto：Opera7及以上(Opera内核原为：Presto，现为：Blink)</li>
<li>Webkit：Safari Chrome</li>
</ul>
<h2 id="1-8-label标签的作用是什么-是怎么用的"><a href="#1-8-label标签的作用是什么-是怎么用的" class="headerlink" title="1.8 label标签的作用是什么? 是怎么用的?"></a>1.8 label标签的作用是什么? 是怎么用的?</h2><ul>
<li>label标签用来定义表单控件间的关系</li>
<li>当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上</li>
<li>label 中有两个属性是非常有用的, FOR和ACCESSKEY</li>
<li>FOR属性功能：表示label标签要绑定的HTML元素，你点击这个标签的时候，所绑定的元素将获取焦点</li>
</ul>
<h2 id="1-9-title与h1的区别、b与strong的区别、i与em的区别"><a href="#1-9-title与h1的区别、b与strong的区别、i与em的区别" class="headerlink" title="1.9 title与h1的区别、b与strong的区别、i与em的区别?"></a>1.9 title与h1的区别、b与strong的区别、i与em的区别?</h2><ul>
<li>title属性没有明确意义，只表示标题；h1表示层次明确的标题，对页面信息的抓取也有很大的影响</li>
<li>strong标明重点内容，语气加强含义；b是无意义的视觉表示</li>
<li>em表示强调文本；i是斜体，是无意义的视觉表示</li>
<li>视觉样式标签：b i u s</li>
<li>语义样式标签：strong em ins del code</li>
</ul>
<h2 id="1-10-元素的alt和title有什么不同？"><a href="#1-10-元素的alt和title有什么不同？" class="headerlink" title="1.10 元素的alt和title有什么不同？"></a>1.10 元素的alt和title有什么不同？</h2><ul>
<li>在alt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字</li>
</ul>
<h2 id="1-11-浏览器页面有哪三层构成，分别是什么，作用是什么"><a href="#1-11-浏览器页面有哪三层构成，分别是什么，作用是什么" class="headerlink" title="1.11 浏览器页面有哪三层构成，分别是什么，作用是什么?"></a>1.11 浏览器页面有哪三层构成，分别是什么，作用是什么?</h2><ul>
<li>浏览器页面构成：结构层、表示层、行为层</li>
<li>分别是：HTML、CSS、JavaScript</li>
<li>作用：HTML实现页面结构，CSS完成页面的表现与风格，JavaScript实现一些客户端的功能与业务。</li>
</ul>
<h2 id="1-12-网页制作会用到的图片格式有哪些？"><a href="#1-12-网页制作会用到的图片格式有哪些？" class="headerlink" title="1.12 网页制作会用到的图片格式有哪些？"></a>1.12 网页制作会用到的图片格式有哪些？</h2><ul>
<li>Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。</li>
<li>Apng：是PNG的位图动画扩展，可以实现png格式的动态图片效果，有望代替GIF成为下一代动态图标准</li>
</ul>
<h2 id="1-13-viewport-所有属性？"><a href="#1-13-viewport-所有属性？" class="headerlink" title="1.13 viewport 所有属性？"></a>1.13 viewport 所有属性？</h2><ul>
<li>width :设置layout viewport的宽度，为一个正整数，或字符串’device-width’</li>
<li>initial-scale:设置页面的初始缩放值，为一个数字，可以带小数</li>
<li>minimum-scale:允许用户的最小缩放值，为一个数字，可以带小数</li>
<li>maximum-scale:允许用户的最大缩放值，为一个数字，可以带小数</li>
<li>height:设置layout viewport的高度，这个属性对我们并不重要，很少使用</li>
<li>user-scalable:是否允许用户进行缩放，值为‘no’或者‘yes’</li>
</ul>
<p>安卓中还支持：target-densitydpi，表示目标设备的密度等级，作用是决定css中的1px 代表多少物理像素</p>
<h2 id="1-14-meta标签的name属性值？"><a href="#1-14-meta标签的name属性值？" class="headerlink" title="1.14 meta标签的name属性值？"></a>1.14 meta标签的name属性值？</h2><p>name 属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的</p>
<blockquote>
<p>A 、Keywords(关键字)说明：keywords用来告诉搜索引擎你网页的关键字是什么。</p>
</blockquote>
<blockquote>
<p>B 、description(网站内容描述) 说明：description用来告诉搜索引擎你的网站主要内容。</p>
</blockquote>
<blockquote>
<p>C 、robots(机器人向导)说明：robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。</p>
</blockquote>
<h2 id="1-15-a标签中-如何禁用href-跳转页面-或-定位链接"><a href="#1-15-a标签中-如何禁用href-跳转页面-或-定位链接" class="headerlink" title="1.15 a标签中 如何禁用href 跳转页面 或 定位链接?"></a>1.15 a标签中 如何禁用href 跳转页面 或 定位链接?</h2><p>e.preventDefault();</p>
<p>href=”javascript:void(0);</p>
<h2 id="1-16-video标签的几个属性方法"><a href="#1-16-video标签的几个属性方法" class="headerlink" title="1.16 video标签的几个属性方法"></a>1.16 video标签的几个属性方法</h2><ul>
<li>src：视频的URL </li>
<li>poster：视频封面，没有播放时显示的图片 </li>
<li>preload：预加载 </li>
<li>autoplay：自动播放 </li>
<li>loop：循环播放 </li>
<li>controls：浏览器自带的控制条 </li>
<li>width：视频宽度 </li>
<li>height：视频高度</li>
</ul>
<h2 id="1-17-块级元素、行内元素、行内块元素"><a href="#1-17-块级元素、行内元素、行内块元素" class="headerlink" title="1.17 块级元素、行内元素、行内块元素"></a>1.17 块级元素、行内元素、行内块元素</h2><p><strong>块级元素：</strong></p>
<p>特点：可设置宽高边距，占满整行，会自动换行</p>
<p>示例：div、 p、 h1 、h6、ol、ul、dl、table、address、blockquote、form</p>
<p><strong>行内元素：</strong></p>
<p>特点：无法设置宽高边距，不会占满整行，不会自动换行</p>
<p>示例：a、strong、b、em、i、del、s、ins、u、span</p>
<p><strong>行内块元素：</strong></p>
<p>特点：可设置宽高，占满整行，但不会自动换行</p>
<p>示例：img、input</p>
<h2 id="1-18-web标准和w3c标准"><a href="#1-18-web标准和w3c标准" class="headerlink" title="1.18 web标准和w3c标准"></a>1.18 web标准和w3c标准</h2><p>web标准：分为结构、表现和行为</p>
<p>W3C标准：提出了更规范的要求</p>
<p>1、结构方面：标签字母要小写，标签要闭合，标签要正确嵌套</p>
<p>2、css和js方面：尽量使用外链写法，少用行内样式，属性名要见名知意</p>
<h2 id="1-19-前端需要注意哪些SEO"><a href="#1-19-前端需要注意哪些SEO" class="headerlink" title="1.19 前端需要注意哪些SEO"></a>1.19 前端需要注意哪些SEO</h2><p>1、合理的title、description、keywords：搜素时对这三项的权重逐个减少，title强调重点，重要关键词不要超过两次，而且要靠前，不同页面title要有所不同，description高度概括页面内容，长度合适，不过分堆砌关键词，不同页面description有所不同，keywords列出重要关键词即可</p>
<p>2、语义化的html代码，符合W3C标准</p>
<p>3、提高网站速度</p>
<p>4、重要HTML代码放前面</p>
<p>5、重要内容不要用js输出：爬虫不会执行js获取内容</p>
<p>6、少用 iframe：搜索引擎不会抓取 iframe 中的内容</p>
<p>7、非装饰性图片必须加 alt</p>
<h2 id="1-20-canvas和svg的区别"><a href="#1-20-canvas和svg的区别" class="headerlink" title="1.20 canvas和svg的区别"></a>1.20 canvas和svg的区别</h2><table>
<thead>
<tr>
<th align="left">canvas</th>
<th align="left">svg</th>
</tr>
</thead>
<tbody><tr>
<td align="left">通过js绘制2D图形，按像素进行渲染，当位置发生改变会重新进行绘制</td>
<td align="left">使用XML绘制的2D图形，可以为元素添加js处理器</td>
</tr>
<tr>
<td align="left">依赖分辨率</td>
<td align="left">不依赖分辨率</td>
</tr>
<tr>
<td align="left">不支持事件处理器</td>
<td align="left">支持事件处理器</td>
</tr>
<tr>
<td align="left">弱的文本渲染能力</td>
<td align="left">最适合带有哦大型渲染区域的应用程序（如谷歌地图）</td>
</tr>
<tr>
<td align="left">能以.png或.jpg格式保存结果图像</td>
<td align="left">复杂度高会减慢渲染速度</td>
</tr>
<tr>
<td align="left">最适合图像密集型游戏，其中的许多对象会被频繁重绘</td>
<td align="left">不适合游戏应用</td>
</tr>
</tbody></table>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-1-标准盒模型和IE盒模型两者的区别是什么？"><a href="#1-1-标准盒模型和IE盒模型两者的区别是什么？" class="headerlink" title="1.1 标准盒模型和IE盒模型两者的区别是什么？"></a>1.1 标准盒模型和IE盒模型两者的区别是什么？</h2><p><strong>概念</strong></p>
<p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括： 外边距<code>（margin）</code> 、 边框</p>
<p><code>（border）</code> 、 <code>内边距（padding）</code> 、<code> 实际内容（content）</code> 四个属性</p>
<p><strong>设置盒子模型</strong></p>
<ul>
<li>box-sizing:content-box;(标准)</li>
<li>box-sizing:border-box;(IE)</li>
</ul>
<p><strong>区别</strong></p>
<ul>
<li>标准的(W3C)盒模型：元素的实际宽度等于设置的宽高 + border + padding (默认方式)</li>
<li>IE盒模型： 元素的实际宽度就等于设置的宽高，即使定义有 border 和 padding 也不会改变元素的实际宽度，即 ( Element width = width )</li>
</ul>
<h2 id="1-2-盒子塌陷是什么？"><a href="#1-2-盒子塌陷是什么？" class="headerlink" title="1.2 盒子塌陷是什么？"></a>1.2 盒子塌陷是什么？</h2><p><strong>盒子塌陷</strong></p>
<p>本应该在父盒子内部的元素跑到了外部。</p>
<p><strong>为什么会出现盒子塌陷？</strong></p>
<p>当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文</p>
<p>档流），尤其是当父元素的高度为auto时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度</p>
<p>就会直接塌陷为零， 我们称这是<strong>CSS</strong>高度塌陷</p>
<p><strong>解决塌陷的方法</strong></p>
<ol>
<li>设置宽高</li>
<li>设置BFC</li>
<li>清楚浮动</li>
<li>给父盒子添加border</li>
<li>给父盒子设置padding-top</li>
</ol>
<h2 id="1-3-继承相关"><a href="#1-3-继承相关" class="headerlink" title="1.3 继承相关"></a>1.3 继承相关</h2><p>css的继承：就是给父级设置一些属性，子级继承了父级的该属性，这就是我们的css中的继承</p>
<p><strong>常用无继承性的属性</strong></p>
<ol>
<li><p>display：规定元素应该生成的框的类型</p>
</li>
<li><p>文本属性：</p>
<p> vertical-align：垂直文本对齐</p>
<p> text-decoration：规定添加到文本的装饰</p>
<p> text-shadow：文本阴影效果</p>
<p> white-space：空白符的处理</p>
<p> unicode-bidi：设置文本的方向</p>
</li>
<li><p> 盒子模型的属性：width、height、margin、padding、border</p>
</li>
<li><p>背景属性：background</p>
</li>
<li><p>定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max</p>
<p>width、max-height、overflow、clip、z-index</p>
</li>
</ol>
<p><strong>有继承性的属性</strong></p>
<ol>
<li><p>font：字体系列属性</p>
</li>
<li><p>文本系列属性：</p>
<p>text-indent：文本缩进</p>
<p> text-align：文本水平对齐</p>
<p> line-height：行高</p>
<p> word-spacing：增加或减少单词间的空白（即字间隔）</p>
<p> letter-spacing：增加或减少字符间的空白（字符间距）</p>
<p> text-transform：控制文本大小写</p>
<p> direction：规定文本的书写方向</p>
<p> color：文本颜色 a元素除外</p>
</li>
<li><p>元素可见性：visibility</p>
</li>
<li><p>表格布局属性：caption-side、border-collapse、border-spacing、empty-cells、table-layout</p>
</li>
<li><p>列表布局属性：list-style-type、list-style-image、list-style-position、list-style</p>
</li>
<li><p>生成内容属性：quotes</p>
</li>
<li><p>光标属性：cursor</p>
</li>
</ol>
<h2 id="1-4-行内元素可以设置padding，margin吗？"><a href="#1-4-行内元素可以设置padding，margin吗？" class="headerlink" title="1.4 行内元素可以设置padding，margin吗？"></a>1.4 行内元素可以设置padding，margin吗？</h2><ul>
<li>行内元素的margin左右有效，上下无效</li>
<li>行内元素的padding左右有效 ，但是由于设置padding上下不占页面空间，无法显示效果，所以无效</li>
</ul>
<h2 id="1-5-什么是边距重叠？什么情况下会发生边距重叠？如何解决边距重叠？"><a href="#1-5-什么是边距重叠？什么情况下会发生边距重叠？如何解决边距重叠？" class="headerlink" title="1.5 什么是边距重叠？什么情况下会发生边距重叠？如何解决边距重叠？"></a>1.5 什么是边距重叠？什么情况下会发生边距重叠？如何解决边距重叠？</h2><p>边距重叠：两个box如果都设置了边距，那么在垂直方向上，两个box的边距会发生重叠，以绝对值大的那个为最终结果显示在页面上</p>
<p><strong>边距重叠分为两种：</strong></p>
<p>同级关系的重叠：</p>
<p>同级元素在垂直方向上外边距会出现重叠情况，最后外边距的大小取两者绝对值大的那个</p>
<p>父子关系的边距重叠：</p>
<p>嵌套崩塌</p>
<p>父子关系，如果子元素设置了外边距，在没有把父元素变成BFC的情况下，父元素也会产生外边距。</p>
<p>给父元素添加overflow：hidden 这样父元素就变为 BFC，不会随子元素产生外边距。</p>
<h2 id="1-6-BFC是什么？"><a href="#1-6-BFC是什么？" class="headerlink" title="1.6 BFC是什么？"></a>1.6 BFC是什么？</h2><p><strong>文档有几种流</strong></p>
<ol>
<li>定位流<ul>
<li>绝对定位方案，盒从常规流中被移除，不影响常规流的布局；</li>
<li>它的定位相对于它的包含块，相关CSS属性：top、bottom、left、right；</li>
<li>如果元素的属性position为absolute或fixed，它是绝对定位元素；</li>
<li>对于position: absolute，元素定位将相对于上级元素中最近的一个relative、fixed、</li>
<li>absolute，如果没有则相对于body；</li>
</ul>
</li>
<li>浮动流<ul>
<li>左浮动元素尽量靠左、靠上，右浮动同理</li>
<li>这导致常规流环绕在它的周边，除非设置 clear 属性</li>
<li>浮动元素不会影响块级元素的布局</li>
<li>但浮动元素会影响行内元素的布局，让其围绕在自己周围，撑大父级元素，从而间接影响块级元素布局</li>
<li>最高点不会超过当前行的最高点、它前面的浮动元素的最高点</li>
<li>不超过它的包含块，除非元素本身已经比包含块更宽</li>
<li>行内元素出现在左浮动元素的右边和右浮动元素的左边，左浮动元素的左边和右浮动元素的</li>
<li>右边是不会摆放浮动元素的</li>
</ul>
</li>
<li>普通流<ul>
<li>在常规流中，盒一个接着一个排列;</li>
<li>在块级格式化上下文里面， 它们竖着排列；</li>
<li>在行内格式化上下文里面， 它们横着排列;</li>
<li>当position为static或relative，并且float为none时会触发常规流；</li>
<li>对于静态定位(static positioning)，position: static，盒的位置是常规流布局里的位置；</li>
<li>对于相对定位(relative positioning)，position: relative，盒偏移位置由top、bottom、</li>
<li>left、right属性定义。即使有偏移，仍然保留原有的位置，其它常规流不能占用这个位置。</li>
</ul>
</li>
</ol>
<p><strong>定义</strong></p>
<p>BFC的基本概念–BFC就是“块级格式化上下文”的意思，也有译作“块级格式化范围”。</p>
<p>通俗的讲，就是一个特殊的块，内部有自己的布局方式，不受外边元素的影响。</p>
<p><strong>布局规则</strong></p>
<ol>
<li>内部的 Box 会在垂直方向，一个接一个地放置</li>
<li>垂直方向上的距离由margin决定。（完整的说法是：属于同一个BFC的两个相邻Box的margin会发生重叠（塌陷），与方向无关。）</li>
<li>每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此。（这说明BFC中子元素不会超出他的包含块，而position为absolute的元素可以超出他的包含块边界）</li>
<li>BFC的区域不会与float的元素区域重叠</li>
<li>计算BFC的高度时，浮动子元素也参与计算</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然</li>
</ol>
<p><strong>哪些元素会创建 BFC</strong></p>
<ol>
<li>根元素</li>
<li>float 属性不为 none</li>
<li>position 为 absolute 或 fixed</li>
<li>display 为 inline-block， table-cell， table-caption， flex， inline-flex</li>
<li>overflow 不为 visible</li>
</ol>
<p><strong>场景</strong></p>
<ol>
<li><p><strong>清除元素内部浮动</strong></p>
<p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。</p>
<p>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</p>
</li>
<li><p><strong>解决外边距合并问题(嵌套崩塌)</strong></p>
<p>外边距合并的问题。</p>
<p>盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</p>
<p>属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。</p>
</li>
<li><p><strong>制作右侧自适应的盒子问题</strong></p>
<p>普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</p>
</li>
</ol>
<h2 id="1-7-块元素居中"><a href="#1-7-块元素居中" class="headerlink" title="1.7 块元素居中"></a>1.7 块元素居中</h2><ul>
<li>我们可以利用margin:0 auto来实现元素的水平居中。</li>
<li>利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水</li>
</ul>
<p>平和垂直方向上的居中。</p>
<ul>
<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素</li>
</ul>
<p>的中心点到页面的中心。</p>
<ul>
<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素</li>
</ul>
<p>的中心点到页面的中心。</p>
<ul>
<li>使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对</li>
</ul>
<p>齐，然后它的子元素也可以实现垂直和水平的居中。</p>
<p>对于宽高不定的元素，后面两种方法，可以实现元素的垂直和水平的居中。</p>
<h2 id="1-8-CSS-优化、提高性能的方法有哪些？"><a href="#1-8-CSS-优化、提高性能的方法有哪些？" class="headerlink" title="1.8 CSS 优化、提高性能的方法有哪些？"></a>1.8 CSS 优化、提高性能的方法有哪些？</h2><p><strong>加载性能：</strong></p>
<ul>
<li>css压缩：将写好的css进行打包压缩，可以减小文件体积</li>
<li>css单一样式：当需要下边距和左边距的时候，很多时候会选择使用margin-left:20px;margin-bottom:30px</li>
<li>减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载</li>
</ul>
<p><strong>选择器性能：</strong></p>
<ul>
<li>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。</li>
<li>当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等</li>
<li>如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。</li>
<li>过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</li>
<li>尽量少的去对标签进行选择，而是用class。</li>
<li>尽量少的去使用后代选择器，降低选择器的权重值。后</li>
<li>代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</li>
<li>了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</li>
</ul>
<p><strong>渲染性能：</strong></p>
<ul>
<li>属性值为0时，不加单位。</li>
<li>可以省略小数点之前的0。</li>
<li>标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</li>
<li>选择器优化嵌套，尽量避免层级过深。</li>
<li>css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。</li>
<li>不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。</li>
</ul>
<p><strong>可维护性、健壮性：</strong></p>
<ul>
<li>将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。</li>
<li>样式与内容分离：将css代码定义到外部css中</li>
</ul>
<h2 id="1-9-行内元素和块级元素什么区别，然后怎么相互转换"><a href="#1-9-行内元素和块级元素什么区别，然后怎么相互转换" class="headerlink" title="1.9 行内元素和块级元素什么区别，然后怎么相互转换"></a>1.9 行内元素和块级元素什么区别，然后怎么相互转换</h2><p><strong>块级元素</strong></p>
<ol>
<li><p>总是从新的一行开始，即各个块级元素独占一行，默认垂直向下排列</p>
</li>
<li><p>高度、宽度、margin及padding都是可控的，设置有效，有边距效果</p>
</li>
<li><p>宽度没有设置时，默认为100%</p>
</li>
<li><p>块级元素中可以包含块级元素和行内元素</p>
</li>
</ol>
<p><strong>行内元素</strong></p>
<ol>
<li><p>和其他元素都在一行，即行内元素和其他行内元素都会在一条水平线上排列</p>
</li>
<li><p>高度、宽度是不可控的，设置无效，由内容决定</p>
</li>
<li><p>根据标签语义化的理念，行内元素最好只包含行内元素，不包含块级元素</p>
</li>
</ol>
<p><strong>转换</strong></p>
<ol>
<li>display:inline;转换为行内元素</li>
<li>display:block;转换为块状元素</li>
<li>display:inline-block;转换为行内块状元素</li>
</ol>
<h2 id="1-10-min-width-max-width-和-min-height-max-height-属性间的覆盖规则？"><a href="#1-10-min-width-max-width-和-min-height-max-height-属性间的覆盖规则？" class="headerlink" title="1.10 min-width/max-width 和 min-height/max-height 属性间的覆盖规则？"></a>1.10 min-width/max-width <strong>和</strong> <strong>min-height/max-height</strong> 属性间的覆盖规则？</h2><ol>
<li>max-width 会覆盖 width，即使 width 是行内样式或者设置了 !important。</li>
<li>min-width 会覆盖 max-width，此规则发生在 min-width 和 max-width 冲突的时候；</li>
</ol>
<h2 id="1-11-浏览器是怎样解析CSS选择器的？"><a href="#1-11-浏览器是怎样解析CSS选择器的？" class="headerlink" title="1.11 浏览器是怎样解析CSS选择器的？"></a>1.11 浏览器是怎样解析CSS选择器的？</h2><p>CSS选择器的解析是从右向左解析的</p>
<p><strong>原因：</strong></p>
<p>从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点(叶子节点)，而从左向右的匹配规则的性能都浪</p>
<p>费在了失败的查找上面</p>
<h2 id="1-12-width-auto-和-width-100-的区别"><a href="#1-12-width-auto-和-width-100-的区别" class="headerlink" title="1.12 width:auto 和 width:100%的区别"></a>1.12 width:auto 和 width:100%的区别</h2><ul>
<li>width:100%会使元素box的宽度等于父元素的contentbox的宽度</li>
<li>width:auto会使元素撑满整个父元素，margin、border、padding、content区域会自动分配水平空间。</li>
</ul>
<h2 id="1-13-display、position和float的相互关系？"><a href="#1-13-display、position和float的相互关系？" class="headerlink" title="1.13 display、position和float的相互关系？"></a>1.13 display、position和float的相互关系？</h2><ul>
<li>首先我们判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现</li>
<li>然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被 设置为table或者block，具体转换需要看初始转换值</li>
<li>如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display 的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对 于浮动后的最终位置定位</li>
<li>如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是， 则保持指定的display属性值不变</li>
</ul>
<p>总的来说，可以把它看作是一个类似优先级的机制，”position:absolute”和”position:fixed”优先级最高，有它存在 的时候，浮动不起作用，’display’的值也需要调整；其次，元素的’float’特性的值不是”none”的时候或者它是根元素 的时候，调整’display’的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’特性值同设置值。</p>
<h2 id="1-14-IFC-是什么？"><a href="#1-14-IFC-是什么？" class="headerlink" title="1.14 IFC 是什么？"></a>1.14 IFC 是什么？</h2><p>IFC指的是行级格式化上下文，它有这样的一些布局规则：</p>
<ul>
<li>行级上下文内部的盒子会在水平方向，一个接一个地放置。</li>
<li>当一行不够的时候会自动切换到下一行。&#x20;</li>
<li>行级上下文的高度由内部最高的内联盒子的高度决定</li>
</ul>
<h2 id="1-15-为什么不建议使用统配符初始化-css-样式"><a href="#1-15-为什么不建议使用统配符初始化-css-样式" class="headerlink" title="1.15 为什么不建议使用统配符初始化 css 样式"></a>1.15 为什么不建议使用统配符初始化 css 样式</h2><ul>
<li>采用*{pading:0;margin:0;}这样的写法好处是写起来很简单，但是是通配符，需要把所有的标签都遍历一遍，当网站较大时， 样式比较多，这样写就大大的加强了网站运行的负载，会使网站加载的时候需要很长一段时间，因此一般大型的网站都有分层次的一 套初始化样式</li>
<li>出于性能的考虑，并不是所有标签都会有padding和margin，因此对常见的具有默认padding和margin的元素初始化即 可，并不需使用通配符*来初始化</li>
</ul>
<h2 id="1-16-CSS3-新特新"><a href="#1-16-CSS3-新特新" class="headerlink" title="1.16 CSS3 新特新"></a>1.16 CSS3 新特新</h2><ol>
<li>新增各种 CSS 选择器 <code> :not(p) </code> 选择每个非p的元素； <code>p:empty</code> 选择每个没有任何子级的p元素（包括文本节点）</li>
<li>边框（Borders）</li>
<li>背景 background-clip（规定背景图的绘制区域），background-origin，background-size</li>
<li>线性渐变 （Linear Gradients） 向下/向上/向左/向右/对角方向</li>
<li>文本效果 阴影text-shadow，textwrap，word-break，word-wrap</li>
<li>2D 转换 transform:scale(0.85,0.90) | translate(0px,-30px) | skew(-9deg,0deg) |rotate()  <strong>3D转换</strong> perspective()；transform是向元素应用 2D 或者 3D 转换</li>
<li>过渡 transition</li>
<li>动画</li>
<li>多列布局 （multi-column layout）</li>
<li>盒模型</li>
<li>flex 布局</li>
<li>多媒体查询 **定义两套css，当浏览器的尺寸变化时会采用不同的属性</li>
</ol>
<h2 id="1-17-position-跟-display、float-这些特性相互叠加后会怎么样？"><a href="#1-17-position-跟-display、float-这些特性相互叠加后会怎么样？" class="headerlink" title="1.17 position 跟 display、float 这些特性相互叠加后会怎么样？"></a>1.17 position 跟 display、float 这些特性相互叠加后会怎么样？</h2><ul>
<li>display 属性规定元素应该生成的框的类型；position属性规定元素的定位类型；float属性是一种布局方式，定义元素在哪个方向浮动。</li>
<li>类似于优先级机制：position：absolute/fixed优先级最高，有他们在时，float不起作用，display值需要调整。float 或者absolute定位的元素，只能是块元素或表格。</li>
</ul>
<h2 id="1-18-什么是CSS-预处理器？为什么使用？"><a href="#1-18-什么是CSS-预处理器？为什么使用？" class="headerlink" title="1.18 什么是CSS 预处理器？为什么使用？"></a>1.18 什么是CSS 预处理器？为什么使用？</h2><ul>
<li>Less、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率</li>
</ul>
<p><strong>为什么要使用？</strong></p>
<ul>
<li>可嵌套性</li>
<li>变量</li>
<li>Mixins(混合@mixin)：可重用性高，可以注入任何东西</li>
<li>@extend：允许一个选择器继承另一个选择器</li>
<li>@function:函数功能，用户使用@function 可以去编写自己的函数</li>
<li>引用父元素&amp;：在编译时，&amp;将被替换成父选择符</li>
<li>计算功能</li>
<li>组合连接： #{} :变量连接字符串</li>
<li>循环语句：（很少用到）</li>
<li>if 语句：（很少用到）</li>
</ul>
<h2 id="1-19-浏览器是怎样解析的？"><a href="#1-19-浏览器是怎样解析的？" class="headerlink" title="1.19 浏览器是怎样解析的？"></a>1.19 浏览器是怎样解析的？</h2><ol>
<li>HTML 被 HTML 解析器解析成 DOM 树；2. CSS 被 CSS 解析器解析成 CSSOM 树；</li>
<li>结合 DOM 树和 CSSOM 树，生成一棵渲染树(Render Tree)，这一过程称为 Attachment；</li>
<li>生成布局(flow)，浏览器在屏幕上“画”出渲染树中的所有节点；</li>
<li>将布局绘制(paint)在屏幕上，显示出整个页面。</li>
</ol>
<h2 id="1-20-在网页中的应该使用奇数还是偶数的字体？为什么呢？"><a href="#1-20-在网页中的应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="1.20 在网页中的应该使用奇数还是偶数的字体？为什么呢？"></a>1.20 在网页中的应该使用奇数还是偶数的字体？为什么呢？</h2><ul>
<li>使用偶数字体</li>
<li>Windows 自带的点阵宋体（中易宋体）从 Vista 开始只提供 12、14、16 px 这三个大小的点阵，而 13、15、17 px时用的是小一号的点。（即每个字占的空间大了 1 px，但点阵没变），于是略显稀疏</li>
</ul>
<h2 id="1-21-元素竖向的百分比设定是相对于容器的高度吗？"><a href="#1-21-元素竖向的百分比设定是相对于容器的高度吗？" class="headerlink" title="1.21 元素竖向的百分比设定是相对于容器的高度吗？"></a>1.21 元素竖向的百分比设定是相对于容器的高度吗？</h2><p>当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度</p>
<h2 id="1-22-怎么让谷歌支持小于12px的文字？"><a href="#1-22-怎么让谷歌支持小于12px的文字？" class="headerlink" title="1.22 怎么让谷歌支持小于12px的文字？"></a>1.22 怎么让谷歌支持小于12px的文字？</h2><p>使用 scale</p>
<h2 id="1-23-li-与-li-之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#1-23-li-与-li-之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="1.23 li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>1.23 li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h2><p>行框的排列会受到中间空白（回车空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了</p>
<p><strong>解决方法：</strong></p>
<ol>
<li>可以将代码全部写在一排</li>
<li>浮动li中float：left</li>
<li>在ul中用font-size：0（谷歌不支持）；</li>
<li>可以将 ul{letter-spacing: -4px;};li{letter-spacing: normal;}</li>
</ol>
<h2 id="1-24-display-inline-block-什么时候会显示间隙？"><a href="#1-24-display-inline-block-什么时候会显示间隙？" class="headerlink" title="1.24 display:inline-block 什么时候会显示间隙？"></a>1.24 display:inline-block 什么时候会显示间隙？</h2><ol>
<li>有空格时候会有间隙 解决：s除空格</li>
<li>margin正值的时候 解决：margin使用负值</li>
<li>使用font-size时候 解决：font-size:0、letter-spacing、word-spacing</li>
</ol>
<h2 id="1-25-png、jpg、gif-这些图片格式解释一下，分别什么时候用。有没有了解过webp？"><a href="#1-25-png、jpg、gif-这些图片格式解释一下，分别什么时候用。有没有了解过webp？" class="headerlink" title="1.25 png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？"></a>1.25 png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</h2><ul>
<li>png是便携式网络图片（Portable Network Graphics）是一种无损数据压缩位图文件格式.优点是：压缩比高，色彩好。 大多数地方都可以用。</li>
<li>jpg是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在www上，被用来储存和传输照片的格式。</li>
<li>gif是一种位图文件格式，以8位色重现真色彩的图像。可以实现动画效果.</li>
<li>webp格式是谷歌在2010年推出的图片格式，压缩率只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久了，兼容性不好，目前谷歌和opera支持。</li>
</ul>
<h2 id="1-26-style-标签写在-body-后与-body前有什么区别？"><a href="#1-26-style-标签写在-body-后与-body前有什么区别？" class="headerlink" title="1.26 style 标签写在 body 后与 body前有什么区别？"></a>1.26 style 标签写在 body 后与 body前有什么区别？</h2><p>页面加载自上而下 当然是先加载样式。<br>写在 body 标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现 FOUC 现象（即样式失效导致的页面闪烁问题）</p>
<h2 id="1-27-before-和-after-中双冒号和单冒号有什么区别、作用？"><a href="#1-27-before-和-after-中双冒号和单冒号有什么区别、作用？" class="headerlink" title="1.27 ::before 和::after 中双冒号和单冒号有什么区别、作用？"></a>1.27 ::before 和::after 中双冒号和单冒号有什么区别、作用？</h2><p><strong>区别</strong></p>
<p>在css中伪类一直用:表示，如 <code>:hover</code>，<code>:active</code>等</p>
<p>伪元素在CSS1中已存在，当时语法使用 : 表示 ，如：<code>:before</code>和<code>:after</code></p>
<p>后来在CSS3中修订，伪元素用 ::表示，如 <code>::before</code> 和 <code>::after</code>，以此区分伪元素和伪类</p>
<p>由于低版本 IE 对双冒号不兼容，开发者为了兼容性各浏览器，继续使使用 :after 这种老语法表示伪元素</p>
<p>单冒号<code>:</code> CSS3表示伪类；双冒号<code>::</code>CSS3伪元素</p>
<p><strong>作用：</strong></p>
<p>::before 和::after 的主要作用是在元素内容前后加上指定内容</p>
<p>伪类与伪元素都是用于向选择器加特殊效果</p>
<p>伪类与伪元素的本质区别就是是否抽象创造了新元素</p>
<p>伪类只要不是互斥可以叠加使用</p>
<p>伪元素在一个选择器中只能出现一次，并且只能出现在末尾</p>
<p>伪类与伪元素优先级分别与类、标签优先级相同</p>
<h2 id="1-28-CSS3新增伪类，以及伪元素？"><a href="#1-28-CSS3新增伪类，以及伪元素？" class="headerlink" title="1.28 CSS3新增伪类，以及伪元素？"></a>1.28 CSS3新增伪类，以及伪元素？</h2><p><strong>CSS3 新增伪类</strong></p>
<p>p:first-of-type 选择属于其父元素的首个<p>元素的每个<p>元素</p>
<p>p:last-of-type 选择属于其父元素的最后<p>元素的每个<p>元素</p>
<p>p:nth-child(n) 选择属于其父元素的第 n 个子元素的每个<p>元素</p>
<p>p:nth-last-child(n) 选择属于其父元素的倒数第 n 个子元素的每个<p>元素</p>
<p>p:nth-of-type(n) 选择属于其父元素第 n 个<p>元素的每个<p>元素</p>
<p>p:nth-last-of-type(n) </p>
<p>选择属于其父元素倒数第 n 个<p>元素的每个<p>元素</p>
<p>p:last-child 选择属于其父元素最后一个子元素的每个<p>元素</p>
<p>p:target </p>
<p>选择当前活动的<p>元素</p>
<p>:not(p) 选择非<p>元素的每个元素</p>
<p>:enabled 控制表单控件的可用状态</p>
<p>:disabled </p>
<p>控制表单控件的禁用状态</p>
<p>:checked </p>
<p>单选框或复选框被选中</p>
<p><strong>伪元素</strong></p>
<p>::first-letter 将样式添加到文本的首字母</p>
<p>::first-line 将样式添加到文本的首行</p>
<p>::before 在某元素之前插入某些内容</p>
<p>::after 在某元素之后插入某些内容</p>
<h2 id="1-29-未知高度元素垂直居中、垂直居中的实现方式有哪些？"><a href="#1-29-未知高度元素垂直居中、垂直居中的实现方式有哪些？" class="headerlink" title="1.29 未知高度元素垂直居中、垂直居中的实现方式有哪些？"></a>1.29 未知高度元素垂直居中、垂直居中的实现方式有哪些？</h2><ol>
<li>绝对定位+css3 transform:translate(-50%，-50%)</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">	-webkit-<span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>css3</strong> 的flex布局</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>:flex;</span><br><span class="line">	<span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">	<span class="attribute">align-self</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>table布局</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>sadgsdgasgd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span>&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">display</span>:table;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background</span>:<span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">display</span>:table-cell;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">vertical-align</span>:middle;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.child</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">height</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-30-图片垂直居中"><a href="#1-30-图片垂直居中" class="headerlink" title="1.30 图片垂直居中"></a>1.30 图片垂直居中</h2><p><strong>1.</strong> 使用flex实现图片垂直居中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flexbox&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.flexbox</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>:center</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.flexbox</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>利用Display: table;实现img图片垂直居中</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tablebox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;imgbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tablebox</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">250px</span>;<span class="attribute">background</span>: <span class="number">#fff</span>;<span class="attribute">display</span>: table&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#imgbox</span>&#123;<span class="attribute">display</span>: table-cell;<span class="attribute">vertical-align</span>: middle;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#imgbox</span> <span class="selector-tag">img</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>用绝对定位实现垂直居中</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posdiv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.posdiv</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> auto&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.posdiv</span> <span class="selector-tag">img</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">margin-top</span>: -<span class="number">50px</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-31-文本元素居中"><a href="#1-31-文本元素居中" class="headerlink" title="1.31 文本元素居中"></a>1.31 文本元素居中</h2><ol>
<li>水平居中：text-align</li>
<li>垂直居中：line-height 和height设置一样</li>
<li>多行文本垂直居中<ul>
<li>父级元素高度不固定（padding-top和padding-bottom）</li>
<li>父级元素高度固定 （vertical-align:middle +display:table-cell ）</li>
</ul>
</li>
</ol>
<h2 id="1-32-CSS实现一个等腰三角形"><a href="#1-32-CSS实现一个等腰三角形" class="headerlink" title="1.32 CSS实现一个等腰三角形"></a>1.32 CSS实现一个等腰三角形</h2><p>主要是通过把宽高设置成0，边框宽度设置宽一些，设置其中三个边透明，只留一个边显示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">0px</span>;<span class="attribute">height</span>:<span class="number">0px</span>;<span class="attribute">margin</span>:<span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left</span>:<span class="number">80px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-right</span>:<span class="number">80px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>:<span class="number">138.56px</span> solid <span class="number">#A962CE</span>; <span class="comment">/*--三角形的高--*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-33-画-0-5px-的直线"><a href="#1-33-画-0-5px-的直线" class="headerlink" title="1.33 画 0.5px 的直线"></a>1.33 <strong>画</strong> <strong>0.5px</strong> 的直线</h2><ol>
<li><p>使用scale缩放</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.hr</span><span class="selector-class">.scale-half</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1px + scaleY(0.5)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hr scale-half&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Chrome/Safari都变虚了，只有Firefox比较完美看起来是实的而且还很细，效果和直接设置0.5px一</span></span><br><span class="line"><span class="comment">样。所以通过transform: scale会导致Chrome变虚了，而粗细几乎没有变化。但是如果加上transformorigin: 50% 100%：</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">.hr.scale-half &#123;</span><br><span class="line">	height: 1px;</span><br><span class="line">	transform: scaleY(0.5);</span><br><span class="line">	transform-origin: 50% 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>线性渐变linear-gradient</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.hr</span><span class="selector-class">.gradient</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">0deg</span>, <span class="number">#fff</span>, <span class="number">#000</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>linear-gradient(0deg, #fff, #000)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hr gradient&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>boxshadow</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.hr</span><span class="selector-class">.boxshadow</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0.5px</span> <span class="number">0</span> <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>box-shadow: 0 0.5px 0 #000<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hr boxshadow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>viewport</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-sacle=0.5&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">width=device-width表示将viewport视窗的宽度调整为设备的宽度，这个宽度通常是指物理上宽度</span></span><br><span class="line"><span class="comment">initial-sacle=0.5 缩放0.5</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="1-34-移动端适配方案"><a href="#1-34-移动端适配方案" class="headerlink" title="1.34 移动端适配方案"></a>1.34 移动端适配方案</h2><ol>
<li><strong>viewport</strong> <strong>适配</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=750,initial-scale=0.5&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">initial-scale = 屏幕的宽度 / 设计稿的宽度</span></span><br><span class="line"><span class="comment">为了适配其他屏幕，需要动态的设置 initial-scale 的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="variable constant_">WIDTH</span> = <span class="number">750</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">mobileAdapter</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> scale = screen.<span class="property">width</span> / <span class="variable constant_">WIDTH</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> content = <span class="string">`width=<span class="subst">$&#123;WIDTH&#125;</span>, initial-scale=<span class="subst">$&#123;scale&#125;</span>, maximumscale=<span class="subst">$&#123;scale&#125;</span>, minimum-scale=<span class="subst">$&#123;scale&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> meta = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meta[name=viewport]&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (!meta) &#123;</span></span><br><span class="line"><span class="language-javascript">meta = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;meta&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">meta.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;viewport&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(meta)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">meta.<span class="title function_">setAttribute</span>(<span class="string">&#x27;content&#x27;</span>,content)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mobileAdapter</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onorientationchange</span> = mobileAdapter <span class="comment">//屏幕翻转时再次执行</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>缺点</strong>：边线问题，不同尺寸下，边线的粗细是不一样的（等比缩放后），全部元素都是等比缩放，实际显示效果可能不太好</p>
<ol start="2">
<li><p><strong>vw</strong> <strong>适配（部分等比缩放）</strong></p>
<ul>
<li>开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标注是基于此宽度标注）</li>
<li>开始开发，对设计稿的标注进行转换，把px换成vw。比如页面元素字体标注的大小是32px，换成vw为 (100/750)*32 vw</li>
<li>对于需要等比缩放的元素，CSS使用转换后的单位</li>
<li>对于不需要缩放的元素，比如边框阴影，使用固定单位px</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximumscale=1, minimum-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> <span class="variable constant_">WIDTH</span> = <span class="number">750</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//:root &#123; --width: 0.133333 &#125; 1像素等于多少 vw</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--width&#x27;</span>, (<span class="number">100</span> / <span class="variable constant_">WIDTH</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>rem适配</strong></p>
</li>
<li><p><strong>弹性盒适配（合理布局）</strong></p>
</li>
</ol>
<h2 id="1-35-link-和-import-的区别"><a href="#1-35-link-和-import-的区别" class="headerlink" title="1.35 link 和 @import 的区别"></a>1.35 link 和 @import 的区别</h2><ol>
<li>引入的内容不同</li>
</ol>
<p>link 除了引用样式文件，还可以引用图片等资源文件，而 @import 只引用样式文件</p>
<ol start="2">
<li>加载顺序不同</li>
</ol>
<p>link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载</p>
<ol start="3">
<li>兼容性不同</li>
</ol>
<p>link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持</p>
<ol start="4">
<li>对 JS 的支持不同</li>
</ol>
<p>link 支持使用 Javascript 控制 DOM 去改变样式；而 @import 不支持</p>
<h2 id="1-36-iframe有什么优点、缺点"><a href="#1-36-iframe有什么优点、缺点" class="headerlink" title="1.36 iframe有什么优点、缺点?"></a>1.36 iframe有什么优点、缺点?</h2><p><strong>优点：</strong></p>
<ol>
<li>iframe能够原封不动的把嵌入的网页展现出来。</li>
<li>如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内<br>容的更改，方便快捷。</li>
<li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以<br>增加代码的可重用。</li>
<li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>iframe会阻塞主页面的onload事件；</li>
<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。会<br>产生很多页面，不容易管理。</li>
<li>iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会<br>分散访问者的注意力，用户体验度差。</li>
<li>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理<br>iframe中的内容，所以使用iframe会不利于搜索引擎优化（SEO）。</li>
<li>很多的移动设备无法完全显示框架，设备兼容性差。</li>
<li>iframe框架页面会增加服务器的http请求，对于大型网站是不可取的。</li>
</ol>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="1-1-let-var-const的区别？"><a href="#1-1-let-var-const的区别？" class="headerlink" title="1.1 let var const的区别？"></a>1.1 let var const的区别？</h2><p><strong>var ES5变量声明方式</strong></p>
<ol>
<li>在变量未赋值时，变量undefined（为使用声明变量时也为undefined）</li>
<li>作用域 var的作用域为方法作用域；只要在方法内定义了，整个方法内的定义变量后的代码都可以使用</li>
</ol>
<p><strong>let ES6变量声明方式</strong></p>
<ol>
<li>在变量为声明前直接使用会报错</li>
<li>作用域   let为块级作用域   通常let比var范围要小</li>
<li>let进制重复声明变量，否则会报错；var可以重复声明</li>
</ol>
<p><strong>const ES6变量声明</strong></p>
<ol>
<li>const为常量声明方式；声明变量时必须初始化，在后面出现的代码中不能再修改常量的值</li>
<li>const实际上保证的，并不是变量的值不得改动，而时变量指向的哪个内存地址不得改动</li>
</ol>
<h2 id="1-2-js数据类型，区别"><a href="#1-2-js数据类型，区别" class="headerlink" title="1.2 js数据类型，区别"></a>1.2 js数据类型，区别</h2><p><strong>基本数据类型：</strong></p>
<p>number，string，boolean，null，undefined，symbol，bigint</p>
<p><strong>引用数据类型：</strong></p>
<p>object，function</p>
<p>object：普通对象，数组对象，正则对象，日期对象，math数学函数对象。</p>
<p><strong>两种数据存储方式：</strong></p>
<p>基本数据类型是直接存储再栈中的简单数据段，占据空间小、大小固定，属于被频繁使用的数据。栈是存储基本数据类型值和执行代码的空间。</p>
<p>引用数据类型是存储在堆内存中，占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向队中该实体的起始地址，当解释器寻找引用值时，会检索其在栈中的地址，取得地址后从堆中获得实体。</p>
<p><strong>两种数据类型的区别：</strong></p>
<ol>
<li>堆比栈空间大，栈比堆运行速度快</li>
<li>堆内存是无序存储，可以根据引用直接获取</li>
<li>基础数据类型比较稳定，而且相对来说占用的内存小</li>
<li>引用数据类型大小是动态的，而且是无限的</li>
</ol>
<h2 id="1-3-Javascript-创建对象的几种方式？"><a href="#1-3-Javascript-创建对象的几种方式？" class="headerlink" title="1.3 Javascript 创建对象的几种方式？"></a>1.3 <strong>Javascript 创建对象的几种方式？</strong></h2><ol>
<li>简单对象的创建 使用对象字面量的方式{}</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Cat</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>new 一个function</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personOne=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用工厂方式来创建（Object 关键字）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wcDog =<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用 Object.create() 创建对象（使用现有对象作为原型）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="title class_">Object</span>.<span class="title function_">create</span>(anotherPerson);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>使用 ES6 中的类（Class）创建对象（其实质还是使用构造函数）：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1-4-、-和object-is-区别"><a href="#1-4-、-和object-is-区别" class="headerlink" title="1.4 ==、===和object.is 区别"></a>1.4 ==、===和object.is 区别</h2><ol>
<li>== 值比较值</li>
<li>===值和类型都比较</li>
<li>object.is 和 === 区别  +-0 false   NaN true</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span> === -<span class="number">0</span>);       <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);     <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>)              <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)            <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-如何区分数组和对象？"><a href="#1-5-如何区分数组和对象？" class="headerlink" title="1.5 如何区分数组和对象？"></a>1.5 如何区分数组和对象？</h2><ol>
<li>通过 ES6 中的 Array.isArray</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>([]) <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;&#125;) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过 instanceof 来识别</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">//true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>通过调用 constructor 来识别</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.<span class="property">constructor</span> <span class="comment">//返回 object</span></span><br><span class="line">[].<span class="property">constructor</span> <span class="comment">//返回 Array</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通过 Object.prototype.toString.call 方法来识别</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]) <span class="comment">//[&quot;object Array&quot;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;) <span class="comment">//[&quot;object Object&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="1-6-作用域和作用域链"><a href="#1-6-作用域和作用域链" class="headerlink" title="1.6 作用域和作用域链"></a>1.6 作用域和作用域链</h2><p>作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离<br>变量，不同作用域下同名变量不会有冲突</p>
<ol>
<li>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域。</li>
<li>ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现</li>
</ol>
<p><strong>什么是作用域链？</strong></p>
<ul>
<li><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链</p>
</li>
<li><p>由子级作用域返回父级作用域中寻找变量，就叫做作用域链</p>
</li>
<li><p>作用域链中的下一个变量对象来自包含环境，也叫外部环境。而再下一个变量对象则来自中的最后一个对象</p>
</li>
<li><p>作用域链前端始终都是当前执行的代码所在环境的变量对象，如果环境是函数，则将其活动对象作为变量对象</p>
</li>
</ul>
<p><strong>如何延长作用域链？</strong></p>
<p>执行环境的类型只有两种，全局和局部（函数）。但是有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除具体来说就是执行这两个语句时，作用域链都会得到加强</p>
<ol>
<li><p>try - catch 语句的 catch 块；会创建一个新的变量对象，包含的是被抛出的错误对象的声明</p>
</li>
<li><p>with 语句。with 语句会将指定的对象添加到作用域链中</p>
</li>
</ol>
<h2 id="1-7-constructor的理解"><a href="#1-7-constructor的理解" class="headerlink" title="1.7 constructor的理解"></a>1.7 constructor的理解</h2><p>创建的每个函数都有一个prototype（原型）对象，这个属性是一个指针，指向一个对象。在默认情况下，所有原型对象都会自动获得一个constructor属性，之后属性是一个指向prototype属性坐在函数的指针。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针，指向构造函数的原型对象。注意当将构造函数的prototype设置为等于一个以对象字面量形式创建的新对象时，constructor属性不再指向该构造函数</p>
<h2 id="1-8-webworker和websocket"><a href="#1-8-webworker和websocket" class="headerlink" title="1.8 webworker和websocket"></a>1.8 webworker和websocket</h2><p>web socket：在一个单独的持久连接上提供全双工、双向的通信。使用自定义的协议（ws://、wss://），同源策略对web socket不适用。<br>web worker：运行在后台的JavaScript，不影响页面的性能。<br>创建worker：var worker = new Worker(url);<br>向worker发送数据：worker.postMessage(data);<br>接收worker返回的数据：worker.onmessage<br>终止一个worker的执行：worker.terminate();</p>
<h2 id="1-9-XML与JSON的区别？"><a href="#1-9-XML与JSON的区别？" class="headerlink" title="1.9 XML与JSON的区别？"></a>1.9 XML与JSON的区别？</h2><ol>
<li>数据体积方面。JSON相对于XML来讲，数据的体积小，传递的速度更快些。</li>
<li>数据交互方面。JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。</li>
<li>数据描述方面。JSON对数据的描述性比XML较差。</li>
<li>传输速度方面。JSON的速度要远远快于XML。</li>
</ol>
<h2 id="1-10-map-和-forEach-的区别？"><a href="#1-10-map-和-forEach-的区别？" class="headerlink" title="1.10 map 和 forEach 的区别？"></a>1.10 map 和 forEach 的区别？</h2><p><strong>相同点：</strong></p>
<ol>
<li>都是循环遍历数组中的每一项</li>
<li>每次执行匿名函数都支持三个参数，参数分别为item（当前每一项），index（索引值），<br>arr（原数组）</li>
<li>匿名函数中的this都是指向window</li>
<li>只能遍历数组</li>
</ol>
<p><strong>不同点：</strong></p>
<ol>
<li>map()会分配内存空间存储新数组并返回，forEach()不会返回数据。</li>
<li>forEach()允许callback更改原始数组的元素。map()返回新的数组。</li>
</ol>
<h2 id="1-11-for-of-可以遍历哪些对象？"><a href="#1-11-for-of-可以遍历哪些对象？" class="headerlink" title="1.11 for of 可以遍历哪些对象？"></a>1.11 for of 可以遍历哪些对象？</h2><p>for..of..: 它是es6新增的一个遍历方法，但只限于迭代器(iterator), 所以普通的对象用for..of遍历<br>是会报错的。<br>可迭代的对象：包括Array, Map, Set, String, TypedArray, arguments对象等等</p>
<h2 id="1-13-new操作符具体干了什么呢"><a href="#1-13-new操作符具体干了什么呢" class="headerlink" title="1.13 new操作符具体干了什么呢?"></a>1.13 new操作符具体干了什么呢?</h2><ol>
<li>创建空对象；<br>var obj = {};</li>
<li>设置新对象的constructor属性为构造函数的名称，设置新对象的proto属性指向构造函数的<br>prototype对象；<br>obj.proto = ClassA.prototype;<br>扩展了新对象的原型链。</li>
<li>使用新对象调用函数，函数中的this被指向新实例对象：<br>ClassA.call(obj); //{}.构造函数();</li>
<li>返回this指针。当存在显示的返回时，返回return后面的内容。新建的空对象作废。</li>
</ol>
<h2 id="1-14-作用域"><a href="#1-14-作用域" class="headerlink" title="1.14 作用域"></a>1.14 作用域</h2><p>作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离<br>变量，不同作用域下同名变量不会有冲突</p>
<ol>
<li>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域。</li>
<li>ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现</li>
</ol>
<h2 id="1-15-javascript中arguments相关的问题"><a href="#1-15-javascript中arguments相关的问题" class="headerlink" title="1.15 javascript中arguments相关的问题"></a>1.15 javascript中arguments相关的问题</h2><p><strong>arguments</strong><br>在js中，我们在调用有参数的函数时，当往这个调用的有参函数传参时，js会把所传的参数全部存到一<br>个叫arguments的对象里面。它是一个类数组数据<br><strong>作用</strong><br>有了arguments这个对象之后，我们可以不用给函数预先设定形参了，可以动态地通过arguments为函<br>数加入参数</p>
<h2 id="1-16-instanceOf作用-即原理"><a href="#1-16-instanceOf作用-即原理" class="headerlink" title="1.16 instanceOf作用 即原理"></a>1.16 instanceOf作用 即原理</h2><p>instanceof主要作用就是判断一个实例是否属于某种类型</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">new_instance_of</span>(<span class="params">leftVaule, rightVaule</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> rightProto = rightVaule.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">    leftVaule = leftVaule.<span class="property">__proto__</span>; <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftVaule === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftVaule === rightProto) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        leftVaule = leftVaule.<span class="property">__proto__</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。</p>
<h2 id="1-17-数组和伪数组的区别"><a href="#1-17-数组和伪数组的区别" class="headerlink" title="1.17 数组和伪数组的区别?"></a>1.17 数组和伪数组的区别?</h2><ol>
<li>定义</li>
</ol>
<ul>
<li>数组是一个特殊对象,与常规对象的区别：<ul>
<li>当由新元素添加到列表中时，自动更新length属性</li>
<li>设置length属性，可以截断数组</li>
<li>从Array.protoype中继承了方法</li>
<li>属性为’Array’</li>
</ul>
</li>
<li>类数组是一个拥有length属性，并且他属性为非负整数的普通对象，类数组不能直接调用数组方法。</li>
</ul>
<ol start="2">
<li>区别<br>本质：类数组是简单对象，它的原型关系与数组不同</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="title function_">toString</span>()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="title function_">valueOf</span>()); <span class="comment">// &#123;length: 10&#125;</span></span><br><span class="line"><span class="keyword">let</span> array = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">toString</span>()); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">valueOf</span>()); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>类数组转换为数组</li>
</ol>
<ul>
<li>转换方法<ul>
<li>使用 Array.from()</li>
<li>使用 Array.prototype.slice.call()</li>
<li>使用 Array.prototype.forEach() 进行属性遍历并组成新的数组</li>
</ul>
</li>
<li>转换须知<ul>
<li>转换后的数组长度由 length 属性决定。索引不连续时转换结果是连续的，会自动补位</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> al1 = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(al1)) <span class="comment">// [0, 1, undefined, 3]</span></span><br><span class="line"><span class="comment">// 2.仅考虑 0或正整数 的索引</span></span><br><span class="line"><span class="keyword">let</span> al2 = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;-1&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(al2)); <span class="comment">// [0, 1, undefined, undefined]</span></span><br><span class="line"><span class="comment">// 3.使用slice转换产生稀疏数组</span></span><br><span class="line"><span class="keyword">let</span> al2 = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;-1&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(al2)); <span class="comment">//[0, 1, empty × 2]</span></span><br><span class="line"><span class="comment">// 4.使用数组方法操作类数组注意地方</span></span><br><span class="line"><span class="keyword">let</span> arrayLike2 = &#123;</span><br><span class="line">    <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">push</span>: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// push 操作的是索引值为 length 的位置</span></span><br><span class="line">arrayLike2.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike2); <span class="comment">// &#123;2: 1, 3: 4, length: 3, push: ƒ&#125;</span></span><br><span class="line">arrayLike2.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike2); <span class="comment">// &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-18-介绍下-Set、Map、WeakSet-和-WeakMap的区别？"><a href="#1-18-介绍下-Set、Map、WeakSet-和-WeakMap的区别？" class="headerlink" title="1.18 介绍下 Set、Map、WeakSet 和 WeakMap的区别？"></a>1.18 介绍下 Set、Map、WeakSet 和 WeakMap的区别？</h2><p><strong>Set</strong></p>
<ol>
<li>成员不能重复；</li>
<li>只有键值，没有键名，有点类似数组；</li>
<li>可以遍历，方法有 add、delete、has</li>
</ol>
<p><strong>WeakSet</strong></p>
<ol>
<li>成员都是对象（引用）；</li>
<li>成员都是弱引用，随时可以消失（不计入垃圾回收机制）。可以用来保存 DOM 节点，不容易造成内存泄露；</li>
<li>不能遍历，方法有 add、delete、has ；</li>
</ol>
<p><strong>Map</strong></p>
<ol>
<li>本质上是键值对的集合，类似集合；</li>
<li>可以遍历，方法很多，可以跟各种数据格式转换；</li>
</ol>
<p><strong>WeakMap</strong></p>
<ol>
<li>只接收对象为键名（null 除外），不接受其他类型的值作为键名；</li>
<li>键名指向的对象，不计入垃圾回收机制；</li>
<li>不能遍历，方法同 get、set、has、delete ；</li>
</ol>
<h2 id="1-19-简单说说-js-中有哪几种内存泄露的情况"><a href="#1-19-简单说说-js-中有哪几种内存泄露的情况" class="headerlink" title="1.19 简单说说 js 中有哪几种内存泄露的情况"></a>1.19 简单说说 js 中有哪几种内存泄露的情况</h2><ol>
<li>意外的全局变量；</li>
<li>闭包；</li>
<li>未被清空的定时器；</li>
<li>未被销毁的事件监听；</li>
<li>DOM 引用；</li>
</ol>
<h2 id="1-20-json和xml数据的区别"><a href="#1-20-json和xml数据的区别" class="headerlink" title="1.20 json和xml数据的区别?"></a>1.20 json和xml数据的区别?</h2><ol>
<li>数据体积方面：xml是重量级的，json是轻量级的，传递的速度更快些。</li>
<li>数据传输方面：xml在传输过程中比较占带宽，json占带宽少，易于压缩。</li>
<li>数据交互方面：json与javascript的交互更加方便，更容易解析处理，更好的进行数据交互</li>
<li>数据描述方面：json对数据的描述性比xml较差</li>
<li>xml和json都用在项目交互下，xml多用于做配置文件，json用于数据交互。</li>
</ol>
<h2 id="1-21-JavaScript有几种方法判断变量的类型"><a href="#1-21-JavaScript有几种方法判断变量的类型" class="headerlink" title="1.21 JavaScript有几种方法判断变量的类型?"></a>1.21 JavaScript有几种方法判断变量的类型?</h2><ol>
<li>使用typeof检测当需要判断变量是否是number, string, boolean, function, undefined等类型时，可以使用typeof进行判断。</li>
<li>使用instanceof检测instanceof运算符与typeof运算符相似，用于识别正在处理的对象的类型。与typeof方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型。</li>
<li>使用constructor检测constructor本来是原型对象上的属性，指向构造函数。但是根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的。</li>
</ol>
<h2 id="1-22-Math-min-lt-Math-max"><a href="#1-22-Math-min-lt-Math-max" class="headerlink" title="1.22  Math.min()&lt; Math.max()"></a>1.22  Math.min()&lt; Math.max()</h2><p>false<br>按常规的思路，这段代码应该输出 true，毕竟最小值小于最大值。但是却输出 false</p>
<h2 id="1-23-promise和-async-await-区别"><a href="#1-23-promise和-async-await-区别" class="headerlink" title="1.23 promise和 async await 区别?"></a>1.23 promise和 async await 区别?</h2><p><strong>概念</strong><br>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强<br>大，简单地说，Promise好比容器，里面存放着一些未来才会执行完毕（异步）的事件的结果，而<br>这些结果一旦生成是无法改变的<br>async await也是异步编程的一种解决方案，他遵循的是Generator 函数的语法糖，他拥有内置执<br>行器，不需要额外的调用直接会自动执行并输出结果，它返回的是一个Promise对象<br><strong>两者的区别</strong></p>
<ol>
<li>Promise的出现解决了传统callback函数导致的“地域回调”问题，但它的语法导致了它向纵向<br>发展行成了一个回调链，遇到复杂的业务场景，这样的语法显然也是不美观的。而async<br>await代码看起来会简洁些，使得异步代码看起来像同步代码，await的本质是可以提供等同<br>于”同步效果“的等待异步返回能力的语法糖，只有这一句代码执行完，才会执行下一句。</li>
<li>async await与Promise一样，是非阻塞的。</li>
<li>async await是基于Promise实现的，可以说是改良版的Promise，它不能用于普通的回调函<br>数。</li>
</ol>
<h2 id="1-24-defer和async区别"><a href="#1-24-defer和async区别" class="headerlink" title="1.24 defer和async区别?"></a>1.24 defer和async区别?</h2><ul>
<li><code>defer</code>要等到整个页面在内存中正常渲染结束（DOM结构完全生成，以及其他脚本执行完成），才会执行。多个defer脚本会按照它们在页面出现的顺序加载。==“渲染完再执行”==</li>
<li><code>async</code>一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。多个async脚本是不能保证加载顺序的。==“下载完就执行”==</li>
</ul>
<h2 id="1-25-同步和异步"><a href="#1-25-同步和异步" class="headerlink" title="1.25 同步和异步"></a>1.25 同步和异步</h2><p><strong>同步</strong></p>
<ul>
<li>指在 主线程上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务。</li>
<li>也就是调用一旦开始，必须这个调用 返回结果(划重点——）才能继续往后执行。程序的执行顺序<br>和任务排列顺序是一致的。</li>
</ul>
<p><strong>异步</strong></p>
<ul>
<li>异步任务是指不进入主线程，而进入 任务队列的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程。</li>
<li>每一个任务有一个或多个 回调函数。前一个任务结束后，不是执行后一个任务,而是执行回调函数，后一个任务则是不等前一个任务结束就执行。</li>
<li>程序的执行顺序和任务的排列顺序是不一致的，异步的。</li>
<li>我们常用的setTimeout和setInterval函数，Ajax都是异步操作。</li>
</ul>
<h2 id="1-26-javascript中arguments相关的问题？"><a href="#1-26-javascript中arguments相关的问题？" class="headerlink" title="1.26 javascript中arguments相关的问题？"></a>1.26 javascript中arguments相关的问题？</h2><p><strong>arguments</strong></p>
<p>在js中，我们在调用有参数的函数时，当往这个调用的有参函数传参时，js会把所传的参数全部存到一个叫arguments的对象里面。它是一个类数组数据</p>
<p><strong>由来</strong></p>
<p>Javascrip中每个函数都会有一个Arguments对象实例arguments，引用着函数的实参。它是寄生在js函数当中的，不能显式创建，arguments对象只有函数开始时才可用</p>
<p><strong>作用</strong></p>
<p>有了arguments这个对象之后，我们可以不用给函数预先设定形参了，可以动态地通过arguments为函数加入参数</p>
<h2 id="1-27-null-和-undefined-的区别，如何让一个属性变为null"><a href="#1-27-null-和-undefined-的区别，如何让一个属性变为null" class="headerlink" title="1.27 null 和 undefined 的区别，如何让一个属性变为null"></a>1.27 null 和 undefined 的区别，如何让一个属性变为null</h2><p><strong>undefined</strong></p>
<ol>
<li>声明了一个变量，但没有赋值</li>
<li>访问对象上不存在的属性</li>
<li>函数定义了形参，但没有传递实参</li>
<li>使用 void 对表达式求值</li>
</ol>
<p><strong>null</strong></p>
<ol>
<li>null是一个空值</li>
<li>null 有属于自己的类型 Null，而不属于Object类型</li>
<li>二进制的前三位为 0 会被 typeof 判断为对象类型</li>
</ol>
<h2 id="1-28-简单说说-js-中有哪几种内存泄露的情况"><a href="#1-28-简单说说-js-中有哪几种内存泄露的情况" class="headerlink" title="1.28 简单说说 js 中有哪几种内存泄露的情况"></a>1.28 简单说说 js 中有哪几种内存泄露的情况</h2><ol>
<li>意外的全局变量；</li>
<li>闭包；</li>
<li>未被清空的定时器；</li>
<li>未被销毁的事件监听；</li>
<li>DOM 引用；</li>
</ol>
<h2 id="1-29-call-appy-bind的作用和区别？"><a href="#1-29-call-appy-bind的作用和区别？" class="headerlink" title="1.29 call appy bind的作用和区别？"></a>1.29 call appy bind的作用和区别？</h2><p><strong>作用：</strong></p>
<p>都可以改变函数内部的this指向</p>
<p><strong>区别点：</strong></p>
<ol>
<li>call 和 apply 会调用函数，并且改变函数内部this指向。</li>
<li>call 和 apply 传递的参数不一样，call 传递参数arg1,arg2…形式 apply 必须数组形式[arg]</li>
<li>bind 不会调用函数，可以改变函数内部this指向</li>
</ol>
<h2 id="1-30-this指向（普通函数、箭头函数）"><a href="#1-30-this指向（普通函数、箭头函数）" class="headerlink" title="1.30 this指向（普通函数、箭头函数）"></a>1.30 this指向（普通函数、箭头函数）</h2><ol>
<li>谁调用了函数或者方法，那么这个函数或者对象中的this就指向谁</li>
<li>匿名函数中的this：匿名函数的执行具有全局性，则匿名函数中的this指向是window，而不是调用该匿名函数的对象</li>
</ol>
<p><strong>箭头函数中的this</strong></p>
<ul>
<li>箭头函数中的this是在函数定义的时候就确定下来的，而不是在函数调用的时候确定的</li>
<li>箭头函数中的this指向父级作用域的执行上下文；</li>
<li>箭头函数无法使用apply、call和bind方法改变this指向，因为其this值在函数定义的时候就被确定下来</li>
</ul>
<h2 id="1-31-箭头函数能否当构造函数"><a href="#1-31-箭头函数能否当构造函数" class="headerlink" title="1.31 箭头函数能否当构造函数"></a>1.31 箭头函数能否当构造函数</h2><p><strong>箭头函数表达式</strong>的语法比函数表达式更简洁，并且没有自己的 this ， arguments ， super 或new.target 。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数</p>
<h2 id="1-32-继承，优缺点-及方法有哪些？"><a href="#1-32-继承，优缺点-及方法有哪些？" class="headerlink" title="1.32 继承，优缺点 及方法有哪些？"></a>1.32 继承，优缺点 及方法有哪些？</h2><p><strong>继承的好处</strong></p>
<p>a：提高了代码的复用性</p>
<p>b：提高了代码的维护性</p>
<p>c：让类与类之间产生了关系，是多态的前提</p>
<p><strong>继承的弊端</strong></p>
<p>类的耦合性增强了,但是开发的原则：高内聚，低耦合</p>
<h3 id="1-32-1原型链继承"><a href="#1-32-1原型链继承" class="headerlink" title="1.32.1原型链继承"></a>1.32.1原型链继承</h3><p>实现方式：将子类的原型链指向父类的对象实例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;parent&quot;</span>;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">list</span> = [<span class="string">&#x27;坤&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">name</span>);	</span><br><span class="line">child.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong>子类实例child的<code>__proto__</code> 指向Child的原型链prototype，而Child.prototype指向Parent类的对象实例，该父类对象实例的 <code>__proto__</code> 指向Parent.prototype,所以Child可继承Parent的构造函数属性、方法和原型链属性、方法</p>
<p><strong>优点：</strong>可继承构造函数的属性，父类构造函数的属性，父类原型的属性</p>
<p><strong>缺点：</strong></p>
<ol>
<li>无法向父类构造函数传参；</li>
<li>共享父类实例的属性（若父类共有属性为引用类型，一个子类实例更改父类构造函数共有属性时会导致继承的共有属性发生变化）</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">a.<span class="property">list</span>.<span class="title function_">push</span>(<span class="string">&#x27;rap&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">list</span>); <span class="comment">// [&#x27;坤&#x27;,&#x27;rap&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-32-2-构造函数继承"><a href="#1-32-2-构造函数继承" class="headerlink" title="1.32.2 构造函数继承"></a>1.32.2 构造函数继承</h3><p>实现方式：在子类构造函数中使用call或者apply劫持父类构造函数方法，并传入参数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name, id</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">printName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, id</span>)&#123;</span><br><span class="line">	<span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, id) <span class="comment">// Parent.apply(this, arguments);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;坤&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">child.<span class="title function_">printName</span>() 	<span class="comment">// 坤</span></span><br><span class="line">child.<span class="title function_">sayName</span>() 	<span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong>使用call或者apply改变子类函数的作用域，使this执行父类构造函数，子类因此可以继承父类共有属性</p>
<p>优点：可解决原型链继承 <strong>共享</strong> 的问题</p>
<p>缺点： 不可继承父类的原型方法，构造函数不可以被复用</p>
<h3 id="1-32-3-组合继承"><a href="#1-32-3-组合继承" class="headerlink" title="1.32.3 组合继承"></a>1.32.3 组合继承</h3><p><strong>原理：</strong>综合使用构造函数继承和原型链继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name, id</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = [<span class="string">&#x27;rap&#x27;</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">printName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, id</span>)&#123;</span><br><span class="line">	<span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, id);	<span class="comment">// Parent.apply(this, arguments);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;坤坤&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">child.<span class="title function_">printName</span>(); 	<span class="comment">// 坤坤</span></span><br><span class="line">child.<span class="title function_">sayName</span>() 	<span class="comment">// 坤坤</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">a.<span class="property">list</span>.<span class="title function_">push</span>(<span class="string">&#x27;篮球&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">list</span>); <span class="comment">// [&#x27;rap&#x27;]    </span></span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong>可继承父类原型上的属性，且可传参；每个新实例引入的构造函数是私有的</p>
<p><strong>缺点：</strong>会执行两次父类的构造函数，消耗较大内存，子类的构造函数会代替原型上的那个父类构造函数</p>
<h3 id="1-32-4-原型式继承"><a href="#1-32-4-原型式继承" class="headerlink" title="1.32.4 原型式继承"></a>1.32.4 原型式继承</h3><p><strong>原理：</strong>类似Object.create，用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象，结果是将子对象的     <code>__proto__</code> 指向父对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parent = &#123;</span><br><span class="line">	<span class="attr">name</span>: [<span class="string">&#x27;坤坤&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object</span>) &#123;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">	fn.<span class="property"><span class="keyword">prototype</span></span> = object</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child = <span class="title function_">copy</span>(parent)</span><br></pre></td></tr></table></figure>

<p><strong>缺点：</strong> 共享引用数据类型</p>
<h3 id="1-32-5-寄生式继承"><a href="#1-32-5-寄生式继承" class="headerlink" title="1.32.5 寄生式继承"></a>1.32.5 寄生式继承</h3><p><strong>原理：</strong>扩展原型式继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object</span>) &#123;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">	fn.<span class="property"><span class="keyword">prototype</span></span> = object</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> obj = <span class="title function_">copy</span>(obj);</span><br><span class="line">	obj.<span class="property">getNames</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">names</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">names</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong>可添加新的属性和方法</p>
<h3 id="1-32-6-寄生组合式继承"><a href="#1-32-6-寄生组合式继承" class="headerlink" title="1.32.6 寄生组合式继承"></a>1.32.6 寄生组合式继承</h3><p><strong>原理：</strong>改进组合继承，利用寄生式继承的思想继承原型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subClass, superClass</span>) &#123;</span><br><span class="line">	<span class="comment">// 复制一份父类的原型</span></span><br><span class="line">	<span class="keyword">let</span> p = <span class="title function_">copy</span>(superClass.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">	<span class="comment">// 修正构造函数</span></span><br><span class="line">	p.<span class="property">constructor</span> = subClass;</span><br><span class="line">	<span class="comment">// 设置子类原型</span></span><br><span class="line">	subClass.<span class="property"><span class="keyword">prototype</span></span> = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name, id</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">printName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, id</span>)&#123;</span><br><span class="line">	<span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, id);</span><br><span class="line"><span class="comment">// Parent.apply(this, arguments);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-32-7-ES6-class-extends"><a href="#1-32-7-ES6-class-extends" class="headerlink" title="1.32.7 ES6 class extends"></a>1.32.7 ES6 class extends</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="variable language_">super</span>();</span><br><span class="line">    	<span class="variable language_">this</span>.<span class="property">b</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br></pre></td></tr></table></figure>

<h2 id="1-33-扩展运算符-…"><a href="#1-33-扩展运算符-…" class="headerlink" title="1.33 扩展运算符 …"></a>1.33 扩展运算符 …</h2><h3 id="1-33-1哪些类型能被扩展操作符"><a href="#1-33-1哪些类型能被扩展操作符" class="headerlink" title="1.33.1哪些类型能被扩展操作符?"></a>1.33.1哪些类型能被扩展操作符?</h3><p><strong>类型：</strong>数组、对象、字符串</p>
<ul>
<li><p>复杂数据类型都可以，当要转化为可迭代数据结构时可设置对象的迭代器对扩展运算符扩展出来的值进行操作。</p>
</li>
<li><p>基础数据只有string可以使用扩展运算符，number,boolean,null,undefined无效</p>
</li>
</ul>
<h3 id="1-33-2-场景"><a href="#1-33-2-场景" class="headerlink" title="1.33.2 场景"></a>1.33.2 场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(...[<span class="number">4</span>, <span class="number">38</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, b, c, d, e</span>) &#123; &#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, ...[<span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>, ...[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.往数组里push多个元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;子异&#x27;</span>, <span class="string">&#x27;坤坤&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;说&#x27;</span>, <span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">//[&#x27;子异&#x27;, &#x27;坤坤&#x27;,&#x27;说&#x27;, &#x27;唱&#x27;, &#x27;跳&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.替代函数的apply方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, b, c</span>) &#123; &#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.<span class="title function_">apply</span>(<span class="literal">null</span>, args); 	<span class="comment">//ES5 的写法</span></span><br><span class="line"><span class="title function_">f</span>(...args); 			<span class="comment">//ES6的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.求一个数组的最大数简化</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>]) <span class="comment">//ES5 的写法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>]) <span class="comment">//ES6 的写法，等同于Math.max(14, 3, 77)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.扩展运算符后面可以放表达式</span></span><br><span class="line"><span class="keyword">const</span> arr = [...(<span class="number">5</span> &gt; <span class="number">0</span> ? [<span class="string">&#x27;a&#x27;</span>] : []),<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.与解构赋值结合，用于生成数组</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = [...a1]; <span class="comment">//写法1</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1; <span class="comment">//写法2</span></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">//1</span></span><br><span class="line">rest <span class="comment">//[2, 3, 4, 5]</span></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">//undefined</span></span><br><span class="line">rest <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">&quot;foo&quot;</span>];</span><br><span class="line">first <span class="comment">//&quot;foo&quot;</span></span><br><span class="line">rest <span class="comment">//[]</span></span><br><span class="line"><span class="comment">//1234567891011121314151617</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3] <span class="comment">//[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="comment">//8.数组的克隆</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr1];</span><br><span class="line">arr1[<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[0, 1, 2]</span></span><br><span class="line"><span class="comment">/* 乍一看，arr2与arr1不共用引用地址，arr2不随着arr1变化，接着往下看 */</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, [<span class="number">1</span>,<span class="number">11</span>,<span class="number">111</span>], <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr1];</span><br><span class="line">arr1[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[0, [100,11,111], 2]</span></span><br></pre></td></tr></table></figure>

<h2 id="1-34-实现异步的方法"><a href="#1-34-实现异步的方法" class="headerlink" title="1.34 实现异步的方法"></a>1.34 实现异步的方法</h2><h3 id="1-34-1-回调函数"><a href="#1-34-1-回调函数" class="headerlink" title="1.34.1 回调函数"></a>1.34.1 回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(url, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="title function_">ajax</span>(url1, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">        <span class="title function_">ajax</span>(url2, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong>简单、容易理解和实现</p>
<p><strong>缺点：</strong>不利阅读和维护，耦合度高，不能使用try…catch捕获，不能直接 return</p>
<h3 id="1-34-2-promise"><a href="#1-34-2-promise" class="headerlink" title="1.34.2 promise"></a>1.34.2 promise</h3><p>本意是承诺，<strong>这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了</strong></p>
<p><strong>Promise的三种状态</strong></p>
<ul>
<li><p>Pending—-Promise对象实例创建时候的初始状态</p>
</li>
<li><p>Fulfilled—-可以理解为成功的状态</p>
</li>
<li><p>Rejected—-可以理解为失败的状态</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;reject&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)<span class="comment">//无效代码不会执行</span></span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(reason)<span class="comment">//reject</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当我们在构造 Promise 的时候，构造函数内部的代码是立即执行的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>promise的链式调用</p>
<ul>
<li><p>每次调用返回的都是一个新的Promise实例(这就是then可用链式调用的原因)</p>
</li>
<li><p>如果then中返回的是一个结果的话会把这个结果传递下一次then中的成功回调</p>
</li>
<li><p>如果then中出现异常,会走下一个then的失败回调</p>
</li>
<li><p>在 then中使用了return，那么 return 的值会被Promise.resolve() 包装(见例1，2)</p>
</li>
<li><p>then中可以不传递参数，如果不传递会透到下一个then中(见例3)</p>
</li>
<li><p>catch 会捕获到没有捕获的异常</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> <span class="comment">//包装成 Promise.resolve(2)</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="number">3</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="title function_">ajax</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">ajax</span>(url1)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">ajax</span>(url2)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure>

<p>存在一个缺点：无法取消promise，错误需要通过回调函数捕获</p>
<h3 id="1-34-3-生成器generator-yield"><a href="#1-34-3-生成器generator-yield" class="headerlink" title="1.34.3 生成器generator/yield"></a>1.34.3 生成器generator/yield</h3><p><strong>特点：</strong>控制函数的执行</p>
<ul>
<li>Generator 函数是一个状态机，封装了多个内部状态</li>
<li>Generator 函数除了状态机，还是一个遍历器对象生成函数</li>
<li>可暂停函数, yield可暂停，next方法可启动，每次返回的是yield后的表达式结果</li>
<li>yield表达式本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>))      </span><br><span class="line">    <span class="keyword">let</span> z = <span class="keyword">yield</span> (y / <span class="number">5</span>)           </span><br><span class="line">    <span class="keyword">return</span> (x + y + z)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">foo</span>(<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) 		<span class="comment">// =&gt; &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>(<span class="number">20</span>))	<span class="comment">// =&gt; &#123;value: 8, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>(<span class="number">30</span>)) 	<span class="comment">// =&gt; &#123;value: 72, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决回调地狱</span></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">yield</span> <span class="title function_">ajax</span>(url, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">	<span class="keyword">yield</span> <span class="title function_">ajax</span>(url1, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">	<span class="keyword">yield</span> <span class="title function_">ajax</span>(url2, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">fetch</span>()</span><br><span class="line"><span class="keyword">let</span> result1 = it.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">let</span> result2 = it.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">let</span> result3 = it.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h3 id="1-34-3-async-await"><a href="#1-34-3-async-await" class="headerlink" title="1.34.3 async/await"></a>1.34.3 async/await</h3><p><strong>特点：</strong></p>
<ul>
<li>async/await是基于Promise实现的，它不能用于普通的回调函数</li>
<li>async/await与Promise一样，是非阻塞的</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;async&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()) <span class="comment">// -&gt; Promise &#123;&lt;resolved&gt;: &quot;async&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>类似generator调用方式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">ff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">ajax</span>(url1, <span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">ajax</span>(url2,<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">ajax</span>(url3,<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">ff</span>()</span><br></pre></td></tr></table></figure>

<p>模拟一个并发请求</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">readAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">read1</span>()</span><br><span class="line">	<span class="title function_">read2</span>()<span class="comment">//这个函数同步执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">read1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="keyword">await</span> <span class="title function_">ajax</span>(url1,<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">read2</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> r = <span class="keyword">await</span> <span class="title function_">ajax</span>(url2,<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">readAll</span>()</span><br></pre></td></tr></table></figure>

<h2 id="1-35-循环i-一次性定时器中输出什么，如何解决？"><a href="#1-35-循环i-一次性定时器中输出什么，如何解决？" class="headerlink" title="1.35 循环i 一次性定时器中输出什么，如何解决？"></a>1.35 循环i 一次性定时器中输出什么，如何解决？</h2><p>下段代码输出</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>期望输出0-9</p>
<p>结果输出 10个9，原因：setTimeout是异步的，而var 这个时候是全局变量，所以打印10个9</p>
<p>方法一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">	(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法四：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(i),<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>((<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(i))(),<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法五：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> i</span><br><span class="line">	&#125;<span class="keyword">catch</span>(i)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-36-为什么js是单线程"><a href="#1-36-为什么js是单线程" class="headerlink" title="1.36 为什么js是单线程"></a>1.36 为什么js是单线程</h2><p><strong>用途：</strong>js在创立之初主要是应用于用户与浏览器的交互，以及操作dom，这一特性决定了，只能是单线程，否则会带来复杂的同步问题。</p>
<p>​        例如： 如果js被设计了多线程，如果有一个线程要修改一个dom元素，另一个线程要删除这个dom，这时候就不能处理。避免这个问题，浏览器就设计了单线程，避免了这个麻烦</p>
<h2 id="1-37-死锁"><a href="#1-37-死锁" class="headerlink" title="1.37 死锁"></a>1.37 死锁</h2><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源而造成阻塞的现象，若无外力作用，它们都将无法继续执行</p>
<p><strong>产生原因：</strong></p>
<ul>
<li>竞争资源引起进程死锁</li>
<li>可剥夺和非剥夺资源</li>
<li>竞争非剥夺资源</li>
<li>竞争临时性资源</li>
<li>进程推进顺序不当</li>
</ul>
<p><strong>产生条件：</strong></p>
<ol>
<li><p>互斥条件：涉及的资源是非共享的</p>
<ul>
<li>涉及的资源是非共享的,一段时间内某资源只由一个进程占用,如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放</li>
</ul>
</li>
<li><p>不剥夺条件：不能强行剥夺进程拥有的资源</p>
<ul>
<li>进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放</li>
</ul>
</li>
<li><p>请求和保持条件：进程在等待一新资源时继续占有已分配的资源</p>
<ul>
<li>指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放 环路等待条件：存在一种进程的循环链，链中的每一个进程已获得的资源同时被链中的下一个进程所请求 在发生死锁时，必然存在一个进程——资源的环形链</li>
</ul>
</li>
</ol>
<p>解决办法</p>
<p>只要打破四个必要条件中的一个就能有效防止死锁的发生</p>
<h2 id="1-38-暂时性死区"><a href="#1-38-暂时性死区" class="headerlink" title="1.38 暂时性死区"></a>1.38 暂时性死区</h2><p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</p>
<p>let 、const具有暂时性死区</p>
<p>var 不具有暂时性死区</p>
<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="1-1-cookie-sessionStorage-localStorage-区别"><a href="#1-1-cookie-sessionStorage-localStorage-区别" class="headerlink" title="1.1 cookie sessionStorage localStorage 区别"></a><strong>1.1 cookie sessionStorage localStorage</strong> <strong>区别</strong></h2><p><strong>共同点：</strong></p>
<p>都是保存在浏览器端、且同源的</p>
<p><strong>区别：</strong></p>
<ol>
<li><p> cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下 </p>
</li>
<li><p> 存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 </p>
</li>
<li><p> 数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭 </p>
</li>
<li><p> 作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的 </p>
</li>
<li><p> web Storage支持事件通知机制，可以将数据更新的通知发送给监听者</p>
</li>
<li><p> Storage的api接口使用更方便</p>
</li>
</ol>
<h2 id="1-2-如何写一个会过期的localStorage，说说想法"><a href="#1-2-如何写一个会过期的localStorage，说说想法" class="headerlink" title="1.2 如何写一个会过期的localStorage，说说想法"></a>1.2 如何写一个会过期的localStorage，说说想法</h2><p><strong>惰性删除 和 定时删除</strong></p>
<p><strong>惰性删除</strong></p>
<p>惰性删除是指，某个键值过期后，该键值不会被马上删除，而是等到下次被使用的时候，才会被检查到过期，此时才能得到删除。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lsc = (<span class="keyword">function</span> (<span class="params">self</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> prefix = <span class="string">&#x27;lsc_&#x27;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 增加一个键值对数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> val 值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> expires 过期时间，单位为秒</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    self.<span class="property">set</span> = <span class="keyword">function</span>(<span class="params">key, val, expires</span>) &#123;</span><br><span class="line">        key = prefix + key;</span><br><span class="line">        val = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&#x27;val&#x27;</span>: val, <span class="string">&#x27;expires&#x27;</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + expires * <span class="number">1000</span>&#125;);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, val);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 读取对应键的值数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@returns</span> &#123;<span class="type">null|*</span>&#125; 对应键的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    self.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        key = prefix + key;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	val = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (val.<span class="property">expires</span> &lt; <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()) &#123;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">return</span> val.<span class="property">val</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;(lsc || &#123;&#125;));</span><br></pre></td></tr></table></figure>

<p><strong>定时删除</strong></p>
<p>定时删除是指，每隔一段时间执行一次删除操作</p>
<ol>
<li>随机测试20个设置了过期时间的key。</li>
<li>删除所有发现的已过期的key。</li>
<li>若删除的key超过5个则重复<strong>步骤****1</strong>，直至重复500次。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lsc = (<span class="keyword">function</span> (<span class="params">self</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> prefix = <span class="string">&#x27;lsc_&#x27;</span></span><br><span class="line">	<span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    self.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">localStorage</span>);</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;^&#x27;</span> + prefix);</span><br><span class="line">        <span class="keyword">var</span> temp = [];</span><br><span class="line">        <span class="comment">//遍历所有localStorage中的所有key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//找出可过期缓存的key</span></span><br><span class="line">            <span class="keyword">if</span> (reg.<span class="title function_">test</span>(keys[i])) &#123;</span><br><span class="line">                temp.<span class="title function_">push</span>(keys[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list = temp;</span><br><span class="line">	&#125;;</span><br><span class="line">	self.<span class="title function_">init</span>();</span><br><span class="line">	self.<span class="property">check</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!list || list.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">var</span> checkCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (checkCount &lt; <span class="number">500</span>) &#123;</span><br><span class="line">    	<span class="keyword">var</span> expireCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 随机测试20个设置了过期时间的key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * list.<span class="property">length</span>);</span><br><span class="line">            <span class="keyword">var</span> key = list[index];</span><br><span class="line">            <span class="keyword">var</span> val = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(list[index]);</span><br><span class="line">            <span class="comment">// 从list中删除被惰性删除的key</span></span><br><span class="line">            <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">                list.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">                expireCount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            val = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(val);</span><br><span class="line">            <span class="comment">// 删除所有发现的已过期的key</span></span><br><span class="line">            <span class="keyword">if</span> (val.<span class="property">expires</span> &lt; <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()) &#123;</span><br><span class="line">                list.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">                <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">                expireCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若删除的key不超过5个则跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> (expireCount &lt;= <span class="number">5</span> || list.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		checkCount++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//每隔一秒执行一次定时删除</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(self.<span class="property">check</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;(lsc || &#123;&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="1-3-localStorage-能跨域吗"><a href="#1-3-localStorage-能跨域吗" class="headerlink" title="1.3 localStorage 能跨域吗"></a>1.3 <strong>localStorage</strong> <strong>能跨域吗</strong></h2><p>不能</p>
<p><strong>解决办法</strong></p>
<ul>
<li>通过postMessage来实现跨源通信</li>
<li>可以实现一个公共的iframe部署在某个域名中，作为共享域</li>
<li>将需要实现localStorage跨域通信的页面嵌入这个iframe</li>
</ul>
<h2 id="1-4-memory-cache-如何开启"><a href="#1-4-memory-cache-如何开启" class="headerlink" title="1.4 memory cache 如何开启"></a><strong>1.4 memory cache</strong> <strong>如何开启</strong></h2><p>memory cache 如何开启是一种比较特殊的缓存，他不受max-age、no-cache等配置的影响，即使我们不设置缓存，如果当前的内存空间比较充裕的话，一些资源还是会被缓存下来。但这种缓存是暂时的，一旦关闭了浏览器，这一部分用于缓存的内存空间就会被释放掉。如果真的不想使用缓存，可以设置no-store，这样，即便是内存缓存，也不会生效</p>
<h2 id="1-5-localstorage的注意哪些问题"><a href="#1-5-localstorage的注意哪些问题" class="headerlink" title="1.5 localstorage的注意哪些问题"></a>1.5 localstorage的注意哪些问题</h2><ol>
<li>兼容性问题</li>
<li>localStorage在浏览器的隐私模式下面是不可读取的</li>
<li>localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li>
<li>localStorage不能被爬虫抓取到</li>
</ol>
<h2 id="1-6-浏览器输入URL发生了什么"><a href="#1-6-浏览器输入URL发生了什么" class="headerlink" title="1.6 浏览器输入URL发生了什么"></a>1.6 浏览器输入URL发生了什么</h2><ol>
<li>URL 解析</li>
<li>DNS 查询</li>
<li>TCP 连接</li>
<li>处理请求</li>
<li>接受响应</li>
<li>渲染页面</li>
</ol>
<h2 id="1-7-浏览器是如何渲染页面的？"><a href="#1-7-浏览器是如何渲染页面的？" class="headerlink" title="1.7 浏览器是如何渲染页面的？"></a>1.7 浏览器是如何渲染页面的？</h2><p>不同浏览器内核渲染机制有所区别</p>
<ol>
<li>HTML 被 HTML 解析器解析成 DOM 树；</li>
<li>CSS 被 CSS 解析器解析成 CSSOM 树；</li>
<li>结合 DOM 树和 CSSOM 树，生成一棵渲染树(Render Tree)，这一过程称为 Attachment；</li>
<li>生成布局(flow)，浏览器在屏幕上“画”出渲染树中的所有节点；</li>
<li>将布局绘制(paint)在屏幕上，显示出整个页面。</li>
</ol>
<p>webkit</p>
<p><img data-lazy-src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20230810145750627.png" alt="image-20230810145750627"></p>
<p>Gecko</p>
<p><img data-lazy-src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20230810145831120.png" alt="image-20230810145831120"></p>
<h2 id="1-8-重绘、重排"><a href="#1-8-重绘、重排" class="headerlink" title="1.8 重绘、重排"></a>1.8 重绘、重排</h2><p><strong>概念</strong></p>
<ol>
<li>重排(Reflow)：当渲染树的一部分必须更新并且节点的尺寸发生了变化，浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树</li>
<li>重绘(Repaint)：是在一个元素的外观被改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如改变某个元素的背景色、文字颜色、边框颜色等等</li>
</ol>
<p><strong>区别：</strong></p>
<p>重绘不一定需要重排（比如颜色的改变），重排必然导致重绘（比如改变网页位置）</p>
<p><strong>引发重排</strong></p>
<ol>
<li>添加、删除可见的dom</li>
<li>元素的位置改变</li>
<li>元素的尺寸改变(外边距、内边距、边框厚度、宽高、等几何属性)</li>
<li>页面渲染初始化</li>
<li>浏览器窗口尺寸改变</li>
<li>获取某些属性。当获取一些属性时，浏览器为取得正确的值也会触发重排,它会导致队列刷新，这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存</li>
</ol>
<p><strong>优化方案</strong></p>
<p>浏览器会维护1个队列，把所有会引起重排，重绘的操作放入这个队列，等队列中的操作到一定数量或者到了一定时间间隔，浏览器就会flush队列，进行一批处理，这样多次重排，重绘变成一次重排重绘</p>
<p>减少 reflow/repaint：</p>
<ol>
<li><p>不要一条一条地修改 DOM 的样式。可以先定义好 css 的 class，然后修改 DOM 的className。</p>
</li>
<li><p>不要把 DOM 结点的属性值放在一个循环里当成循环里的变量。</p>
</li>
<li><p>为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是不会reflow 的。</p>
</li>
<li><p>千万不要使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。(table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。)</p>
</li>
<li><p>不要在布局信息改变的时候做查询（会导致渲染队列强制刷新）</p>
</li>
</ol>
<h2 id="1-9-事件循环（Event-loop）"><a href="#1-9-事件循环（Event-loop）" class="headerlink" title="1.9 事件循环（Event loop）"></a>1.9 事件循环（Event loop）</h2><p>主线程从”任务队列”中读取执行事件，这个过程是循环不断的，这个机制被称为事件循环</p>
<p><strong>JavaScript 的事件分两种</strong></p>
<ol>
<li>宏任务：包括整体代码 script，setTimeout，setInterval</li>
<li>微任务：Promise.then(非 new Promise)，process.nextTick(node 中)</li>
</ol>
<p><strong>具体执行：</strong></p>
<p>事件的执行顺序——先执行宏任务，然后执行微任务，任务有同步的任务和异步的任务，同步的进入主线程，异步的进入 Event Table 并注册函数，异步事件完成后，会将回调函数放在队列中，如果还有异步的宏任务，那么就会进行循环执行上述的操作</p>
<p>主 线程会不断从任务队列中按顺序取任务执行，每执行完一个任务都会检查microtask队列是否为空（执行完一个 任务的具体标志是函数执行栈为空），如果不为空则会一次性执行完所有microtask。然后再进入下一个循环去 任务队列中取下一个任务执行</p>
<p><strong>详细步骤</strong>：</p>
<ol>
<li><p>选择当前要执行的宏任务队列，选择一个最先进入任务队列的宏任务，如果没有宏任务可以选择，则会 跳转至microtask的执行步骤。</p>
</li>
<li><p>将事件循环的当前运行宏任务设置为已选择的宏任务。</p>
</li>
<li><p>运行宏任务。</p>
</li>
<li><p>将事件循环的当前运行任务设置为null。</p>
</li>
<li><p>将运行完的宏任务从宏任务队列中移除。</p>
</li>
<li><p>microtasks步骤：进入microtask检查点。</p>
</li>
<li><p>更新界面渲染。</p>
</li>
<li><p>返回第一步。</p>
</li>
</ol>
<p><strong>执行进入microtask检查的的具体步骤如下:</strong></p>
<ol>
<li>设置进入microtask检查点的标志为true。</li>
<li>当事件循环的微任务队列不为空时：选择一个最先进入microtask队列的microtask；设置事</li>
</ol>
<p>件循环的当 前运行任务为已选择的microtask；运行microtask；设置事件循环的当前运行任务</p>
<p>为null；将运行结束 的microtask从microtask队列中移除。</p>
<ol start="3">
<li>对于相应事件循环的每个环境设置对象（environment settings object）,通知它们哪些</li>
</ol>
<p>promise为 rejected。</p>
<ol start="4">
<li>清理indexedDB的事务。</li>
<li>设置进入microtask检查点的标志为false。</li>
</ol>
<p><strong>注意</strong></p>
<p>当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件,然后再去宏任务队列中取出一个事件。同一次事件循环中,微任务永远在宏任务之前执行</p>
<h2 id="1-10-let-a-1-挂载在哪里？"><a href="#1-10-let-a-1-挂载在哪里？" class="headerlink" title="1.10 let a = 1 挂载在哪里？"></a>1.10 let a = 1 挂载在哪里？</h2><p>var a 挂载在window下。而let是挂载在 全局函数下面</p>
<h2 id="1-11-浏览器垃圾回收机制"><a href="#1-11-浏览器垃圾回收机制" class="headerlink" title="1.11 浏览器垃圾回收机制"></a>1.11 浏览器垃圾回收机制</h2><p>浏览器的 Javascript 具有自动垃圾回收机制(GC:Garbage Collecation),执行环境会负责管理代码执行过程中使用的内存</p>
<p><strong>原理：</strong></p>
<p>垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;hanzichi&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;hanzichi&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">fn1</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">fn2</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	首先定义了两个function，分别叫做fn1和fn2,当fn1被调用时，进入fn1的环境，会开辟一块内存存放对象&#123;name: &#x27;hanzichi&#x27;, age: 10&#125;，而当调用结束后，出了fn1的环境，那么该块内存会被js引擎中的垃圾回收器自动释放；在fn2被调用的过程中，返回的对象被全局变量b所指向，所以该块内存并不会被释放</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>问题</strong></p>
<p>到底哪个变量是没有用的？</p>
<p><strong>解决</strong></p>
<p>所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常</p>
<p>情况下有两种实现方式：<strong>标记清除</strong>和<strong>引用计数</strong>。引用计数不太常用，标记清除较为常用。</p>
<p><strong>标记清除</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">10</span> ; <span class="comment">//被标记 ，进入环境</span></span><br><span class="line">	<span class="keyword">var</span> b = <span class="number">20</span> ; <span class="comment">//被标记 ，进入环境</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">//执行完毕 之后 a、b又被标离开环境，被回收。</span></span><br></pre></td></tr></table></figure>

<p><strong>引用计数</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125; ; <span class="comment">//a的引用次数为0</span></span><br><span class="line"><span class="keyword">var</span> b = a ; <span class="comment">//a的引用次数加1，为1</span></span><br><span class="line"><span class="keyword">var</span> c =a; <span class="comment">//a的引用次数再加1，为2</span></span><br><span class="line"><span class="keyword">var</span> b =&#123;&#125;; <span class="comment">//a的引用次数减1，为1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); </span><br></pre></td></tr></table></figure>

<p><strong>GC****方案</strong></p>
<p>​    <strong>1.</strong> <strong>基础方案</strong></p>
<p>​    Javascript引擎基础GC方案是（simple GC）：mark and sweep（标记清除），即：</p>
<ol>
<li>遍历所有可访问的对象。</li>
<li>回收已不可访问的对象。</li>
</ol>
<p>​    <strong>2. GC的缺陷</strong></p>
<p>​    和其他语言一样，javascript的GC策略也无法避免一个问题：GC时，停止响应其他操作，这是为了安全考虑。而Javascript的GC在100ms甚至以上，对一般的应用还好，但对于JS游戏，动画对连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免GC造成的长时间停止响应。</p>
<p>​    <strong>3. GC优化策略</strong></p>
<ol>
<li><strong>分代回收</strong>（Generation GC） 这个和Java回收策略思想是一致的，也是V8所主要采用的。目的是通过区分“临时”与“持久”对象；多回收“临时对象”区（young generation），少回收“持久对象”区（tenured generation），减少每次需遍历的对象，从而减少每次GC的耗时</li>
</ol>
<p><img data-lazy-src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20230810163252320.png" alt="image-20230810163252320"></p>
<p>补充：对于tenured generation对象，有额外的开销：把它从young generation迁移到tenured generation，另外，如果被引用了，那引用的指向也需要修改。</p>
<ol start="2">
<li><strong>增量GC</strong> 这个方案的思想很简单，就是“每次处理一点，下次再处理一点，如此类推”</li>
</ol>
<p><img data-lazy-src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20230810163307127.png" alt="image-20230810163307127"></p>
<p>​        这种方案，虽然耗时短，但中断较多，带来了上下文切换频繁的问题。</p>
<p>​        因为每种方案都其适用场景和缺点，因此在实际应用中，会根据实际情况选择方案。</p>
<p>​        比如：低 (对象/s) 比率时，中断执行GC的频率，simple GC更低些；如果大量对象都是长期“存活”，则分代处理优势也不大。</p>
<h2 id="1-12-cookie"><a href="#1-12-cookie" class="headerlink" title="1.12 cookie"></a>1.12 cookie</h2><ol>
<li><strong>cookie是什么？</strong> </li>
</ol>
<ul>
<li><p>cookie 是存储于访问者计算机中的变量。每当一台计算机通过浏览器来访问某个页面时，那么就可以通过 JavaScript 来创建和读取 cookie。</p>
</li>
<li><p>实际上 cookie 是存于用户硬盘的一个文件，这个文件通常对应于一个域名，当浏览器再次访问这个域名时，便使这个cookie可用。因此，cookie可以跨越一个域名下的多个网页，但不能跨越多个域名使用。</p>
</li>
<li><p>不同浏览器对 cookie 的实现也不一样。即保存在一个浏览器中的 cookie 到另外一个浏览器是 不能获取的。</p>
</li>
</ul>
<ol start="2">
<li>怎么使用 cookie？</li>
</ol>
<p>语法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;name=value;expires=evalue; path=pvalue; domain=dvalue;secure;”</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>注意事项</strong></li>
</ol>
<ul>
<li>cookie可能被禁用。当用户非常注重个人隐私保护时，他很可能禁用浏览器的cookie功能</li>
<li>cookie是与浏览器相关的。这意味着即使访问的是同一个页面，不同浏览器之间所保存的cookie也是不能互相访问的</li>
<li>cookie可能被删除。因为每个cookie都是硬盘上的一个文件，因此很有可能被用户删除</li>
<li>cookie安全性不够高。所有的cookie都是以纯文本的形式记录于文件中，因此如果要保存用户名密码等信息时，最好事先经过加密处理</li>
<li>cookie 在保存时，只要后面保存的 name 相同，那么就会覆盖前面的 cookie，注意是完全覆盖，包括失效时间，pat</li>
</ul>
<ol start="4">
<li><strong>cookie禁用</strong></li>
</ol>
<p>sessionID通过cookie保存在客户端，如果将cookie禁用，必将对session的使用造成一定的影响</p>
<p>解决办法：url重写</p>
<h2 id="1-13-调试工具"><a href="#1-13-调试工具" class="headerlink" title="1.13 调试工具"></a>1.13 调试工具</h2><h3 id="a-谷歌浏览器"><a href="#a-谷歌浏览器" class="headerlink" title="a.谷歌浏览器"></a>a.谷歌浏览器</h3><ol>
<li><p>Elements：可查看网页页面代码（修改只是当前使用有效），也可实时调试修改页面ccs代码样式。</p>
</li>
<li><p>console：记录开发者开发过程中的日志信息，也可在里面写js代码。一般页面运行时js报错都是可以在这里看到反馈和定位bug原因及其位置。</p>
</li>
<li><p>Sources：断点调试JS，可以查看程序代码执行的过程，断点调试对于每一个程序员来说可是很重要。</p>
</li>
<li><p>Network：从发起网页页面请求开始，分析HTTP请求后得到的各个请求资源信息（“小编有时候就利用这下载一些网站不给下载的在线视频，比如教学视频”）。</p>
</li>
<li><p>Timeline：记录并分析网站的生命周期所发生的各类事件，分析渲染js执行的每一个阶段。</p>
</li>
<li><p>Application：记录网站加载的各个资源信息。</p>
</li>
<li><p>Security：判断网页是否安全。</p>
</li>
<li><p>Audits：对当前网页的网络利用及网页性能进行检测，并给出一些优化建议。</p>
</li>
</ol>
<h3 id="b-其他"><a href="#b-其他" class="headerlink" title="b.其他"></a>b.其他</h3><p><strong>postman</strong></p>
<p>Postman 是调试接口的最佳工具之一，使用 Postman，我们可以调整请求，分析响应和调试问题</p>
<p><strong>CSSLint</strong></p>
<p>CSSLint 是一个用来帮你找出 CSS 代码中问题的工具，它可做基本的语法检查以及使用一套预设的规则 来检查代码中的问题，规则是可以扩展的</p>
<p><strong>Sentry</strong></p>
<p>Sentry就是来帮我们解决这个问题的，它是是一个实时事件日志记录和聚合平台。它专门用于监视错误 和提取执行适当的事后操作所需的所有信息, 而无需使用标准用户反馈循环的任何麻烦</p>
<p><strong>BrowserStack</strong></p>
<p>BrowserStack 是一款提供网站浏览器兼容性测试的在线云端测试工具，从而开发测试人员不必再准备 很多虚拟机或者手机模拟器</p>
<h1 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h1><h2 id="1-1-跨域"><a href="#1-1-跨域" class="headerlink" title="1.1 跨域"></a>1.1 跨域</h2><p><strong>跨域是什么？</strong></p>
<p>跨域（Cross-Origin）指的是在浏览器中，当一个请求的源（Origin）与目标资源的源不一致时，即发生跨域访问。在默认情况下，浏览器的同源策略（Same-Origin Policy）会阻止这种跨域访问。同源策略是为了保护用户的信息安全，防止恶意网站对其他网站的资源进行访问和操作。</p>
<p><strong>同源策略规定几个约束</strong></p>
<ol>
<li>协议相同</li>
<li>域名相同</li>
<li>端口号相同</li>
</ol>
<p><strong>同源策略限制内容有</strong></p>
<ul>
<li>cookie、localstorage、indexedDB 等</li>
<li>dom节点</li>
<li>ajax 请求</li>
</ul>
<p><strong>不受同源策略影响</strong></p>
<p><code><img data-lazy-src='' /></code></p>
<p><code><link href='' /></code></p>
<p><code><script src='' /></code></p>
<p>当存在跨域请求时，浏览器的安全策略也不同</p>
<ul>
<li><p>post、get、heade等请求，浏览器会自动发送一个跨域请求的预检请求（options）到目标资源的服务器，如果服务器返回的响应满足一定条件，浏览器会继续发送正式的请求，否则会跨域</p>
</li>
<li><p>put、delete、等，浏览器会先发送一个预检请求到目标资源的服务器服务器返回的响应满足条件后，浏览器发送正式请求。与简单请求不同的是，非简单请求血药确保服务器在响应中设置了跨域请求所允许的响应首部字段</p>
</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>jsonp</li>
</ul>
<p><strong>原理：</strong>利用 <script> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP 请求一定 需要对方的服务器做支持才可以</p>
<p><strong>优缺点：</strong>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题</p>
<p><strong>缺点：</strong>仅支持get方法 具有局限性, 不安全可能会遭受XSS攻击</p>
<p>实现流程</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;http://www.baidu.com?callback=fn&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">r</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>cors</li>
</ul>
<p>服务器端设置 Access-Control-Allow-Origin: 白名单/* </p>
<p>注意：<code>*</code>不能使用cookie</p>
<ul>
<li>postMessage</li>
<li>iframe</li>
</ul>
<h2 id="1-2-有什么方法可以保持前后端通信"><a href="#1-2-有什么方法可以保持前后端通信" class="headerlink" title="1.2 有什么方法可以保持前后端通信"></a>1.2 有什么方法可以保持前后端通信</h2><p>实现保持前后端实时通信的方式有以下几种</p>
<ul>
<li><p>WebSocket： IE10以上才支持，Chrome16, FireFox11,Safari7以及Opera12以上完全支持，移动端形势大</p>
</li>
<li><p>event-source: IE完全不支持（注意是任何版本都不支持），Edge76，Chrome6,Firefox6,Safari5和Opera以上支持， 移动端形势大好</p>
</li>
<li><p>AJAX轮询： 用于兼容低版本的浏览器</p>
</li>
<li><p>永久帧（ forever iframe）可用于兼容低版本的浏览器</p>
</li>
<li><p>flash socket 可用于兼容低版本的浏览器</p>
</li>
</ul>
<p><strong>优缺点</strong></p>
<ul>
<li><strong>websocket</strong></li>
</ul>
<p><strong>优点：</strong>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，可从HTTP升级而来，浏览器和服务器只需要一次握手，就可以进行持续的，双向的数据传输，因此能显著节约资源和带宽</p>
<p><strong>缺点：</strong></p>
<ol>
<li>兼容问题、</li>
<li>不支持断线重连，需要手写心跳连接的逻辑</li>
<li>通信机制相对复杂</li>
</ol>
<ul>
<li><strong>event-source</strong></li>
</ul>
<p><strong>优点：</strong></p>
<ol>
<li>只需一次请求，便可以stream的方式多次传送数据，节约资源和带宽 </li>
<li>相对WebSocket来说简单易用</li>
<li>内置断线重连功能(retry)</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>是单向的，只支持服务端-&gt;客户端的数据传送，客户端到服务端的通信仍然依靠AJAX，没有”一家人整整齐齐“的感觉</li>
<li>兼容性令人担忧，IE浏览器完全不支持</li>
</ol>
<ul>
<li><strong>ajax轮询</strong></li>
</ul>
<p><strong>优点：</strong>兼容性良好，对标低版本IE</p>
<p><strong>缺点：</strong>请求中有大半是无用的请求，浪费资源</p>
<ul>
<li><strong>Flash Socket</strong></li>
</ul>
<p><strong>优点：</strong> 兼容低版本浏览器</p>
<p><strong>缺点：</strong></p>
<ol>
<li>浏览器开启时flash需要用户确认</li>
<li>加载时间长，用户体验较差 </li>
<li>大多数移动端浏览器不支持flash，为重灾区</li>
</ol>
<ul>
<li><strong>永久帧</strong></li>
</ul>
<p><strong>缺点：</strong> iframe会产生进度条一直存在的问题，用户体验差</p>
<p><strong>优点：</strong>兼容低版本IE浏览器</p>
<p><strong>综上：</strong></p>
<p><strong>综合兼容性和用户体验的问题，我在项目中选用了WebSocket -&gt;server-sent-event -&gt; AJAX轮询这三种方式做从上到下的兼容</strong></p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="1-1-顺序存储结构和链式存储结构"><a href="#1-1-顺序存储结构和链式存储结构" class="headerlink" title="1.1 顺序存储结构和链式存储结构"></a>1.1 顺序存储结构和链式存储结构</h2><p><strong>优缺点</strong></p>
<ol>
<li>顺序存储时，相邻数据元素的存放地址也相邻（逻辑与物理统一）；要求内存中可用存储单元的地址必须是连续的。</li>
</ol>
<p>​        优点：存储密度大（＝1），存储空间利用率高</p>
<p>​        缺点：插入或删除元素时不方便</p>
<ol start="2">
<li>链式存储时，相邻数据元素可随意存放，但所占存储空间分两部分，一部分存放结点值，另一部分存放表示结点间关系的指针</li>
</ol>
<p>​        优点：插入或删除元素时很方便，使用灵活</p>
<p>​        缺点：存储密度小（&lt;1），存储空间利用率低</p>
<p><strong>场景</strong></p>
<ol>
<li>顺序表适宜于做查找这样的静态操作</li>
<li>链表宜于做插入、删除这样的动态操作</li>
<li>若线性表的长度变化不大，且其主要操作是查找，则采用顺序表</li>
<li>若线性表的长度变化较大，且其主要操作是插入、删除操作，则采用链表</li>
</ol>
<p><strong>顺序表与链表的比较</strong></p>
<ul>
<li><p><strong>基于空间的比较</strong></p>
<ul>
<li>存储分配的方式<ul>
<li>顺序表的存储空间是静态分配的</li>
<li>链表的存储空间是动态分配的</li>
</ul>
</li>
<li>存储密度 = 结点数据本身所占的存储量/结点结构所占的存储总量<ul>
<li>顺序表的存储密度 = 1</li>
<li>链表的存储密度 &lt; 1</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>基于时间的比较</strong></p>
<ul>
<li>存取方式<ul>
<li>顺序表可以随机存取，也可以顺序存取</li>
<li>链表是顺序存取的</li>
</ul>
</li>
<li>插入/删除时移动元素个数<ul>
<li>顺序表平均需要移动近一半元素</li>
<li>链表不需要移动元素，只需要修改指针</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="1-1-怎样理解-Vue-的单向数据流？"><a href="#1-1-怎样理解-Vue-的单向数据流？" class="headerlink" title="1.1 怎样理解 Vue 的单向数据流？"></a>1.1 怎样理解 Vue 的单向数据流？</h2><ol>
<li>数据从父级组件传递给子组件，只能单向绑定</li>
<li>子组件内部不能直接修改从父级传递过来的数据</li>
<li>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行，这样会防止从子组件意外改变父级组件的状态， 从而导致你的应用的数据流向难以理解。&#x20;</li>
<li>每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值，这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警 告&#x20;</li>
<li>子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件 修改</li>
</ol>
<h2 id="1-2-谈谈你对-Vue-生命周期的理解？"><a href="#1-2-谈谈你对-Vue-生命周期的理解？" class="headerlink" title="1.2 谈谈你对 Vue 生命周期的理解？"></a>1.2 谈谈你对 Vue 生命周期的理解？</h2><p><strong>（1）生命周期是什么？</strong></p>
<p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期</p>
<p><strong>（2）各个生命周期的作用</strong></p>
<table>
<thead>
<tr>
<th align="left">beforeCreate</th>
<th align="left">组件实例被创建之初，组件的属性生效之前</th>
</tr>
</thead>
<tbody><tr>
<td align="left">created</td>
<td align="left">组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td>
</tr>
<tr>
<td align="left">beforeMount</td>
<td align="left">在挂载开始之前被调用：相关的 render 函数首次被调用</td>
</tr>
<tr>
<td align="left">mounted</td>
<td align="left">el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td>
</tr>
<tr>
<td align="left">beforeUpdate</td>
<td align="left">组件数据更新之前调用，发生在虚拟 DOM 打补丁之前</td>
</tr>
<tr>
<td align="left">update</td>
<td align="left">组件数据更新之后</td>
</tr>
<tr>
<td align="left">activited</td>
<td align="left">keep-alive 专属，组件被激活时调用</td>
</tr>
<tr>
<td align="left">deadctivated</td>
<td align="left">keep-alive 专属，组件被销毁时调用</td>
</tr>
<tr>
<td align="left">beforeDestory</td>
<td align="left">组件销毁前调用</td>
</tr>
<tr>
<td align="left">destoryed</td>
<td align="left">组件销毁后调用</td>
</tr>
</tbody></table>
<h2 id="1-3-谈谈你对-keep-alive-的了解？"><a href="#1-3-谈谈你对-keep-alive-的了解？" class="headerlink" title="1.3 谈谈你对 keep-alive 的了解？"></a>1.3 谈谈你对 keep-alive 的了解？</h2><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</p>
<ul>
<li>一般结合路由和动态组件一起使用，用于缓存组件</li>
<li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高</li>
<li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated</li>
</ul>
<h2 id="1-4-组件中-data-为什么是一个函数？"><a href="#1-4-组件中-data-为什么是一个函数？" class="headerlink" title="1.4 组件中 data 为什么是一个函数？"></a>1.4 组件中 data 为什么是一个函数？</h2><p>因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响</p>
<p>如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题</p>
<h2 id="1-5-你对vue项目哪些优化？"><a href="#1-5-你对vue项目哪些优化？" class="headerlink" title="1.5 你对vue项目哪些优化？"></a>1.5 你对vue项目哪些优化？</h2><p><strong>（1）代码层面的优化</strong></p>
<ul>
<li>v-if 和 v-show 区分使用场景</li>
<li>computed 和 watch 区分使用场景</li>
<li>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li>
<li>长列表性能优化</li>
<li>事件的销毁</li>
<li>图片资源懒加载</li>
<li>路由懒加载</li>
<li>第三方插件的按需引入</li>
<li>优化无限列表性能</li>
<li>服务端渲染 SSR or 预渲染</li>
</ul>
<p><strong>（2）Webpack 层面的优化</strong></p>
<ul>
<li>Webpack 对图片进行压缩</li>
<li>减少 ES6 转为 ES5 的冗余代码</li>
<li>提取公共代码</li>
<li>模板预编译</li>
<li>提取组件的 CSS</li>
<li>优化 SourceMap</li>
<li>构建结果输出分析</li>
<li>Vue 项目的编译优化</li>
</ul>
<p><strong>（3）基础的 Web 技术的优化</strong></p>
<ul>
<li>开启 gzip 压缩</li>
<li>浏览器缓存</li>
<li>CDN 的使用</li>
<li>使用 Chrome Performance 查找性能瓶颈</li>
</ul>
<h2 id="1-6-vue中的key有什么作用？"><a href="#1-6-vue中的key有什么作用？" class="headerlink" title="1.6 vue中的key有什么作用？"></a>1.6 vue中的key有什么作用？</h2><p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>
<p>Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有4种比较方式：newStartIndex 和oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较</p>
<p>所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>
<h2 id="1-7-虚拟dom的优缺点"><a href="#1-7-虚拟dom的优缺点" class="headerlink" title="1.7 虚拟dom的优缺点"></a>1.7 虚拟dom的优缺点</h2><p><strong>优点：</strong></p>
<ul>
<li>保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</li>
<li>无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li>
<li>跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等</li>
</ul>
<p><strong>缺点：</strong></p>
<p>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化:比如动画等等</p>
<h2 id="1-8-虚拟dom实现原理？"><a href="#1-8-虚拟dom实现原理？" class="headerlink" title="1.8 虚拟dom实现原理？"></a>1.8 虚拟dom实现原理？</h2><p><strong>虚拟 DOM 的实现原理主要包括以下 3 部分：</strong></p>
<ul>
<li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li>
<li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li>
<li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树</li>
</ul>
<h2 id="1-9-Vue-是如何实现数据双向绑定的？"><a href="#1-9-Vue-是如何实现数据双向绑定的？" class="headerlink" title="1.9 Vue 是如何实现数据双向绑定的？"></a>1.9 Vue 是如何实现数据双向绑定的？</h2><p>Vue 数据双向绑定主要是指：数据变化更新视图</p>
<ul>
<li>输入框内容变化时，Data 中的数据同步变化。即 View =&gt; Data 的变化。</li>
<li>Data 中的数据变化时，文本节点的内容同步变化。即 Data =&gt; View 的变化</li>
</ul>
<p>Vue 主要通过以下 4 个步骤来实现数据双向绑定的：</p>
<ul>
<li>实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</li>
<li>实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新</li>
<li>实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函</li>
<li>实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理</li>
</ul>
<h2 id="1-20-Vue-router-有哪几种路由守卫"><a href="#1-20-Vue-router-有哪几种路由守卫" class="headerlink" title="1.20 Vue-router 有哪几种路由守卫?"></a>1.20 Vue-router 有哪几种路由守卫?</h2><ol>
<li>全局守卫：beforeEach</li>
<li>后置守卫：afterEach</li>
<li>全局解析守卫：beforeResolve</li>
<li>路由独享守卫：beforeEnter</li>
</ol>
<h2 id="1-21-Vue-router-的钩子函数都有哪些"><a href="#1-21-Vue-router-的钩子函数都有哪些" class="headerlink" title="1.21 Vue-router 的钩子函数都有哪些?"></a>1.21 Vue-router 的钩子函数都有哪些?</h2><p>关于 vue-router 中的钩子函数主要分为 3 类</p>
<ul>
<li>全局钩子函数要beforeEach 函数有三个参数,分别是&#x20;</li>
</ul>
<ol>
<li>to:router 即将进入的路由对象&#x20;</li>
<li>from:当前导航即将离开的路由</li>
<li>next:function,进行管道中的一个钩子，如果执行完了,则导航的状态就是 confirmed （确认的）否则为 false,终止导航</li>
</ol>
<ul>
<li><p>单独路由独享组件<br>beforeEnter</p>
</li>
<li><p>组件内钩子&#x20;</p>
<ol>
<li>beforeRouterEnter&#x20;</li>
<li>beforeRouterUpdate&#x20;</li>
<li>beforeRouterLeave</li>
</ol>
</li>
</ul>
<h2 id="1-22-vue-router-路由模式有几种？"><a href="#1-22-vue-router-路由模式有几种？" class="headerlink" title="1.22 vue-router 路由模式有几种？"></a>1.22 vue-router 路由模式有几种？</h2><p>vue-router 有 3 种路由模式：hash、history、abstract</p>
<ul>
<li>hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；</li>
<li>history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；</li>
<li>abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li>
</ul>
<h2 id="1-23-说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？"><a href="#1-23-说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗？" class="headerlink" title="1.23 说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？"></a>1.23 说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？</h2><p><strong>（1）hash 模式的实现原理</strong></p>
<ul>
<li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</li>
<li>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；</li>
<li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</li>
<li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）</li>
</ul>
<p><strong>（2）history 模式的实现原理</strong></p>
<ul>
<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>
<li>我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>
<li>history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）</li>
</ul>
<h2 id="1-24-vuex-包括几个模块"><a href="#1-24-vuex-包括几个模块" class="headerlink" title="1.24 vuex 包括几个模块"></a>1.24 vuex 包括几个模块</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p>
<p>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>
<p>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p>
<ul>
<li>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li>
<li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li>
<li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li>
<li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li>
<li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</li>
</ul>
<h2 id="1-25-Object-defineProperty-和-Proxy-的区别"><a href="#1-25-Object-defineProperty-和-Proxy-的区别" class="headerlink" title="1.25 Object.defineProperty 和 Proxy 的区别"></a>1.25 Object.defineProperty 和 Proxy 的区别</h2><p>Object.defineProperty 和 Proxy 的区别如下:</p>
<ol>
<li>Proxy 可以直接监听对象而非属性；&#x20;</li>
<li>Proxy 可以直接监听数组的变化；</li>
<li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等 是 Object.defineProperty 不具备的&#x20;</li>
<li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改</li>
<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准 的性能红利&#x20;</li>
<li>Object.defineProperty 兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题, 而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重 写</li>
</ol>
<h2 id="1-26-MVVM-和-MVC-区别是什么？哪些场景适合？"><a href="#1-26-MVVM-和-MVC-区别是什么？哪些场景适合？" class="headerlink" title="1.26 MVVM 和 MVC 区别是什么？哪些场景适合？"></a>1.26 MVVM 和 MVC 区别是什么？哪些场景适合？</h2><p><strong>1、基本定义</strong>&#x20;</p>
<p>MVVM 即 Model-View-ViewModel 的简写，即模型-视图-视图模型，模型（Model） 指的是后端传递的数据，视图(View)指的是所看到的页面，视图模型(ViewModel)是 mvvm 模式 的核心，它是连接 view 和 model 的桥梁。它有两个方向：&#x20;</p>
<ol>
<li>一是将模型（Model）转化成视图(View)，即将后端传递的数据转化成所看到 的页面，实现的方式是：数据绑定</li>
<li>二是将视图(View)转化成模型(Model)，即将所看到的页面转化成后端的数据。 实现的方式是：DOM 事件监听，这两个方向都实现的，我们称之为数据的双向绑定</li>
<li>MVC 基本定义 MVC 是 Model-View- Controller 的简写。即模型-视图-控制器。M 和 V 指的意思和 MVVM 中的 M 和 V 意思一样。C 即 Controller 指的是页面业务逻辑，使用 MVC 的目的就是将 M 和 V 的代码分离。MVC 是单向通信。也就是 View 跟 Model，必须通过 Controller 来承上启 下&#x20;</li>
</ol>
<p><strong>2、使用场景</strong></p>
<p>&#x20;主要就是 MVC 中 Controller 演变成 MVVM 中的 viewModel，MVVM 主要解决了 MVC中大量的 DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验，vue 数据驱动，通 过数据来显示视图层而不是节点操作， 场景：数据操作比较多的场景，需要大量操作 DOM 元 素时，采用 MVVM 的开发方式，会更加便捷，让开发者更多的精力放在数据的变化上，解放繁 琐的操作 DOM 元素</p>
<p><strong>3、两者之间的区别</strong></p>
<p>&#x20;MVC 和 MVVM 其实区别并不大，都是一种设计思想， MVC 和 MVVM 的区别并不是VM 完全取代了 C，只是在 MVC 的基础上增加了一层 VM，只不过是弱化了 C 的概念， ViewModel 存在目的在于抽离 Controller 中展示的业务逻辑，而不是替代 Controller，其它视图 操作业务等还是应该放在 Controller 中实现，也就是说 MVVM 实现的是业务逻辑组件的重用， 使开发更高效，结构更清晰，增加代码的复用性</p>
<h2 id="1-27-vue-中如何重置-data"><a href="#1-27-vue-中如何重置-data" class="headerlink" title="1.27 vue 中如何重置 data?"></a>1.27 vue 中如何重置 data?</h2><p>要初始化 data 中的数据，可以使用 Object.assign()方法，实现重置 data 中的数据，以下就是对该方法的详细介绍，以及如何使用该方法，重置 data 中的数据</p>
<ol>
<li>Object.assign()方法基本定义&#x20;</li>
<li>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目 标对象。它将返回目标对象。</li>
<li>用法： Object.assign(target, …sources)，第一个参数是目标对象，第二个参数 是源对象，就是将源对象属性复制到目标对象，返回目标对象</li>
</ol>
<h2 id="1-28-vue3-新特性有哪些？"><a href="#1-28-vue3-新特性有哪些？" class="headerlink" title="1.28 vue3 新特性有哪些？"></a>1.28 vue3 新特性有哪些？</h2><p>1、性能提升</p>
<ul>
<li>响应式性能提升，由原来的 Object.defineProperty 改为基于ES6的 Proxy ，使其速度更快，消除警告。</li>
<li>重写了 Vdom ，突破了 Vdom 的性能瓶颈。</li>
<li>进行模板编译优化。</li>
<li>更加高效的组件初始化</li>
</ul>
<p>2、更好的支持 typeScript</p>
<ul>
<li>有更好的类型推断，使得 Vue3 把 typeScript 支持得非常好</li>
</ul>
<p>3、新增Composition API</p>
<ul>
<li>Composition API 是 vue3 新增的功能，比 mixin 更强大。它可以把各个功能模块独立开来，提高代码逻辑的可复用性，同时代码压缩性更强</li>
</ul>
<p>4、新增组件</p>
<ul>
<li>Fragment 不再限制 template 只有一个根几点。</li>
<li>Teleport 传送门，允许我们将控制的内容传送到任意的 DOM 中。</li>
<li>Supense 等待异步组件时渲染一些额外的内容，让应用有更好的用户体验。</li>
</ul>
<p>5、Tree-shaking：支持摇树优化</p>
<ul>
<li>摇树优化后会将不需要的模块修剪掉，真正需要的模块打到包内。优化后的项目体积只有原来的一半，加载速度更快</li>
</ul>
<p>6、Custom Renderer API： 自定义渲染器</p>
<ul>
<li>实现 DOM 的方式进行 WebGL 编程</li>
</ul>
<h2 id="1-29-vue3-组合式API生命周期钩子函数有变化吗"><a href="#1-29-vue3-组合式API生命周期钩子函数有变化吗" class="headerlink" title="1.29 vue3 组合式API生命周期钩子函数有变化吗?"></a>1.29 vue3 组合式API生命周期钩子函数有变化吗?</h2><p>setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显示的定义它们。其他的钩子都可以编写到 setup 内</p>
<h2 id="1-30-watch-和-watchEffect-的区别？"><a href="#1-30-watch-和-watchEffect-的区别？" class="headerlink" title="1.30 watch 和 watchEffect 的区别？"></a>1.30 watch 和 watchEffect 的区别？</h2><p>watch 和 watchEffect 都是监听器，watchEffect 是一个副作用函数。它们之间的区别有：</p>
<ol>
<li>watch 需要传入监听的数据源，而 watchEffect 可以自动手机数据源作为依赖。</li>
<li>watch 可以访问倒改变之前和之后的值，watchEffect 只能获取改变后的值。</li>
<li>watch 运行的时候不会立即执行，值改变后才会执行，而 watchEffect 运行后可立即执行。这一点可以通过 watch 的配置项 immediate 改变。</li>
</ol>
<h2 id="1-31-vue中v-if和v-for优先级在vue2和vue3中的区别"><a href="#1-31-vue中v-if和v-for优先级在vue2和vue3中的区别" class="headerlink" title="1.31 vue中v-if和v-for优先级在vue2和vue3中的区别"></a>1.31 vue中v-if和v-for优先级在vue2和vue3中的区别</h2><p>实践中不管是vue2或者vue3都不应该把v-if和v-for放在一起使用。</p>
<ul>
<li>在 vue 2.x 中，在一个元素上同时使用 v-if 和 v-for 时， v-for 会优先作用。</li>
<li>在 vue 3.x 中， v-if 总是优先于 v-for 生效。</li>
<li>vue2中v-for的优先级是高于v-if的，放在一起，会先执行循环在判断条件，并且如果值渲染列表中一小部分元素，也得再每次重渲染的时候遍历整个列表，比较浪费资源。</li>
<li>vue3中v-if的优先级是高于v-for的，所以v-if执行时，它调用相应的变量如果不存在，就会导致异常</li>
</ul>
<h2 id="1-32-script-setup-是干啥的？"><a href="#1-32-script-setup-是干啥的？" class="headerlink" title="1.32 script setup 是干啥的？"></a>1.32 script setup 是干啥的？</h2><p>scrtpt setup 是 vue3 的语法糖，简化了组合式 API 的写法，并且运行性能更好。使用 script setup 语法糖的特点：</p>
<ul>
<li>属性和方法无需返回，可以直接使用。</li>
<li>引入组件的时候，会自动注册，无需通过 components 手动注册。</li>
<li>使用 defineProps 接收父组件传递的值。</li>
<li>useAttrs 获取属性，useSlots 获取插槽，defineEmits 获取自定义事件。</li>
<li>默认不会对外暴露任何属性，如果有需要可使用 defineExpose 。</li>
</ul>
<h2 id="1-33-vue常用的修饰符"><a href="#1-33-vue常用的修饰符" class="headerlink" title="1.33 vue常用的修饰符"></a>1.33 vue常用的修饰符</h2><ul>
<li>.stop：等同于 JavaScript 中的 event.stopPropagation() ，防止事件冒泡；</li>
<li>.prevent ：等同于 JavaScript 中的 event.preventDefault() ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；作用是阻止默认事件（例如a标签的跳转</li>
<li>.capture ：与事件冒泡的方向相反，事件捕获由外到内；</li>
<li>.self ：只会触发自己范围内的事件，不包含子元素；</li>
<li>.once ：只会触发一次。</li>
<li>.trim修饰符的作用是把v-model绑定的值的首尾空格给去掉。在实际开发中我们一般用于搜索框的内容修饰，过滤掉用户多输入前后空格导致内容查不出来的情况。</li>
<li>.left，.right，.middle这三个修饰符是鼠标的左中右按键触发的事件.</li>
</ul>
<h2 id="1-34-vue2-0-和-vue3-0-有什么区别？-双向绑定更新"><a href="#1-34-vue2-0-和-vue3-0-有什么区别？-双向绑定更新" class="headerlink" title="1.34 vue2.0 和 vue3.0 有什么区别？ 双向绑定更新"></a>1.34 vue2.0 和 vue3.0 有什么区别？ 双向绑定更新</h2><p>vue2 的双向数据绑定是利⽤ES5 的⼀个 API ，Object.defineProperty()对数据进⾏劫持 结合 发布订阅模式的⽅式来实现的。</p>
<p>vue3 中使⽤了 ES6 的 ProxyAPI 对数据代理，通过 reactive() 函数给每⼀个对象都包⼀层 Proxy，通过 Proxy 监听属性的变化，从⽽ 实现对数据的监控。</p>
<p>这⾥是相⽐于vue2版本，使⽤proxy的优势如下</p>
<ol>
<li><p>defineProperty只能监听某个属性，不能对全对象监听 可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</p>
</li>
<li><p>监听数组，不⽤再去单独的对数组做特异性操作,通过Proxy可以直接拦截所有对象类型数据的操作，完美⽀持对数组的监听。</p>
</li>
</ol>
<p><strong>获取props</strong></p>
<p>vue2在script代码块可以直接获取props，vue3通过setup指令传递</p>
<p><strong>API不同</strong></p>
<p>Vue2使⽤的是选项类型API（Options API），Vue3使⽤的是合成型API（Composition API）</p>
<p><strong>建立数据data</strong></p>
<p>vue2是把数据放入data中，vue3就需要使用一个新的setup()方法，此方法在组件初始化构造得时候触发。</p>
<p><strong>生命周期不同</strong></p>
<table>
<thead>
<tr>
<th>vue2</th>
<th>vue3</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>setup() 开始创建组件之前，创建的是data和method</td>
</tr>
<tr>
<td>created</td>
<td>setup()</td>
</tr>
<tr>
<td>beforeMount</td>
<td>onBeforeMount 组件挂载到节点上之前执行的函数</td>
</tr>
<tr>
<td>mounted</td>
<td>onMounted 组件挂载完成后执行的函数</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>onBeforeUpdate 组件更新之前执行的函数</td>
</tr>
<tr>
<td>updated</td>
<td>onUpdated 组件更新完成之后执行的函数</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>onBeforeUnmount 组件挂载到节点上之前执行的函数</td>
</tr>
<tr>
<td>destroyed</td>
<td>onUnmounted 组件卸载之前执行的函数</td>
</tr>
<tr>
<td>activated</td>
<td>onActivated 组件卸载完成后执行的函数</td>
</tr>
<tr>
<td>deactivated</td>
<td>onDeactivated</td>
</tr>
</tbody></table>
<p><strong>关于v-if和v-for的优先级:</strong></p>
<p>vue2 在一个元素上同时使用 v-if 和 v-for  v-for会优先执行</p>
<p>vue3 v-if 总会优先于  v-for生效</p>
<p><strong>vue2和vue3的diff算法</strong></p>
<p><strong>vue2</strong></p>
<p>vue2 diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点 不同的地方，最后用patch记录的消息去局部更新Dom。</p>
<p>vue2 diff算法会比较每一个vnode,而对于一些不参与更新的元素，进行比较是有 点消耗性能的。</p>
<p><strong>vue3</strong></p>
<p>vue3 diff算法在初始化的时候会给每个虚拟节点添加一个patchFlags，patchFlags 就是优化的标识。</p>
<p>只会比较patchFlags发生变化的vnode,进行更新视图，对于没有变化的元素做静 态标记，在渲染的时候直接复用。</p>
<h2 id="1-35-reactive与ref的区别？"><a href="#1-35-reactive与ref的区别？" class="headerlink" title="1.35 reactive与ref的区别？"></a>1.35 reactive与ref的区别？</h2><p>Vue3 中的 ref 和 reactive 是 Vue3 中用于数据管理的两种不同的响应式 API。</p>
<p>ref 用于创建一个包装简单值的响应式引用，例如一个数字、字符串或对象。当 ref 创建一个响应式引用时，它返回一个对象，该对象具有一个 value 属性，该属性指向实际值。当 ref 返回的对象中的 value 属性更改时，组件将自动重新渲染。</p>
<p>reactive 用于创建一个响应式对象，该对象可以包含多个属性和嵌套属性。当使用 reactive 创建响应式对象时，返回的对象是一个代理对象，该对象具有与原始对象相同的属性，并且任何对代理对象属性的更改都将触发组件的重新渲染。</p>
<h2 id="1-36-route-和-router-的区别？"><a href="#1-36-route-和-router-的区别？" class="headerlink" title="1.36 $route 和 $router 的区别？"></a>1.36 $route 和 $router 的区别？</h2><p>$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数</p>
<p>$router 是“路由实例”想要导航到不同URL 对象包括了路由的跳转方法，钩子函数等。</p>
<h2 id="1-37-v-on可以监听多个方法吗？"><a href="#1-37-v-on可以监听多个方法吗？" class="headerlink" title="1.37 v-on可以监听多个方法吗？"></a>1.37 v-on可以监听多个方法吗？</h2><p>可以一个元素绑定多个事件的两种写法，一个事件绑定多个函数的两种写法，修饰符的使用。</p>
<p><code>&lt;a&gt;</code>doSomething <code>&lt;/a&gt;</code></p>
<p>在method方法里面分别写两个事件；</p>
<p>&lt;button @click=”a(),b()”&gt;点我ab&lt;/button&gt;</p>
<h2 id="1-38-v-model的使用？"><a href="#1-38-v-model的使用？" class="headerlink" title="1.38 v-model的使用？"></a>1.38 v-model的使用？</h2><p>v-model实现双向绑定的语法糖，常用于表单与组件之间的数据双向绑定.</p>
<p>V-model的原理：</p>
<ul>
<li><p>v-bind绑定一个value属性</p>
</li>
<li><p>v-on指令给当前元素绑定input事件</p>
</li>
</ul>
<p>可看出v-model绑定在表单上时，v-model其实就是v-bind绑定value和v-on监听input事件的结合体</p>
<p>组件上的双向绑定（原理）</p>
<p>v-model绑定在组件上的时候做了以下步骤</p>
<ul>
<li>在父组件内给子组件标签添加 v-model ，其实就是给子组件绑定了 value 属性</li>
<li>子组件内使用 prop 创建 创建 value 属性可以拿到父组件传递下来的值，名字必须是 value。</li>
<li>子组件内部更改 value 的时候，必须通过 $emit 派发一个 input 事件，并携最新的值</li>
<li>v-model 会自动监听 input 事件，把接收到的最新的值同步赋值到 v-model 绑定的变量上</li>
</ul>
<h2 id="1-39-vue遇到的坑，如何解决的？"><a href="#1-39-vue遇到的坑，如何解决的？" class="headerlink" title="1.39 vue遇到的坑，如何解决的？"></a>1.39 vue遇到的坑，如何解决的？</h2><ul>
<li>用webpack打包后访问index.html出现资源加载404问题，解决：开发环境的static文件夹是基于根目录的，所以直接用‘/’ 。</li>
<li>vue中，假如，你引入某个样式，然后这个样式里面有引用到图片，如果你的文件中没有这个图片，这时候，即使你没有引用这个图片对应的类名，但是只要你有引入这个css文件，他找不到相应路径图片也会报错！！！</li>
<li>用for循环出来的列表，在设置列表中的元素的动态属性时，需要加bind属性“：”，不然动态属性设置不出来</li>
<li>在vue中的html中的img中的src不可以直接设置为变量，在data里面直接引路径，只能通过import的形式引入,值得注意的是，引用这个方式的时候src是变量需要加“：”，不然会报错！！！！！</li>
<li>在中使用v-for=”(item ,index) in list”进行循环时，需要注意加：:key=“index”,不然会出现警告！</li>
<li>父组件ajax异步更新数据，子组件props获取不到</li>
</ul>
<p>应用场景</p>
<p>当父组件  axjos  获取数据，子组件使用  props  接收数据时，执行  mounted  的时候  axjos  还没有返回数据，而且  mounted 只执行一次，这时   props  中接收的数据为空</p>
<p>解决方案：在对应组件中判断数据的长度</p>
<h2 id="1-40-说说vue中的diff算法？"><a href="#1-40-说说vue中的diff算法？" class="headerlink" title="1.40 说说vue中的diff算法？"></a>1.40 说说vue中的diff算法？</h2><p>diff算法 当data发生改变 会根据新的数据生成一个新的虚拟dom ，新的虚拟dom和旧的虚拟dom进行对比，这个对比的过程就是diff算法。</p>
<p>Vue2 是全量 Diff（当数据发生变化，它就会新生成一个DOM树，并和之前的DOM树进行比较，找到不同的节点然后更新。）；Vue3 是静态标记 + 非全量 Diff（Vue 3在创建虚拟DOM树的时候，会根据DOM中的内容会不会发生变化，添加一个静态标记。之后在与上次虚拟节点进行对比的时候，就只会对比这些带有静态标记的节点。）</p>
<p>使用最长递增子序列优化对比流程，可以最大程度的减少 DOM 的移动，达到最少的 DOM 操作</p>
<h2 id="1-41-vue中怎么设置全局变量和全局组件？"><a href="#1-41-vue中怎么设置全局变量和全局组件？" class="headerlink" title="1.41 vue中怎么设置全局变量和全局组件？"></a>1.41 vue中怎么设置全局变量和全局组件？</h2><p>在main.js中</p>
<p>app.config.globalProperties.$key = ‘’ //定义全局变量</p>
<p>import {getCurrentInstance} from ‘vue’;</p>
<p>  setup(){</p>
<p>    const { proxy } = getCurrentInstance();</p>
<p>    console.log(proxy.$key);</p>
<p>  }</p>
<h2 id="1-45-vue中给对象添加新属性时，界面不刷新怎么办"><a href="#1-45-vue中给对象添加新属性时，界面不刷新怎么办" class="headerlink" title="1.45 vue中给对象添加新属性时，界面不刷新怎么办?"></a>1.45 vue中给对象添加新属性时，界面不刷新怎么办?</h2><p>vue2的响应式原理使用的是对象代理去实现的,对象代理中有一个get和set方法,当我们访问对象的时候就会触发get方法,当我们对对象中的值进行修改时会触发set方法。但是当我们给对象添加一个新的属性时对象代理是检测不到的,所以就会出现直接给对象添加属性响应式不生效的问题。</p>
<p>所以在vue中可以使用this.$set(对象名,‘属性名’,属性值)的方法去给对象添加属性,或者使用Vue.set(对象名,‘属性名’,属性值)的方法进行添加,添加之后的属性就带有响应式了</p>
<h2 id="1-46-vuex中的辅助函数怎么使用？"><a href="#1-46-vuex中的辅助函数怎么使用？" class="headerlink" title="1.46 vuex中的辅助函数怎么使用？"></a>1.46 vuex中的辅助函数怎么使用？</h2><p>vuex的辅助函数有4个</p>
<ul>
<li>mapState 函数返回的是一个对象。通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。</li>
<li>mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性，因此你可以这样来使用他</li>
<li>mapMutations 辅助函数将组件中的 methods 映射为 store.commit，其原理就是将this.montify 映射为this.$store.commit(‘montify’)</li>
<li>mapActions在组件中使用 this.$store.dispatch(‘prodect’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用</li>
</ul>
<h2 id="1-47-刷新浏览器后，Vuex的数据是否存在？如何解决？"><a href="#1-47-刷新浏览器后，Vuex的数据是否存在？如何解决？" class="headerlink" title="1.47 刷新浏览器后，Vuex的数据是否存在？如何解决？"></a>1.47 刷新浏览器后，Vuex的数据是否存在？如何解决？</h2><p>原因：因为 store 里的数据是保存在运行内存中的，当页面刷新时，页面会重新加载vue实例，store里面的数据就会被重新赋值初始化。</p>
<p>localStorage 或者就是sessionStorage</p>
<p>下载持久化存储插件。比如使用：vuex-along 的实质也是将 vuex 中的数据存放到 localStorage 或者 sessionStroage 中，只不过这个存取过程组件会帮我们完成，我们只需要用vuex的读取数据方式操作就可以了</p>
<h2 id="x20-1-48-vue路由跳转传参的方式有哪些？"><a href="#x20-1-48-vue路由跳转传参的方式有哪些？" class="headerlink" title="&#x20;1.48 vue路由跳转传参的方式有哪些？"></a>&#x20;1.48 vue路由跳转传参的方式有哪些？</h2><p><strong>params传参(显示参数)</strong></p>
<ul>
<li>在url中会显示出传参的值，刷新页面不会失去拿到的参数，使用该方式传值的时候，需要子路由提前配置好参数</li>
</ul>
<p><strong>params传参(不显示参数)</strong></p>
<ul>
<li>在url中不会显示出传参的值，但刷新页面会失去拿到的参数，使用该方式 传值 的时候，需要子路由提前配置好name参数</li>
</ul>
<p><strong>query 传参</strong></p>
<ul>
<li>query 传过去的参数会拼接在地址栏中（?name=xx），刷新页面数据不会丢失，使用path和name都可以</li>
</ul>
<p><strong>VUE几种路由跳转几种方式的区别</strong></p>
<ul>
<li>this.$router.push：跳转到指定url路径，并想history栈中添加一个记录，点击后退会返回到上一个页面</li>
<li>this.$router.replace：跳转到指定url路径，但是history栈中不会有记录，点击返回会跳转到上上个页面 (就是直接替换了当前页面)</li>
<li>this.$router.go(n)：向前或者向后跳转n个页面，n可为正整数或负整数</li>
</ul>
<h2 id="1-50-单页面应用和多页面应用区别及优缺点？"><a href="#1-50-单页面应用和多页面应用区别及优缺点？" class="headerlink" title="1.50 单页面应用和多页面应用区别及优缺点？"></a>1.50 单页面应用和多页面应用区别及优缺点？</h2><p><strong>单页面</strong>：顾名思义，只有一个页面。一般是一个主页和多个路由页面组成。</p>
<p>优点：</p>
<ul>
<li>公共资源不重新加载，局部加载，服务器压力小</li>
<li>切换速度快，用户体验好</li>
<li>前后端分离</li>
</ul>
<p>缺点：</p>
<ul>
<li>不利于SEO（可以优化：比如路由懒加载等）</li>
<li>初次加载时耗时多</li>
<li>开发难度较大（相对多页面）</li>
</ul>
<p><strong>多页面</strong>（Multi Page Application——MPA）：有多个HTML页面，跳转的时候是从一个html页面跳到另一个页面。</p>
<p>优点：</p>
<ul>
<li>利于SEO。</li>
<li>更容易扩展。</li>
<li>更易数据分析。</li>
</ul>
<p>缺点：</p>
<ul>
<li>开发成本高。</li>
<li>服务器压力大。</li>
<li>用户体验相对较差。</li>
</ul>
<h2 id="1-51-EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢？"><a href="#1-51-EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢？" class="headerlink" title="1.51 EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢？"></a>1.51 EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢？</h2><ul>
<li><p>添加Bus.$off来关闭</p>
<p>beforeDestroy () {</p>
<p>bus.$off(‘get’, this.myhandle)</p>
<p>}</p>
</li>
<li><p>如果想要用bus 来进行页面组件之间的数据传递，需要注意亮点，组件emit事件应在beforeDestory声明周期内。其次，组件B内的$on记得要销毁。&#x20;</p>
</li>
</ul>
<h2 id="1-52-自定义指令详解"><a href="#1-52-自定义指令详解" class="headerlink" title="1.52 自定义指令详解"></a>1.52 自定义指令详解</h2><p>为什么需要自定义指令：因为vue是MVVM模式，只需要关注于数据和业务逻辑，不需要关注DOM的操作，但是有时候面对一些特殊的业务需求时，需要进行DOM的操作，这个时候就需要进行自定义指令。</p>
<p>自定义局部指令:在options api选项中的directives中设置。局部自定义指令是一个对象，对象的属性是自定义指令的名称，对象中属性的值是自定义指令的钩子函数对象</p>
<p>自定义全局指令:在app的directive方法。参数一（name）：自定义指令的名称。参数二（hooks）：自定义指令的钩子函数对象</p>
<h2 id="1-53-slot是什么？有什么作用？原理是什么？"><a href="#1-53-slot是什么？有什么作用？原理是什么？" class="headerlink" title="1.53 slot是什么？有什么作用？原理是什么？"></a>1.53 slot是什么？有什么作用？原理是什么？</h2><p>slot又名插槽，是Vue的内容分发机制，组件内部的模板引擎使用slot元素作为承载分发内容的出口。插槽slot是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。</p>
<p><strong>slot又分三类，默认插槽，具名插槽和作用域插槽。</strong></p>
<ul>
<li>默认插槽：又名匿名插槽，当slot没有指定name属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。</li>
<li>具名插槽：带有具体名字的插槽，也就是带有name属性的slot，一个组件可以出现多个具名插槽。</li>
<li>作用域插槽：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。</li>
</ul>
<p><strong>实现原理：</strong></p>
<p>当子组件vm实例化时，获取到父组件传入的slot标签的内容，存放在vm.$slot中，默认插槽为vm.$slot.default具名插槽为vm.$slot.xxx，xxx 为插槽名</p>
<p>当组件执行渲染函数时候，遇到slot标签，使用slot中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽</p>
<h2 id="1-54-nextTick的使用"><a href="#1-54-nextTick的使用" class="headerlink" title="1.54 $nextTick的使用"></a>1.54 $nextTick的使用</h2><p>用法：将回调延迟到下次DOM更新循环之后执行。在修改数据之后立即使用它，然后等待DOM更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p>
<p><strong>$nextTick() 的应用场景</strong></p>
<p>在vue的生命周期 created() 钩子函数中进行 dom 操作，一定要放在 $nextTick() 函数中执行。在 created() 钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的代码放进 nextTick() 的回调函数中。</p>
<p>mounted() 钩子函数，因为该钩子函数执行时，所有的 DOM 挂载和 渲染都已完成，此时在该钩子函数中进行任何 DOM 操作都不会有问题</p>
<p>在数据变化后要执行某个操作，而这个操作需要随数据改变而改变DOM结构时，这个操作都是需要放置 $nextTick() 的回调函数中。</p>
<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="1-1-虚拟dom和真实dom"><a href="#1-1-虚拟dom和真实dom" class="headerlink" title="1.1 虚拟dom和真实dom"></a>1.1 虚拟dom和真实dom</h2><p><strong>什么是虚拟dom？</strong></p>
<p>虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没有必要的 dom操作，从而 提高性能。</p>
<ol>
<li>用 JavaScript 对象结构表示 DOM 树的结构</li>
<li>用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。</li>
<li>用新的树和旧的树进行比较，记录两棵树差异把 2 所记录的差异应用到步骤 1 所构建的真正的DOM 树上，视图就更新了。</li>
</ol>
<p><strong>虚拟dom和real dom区别 性能差异</strong></p>
<p>减少DOM的操作：虚拟dom可以将多次操作合并为一次操作，减少DOM操作的次数</p>
<table>
<thead>
<tr>
<th><strong>Real DOM</strong></th>
<th><strong>Virtual DOM</strong></th>
</tr>
</thead>
<tbody><tr>
<td>更新缓慢</td>
<td>更新更快</td>
</tr>
<tr>
<td>可以直接更新 HTML</td>
<td>无法直接更新 HTML</td>
</tr>
<tr>
<td>如果元素更新，则创建新DOM</td>
<td>如果元素更新，则更新 JSX</td>
</tr>
<tr>
<td>DOM操作代价很高</td>
<td>DOM 操作非常简单</td>
</tr>
<tr>
<td>消耗的内存较多</td>
<td>很少的内存消耗</td>
</tr>
</tbody></table>
<h2 id="1-2-react组件间通信"><a href="#1-2-react组件间通信" class="headerlink" title="1.2 react组件间通信"></a>1.2 <strong>react组件间通信</strong></h2><ul>
<li><p>父组件向子组件通讯: 父组件可以向子组件通过传 props 的方式，向子组件进行通讯</p>
</li>
<li><p>子组件向父组件通讯: props+回调的方式,父组件向子组件传递props进行通讯，此props为作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数，传递到父组件的作用域中</p>
</li>
<li><p>兄弟组件通信: 找到这两个兄弟节点共同的父节点,结合上面两种方式由父节点转发信息进行通信</p>
</li>
<li><p>跨层级通信: Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言</p>
</li>
<li><p>发布订阅模式: 发布者发布事件，订阅者监听事件并做出反应,我们可以通过引入event模块进行通信</p>
</li>
<li><p>全局状态管理工具: 借助Redux或者Mobx等全局状态管理工具进行通信,这种工具会维护一个全局状态中心Store,并根据不同的事件产生新的状态</p>
</li>
</ul>
<h2 id="1-3-redux的原理"><a href="#1-3-redux的原理" class="headerlink" title="1.3 redux的原理"></a>1.3 <strong>redux的原理</strong></h2><p><strong>Redux</strong>：Redux 是当今最热门的前端开发库之一。它是 JavaScript 程序的可预测状态容器，用于整个应用的状态管理。使用 Redux 开发的应用易于测试，可以在不同环境中运行，并显示一致的行为</p>
<p><strong>数据流</strong></p>
<ol>
<li><p>首先，用户（通过View）发出Action，发出方式就用到了dispatch方法</p>
</li>
<li><p>然后，Store自动调用Reducer，并且传入两个参数：当前State和收到的Action，Reducer会返回新的State</p>
</li>
<li><p>State一旦有变化，Store就会调用监听函数，来更新View</p>
</li>
</ol>
<p><strong>Redux遵循的三个原则是什么</strong></p>
<ol>
<li><p>单一事实来源：整个应用的状态存储在单个 store 中的对象/状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。</p>
</li>
<li><p>状态是只读的：改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像state 是数据的最小表示一样，该操作是对数据更改的最小表示。</p>
</li>
<li><p>使用纯函数进行更改：为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。</p>
</li>
</ol>
<p><strong>单一事实来源怎么理解？</strong></p>
<p>Redux 使用 “Store” 将程序的整个状态存储在同一个地方。因此所有组件的状态都存储在 Store 中，并且它们从 Store 本身接收更新。单一状态树可以更容易地跟踪随时间的变化，并调试或检查程序。</p>
<p><strong>组件组成</strong></p>
<ol>
<li><strong>Action</strong> – 这是一个用来描述发生了什么事情的对象</li>
<li><strong>Reducer</strong> – 这是一个确定状态将如何变化的地方</li>
<li><strong>Store</strong> – 整个程序的状态/对象树保存在Store中</li>
<li><strong>View</strong> – 只显示 Store 提供的数据</li>
</ol>
<p><strong>如何在</strong> <strong>Redux</strong> <strong>中定义</strong> <strong>Action？</strong></p>
<p>React 中的 Action 必须具有 type 属性，该属性指示正在执行的 ACTION 的类型。必须将它们定义为字符串常量，并且还可以向其添加更多的属性。在 Redux 中，action 被名为 Action Creators 的函数所创建</p>
<p><strong>解释</strong> <strong>Reducer</strong> <strong>的作用</strong></p>
<p>Reducers 是纯函数，它规定应用程序的状态怎样因响应 ACTION 而改变。Reducers 通过接受先前的状态和 action 来工作，然后它返回一个新的状态。它根据操作的类型确定需要执行哪种更新，然后返回新的值。如果不需要完成任务，它会返回原来的状态。</p>
<p><strong>Store</strong> <strong>在</strong> <strong>Redux</strong> <strong>中的意义是什么？</strong></p>
<p>Store 是一个 JavaScript 对象，它可以保存程序的状态，并提供一些方法来访问状态、调度操作和注册侦听器。应用程序的整个状态/对象树保存在单一存储中。因此，Redux 非常简单且是可预测的。我们可以将中间件传递到 store 来处理数据，并记录改变存储状态的各种操作。所有操作都通过 reducer 返回一个新状态。</p>
<p><strong>Redux</strong> <strong>有哪些优点？</strong></p>
<ul>
<li>结果的可预测性 - 由于总是存在一个真实来源，即 store ，因此不存在如何将当前状态与动作和应用的其他部分同步的问题</li>
<li>可维护性 - 代码变得更容易维护，具有可预测的结果和严格的结构</li>
<li>服务器端渲染 - 你只需将服务器上创建的 store 传到客户端即可。这对初始渲染非常有用，并且可以优化应用性能，从而提供更好的用户体验</li>
<li>开发人员工具 - 从操作到状态更改，开发人员可以实时跟踪应用中发生的所有事情</li>
<li>社区和生态系统 - Redux 背后有一个巨大的社区，这使得它更加迷人。一个由才华横溢的人组成的大型社区为库的改进做出了贡献，并开发了各种应用</li>
<li>易于测试 - Redux 的代码主要是小巧、纯粹和独立的功能。这使代码可测试且独立</li>
<li>组织 - Redux 准确地说明了代码的组织方式，这使得代码在团队使用时更加一致和简单</li>
</ul>
<h2 id="1-4-React组件生命周期的阶段是什么？"><a href="#1-4-React组件生命周期的阶段是什么？" class="headerlink" title="1.4 React组件生命周期的阶段是什么？"></a>1.4 <strong>React组件生命周期的阶段是什么？</strong></h2><ol>
<li><p>初始渲染阶段：这是组件即将开始其生命之旅并进入 DOM 的阶段。</p>
</li>
<li><p>更新阶段：一旦组件被添加到 DOM，它只有在 prop 或状态发生变化时才可能更新和重新渲染。这些只发生在这个阶段。</p>
</li>
<li><p>卸载阶段：这是组件生命周期的最后阶段，组件被销毁并从 DOM 中删除。</p>
</li>
</ol>
<h2 id="1-5-详细解释React-组件的生命周期方法"><a href="#1-5-详细解释React-组件的生命周期方法" class="headerlink" title="1.5 详细解释React 组件的生命周期方法"></a>1.5 <strong>详细解释React 组件的生命周期方法</strong></h2><p><strong>挂载阶段:</strong></p>
<ul>
<li><p>constructor: 构造函数，最先被执行,我们通常在构造函数里初始化state对象或者给自定义方法绑定this</p>
</li>
<li><p>getDerivedStateFromProps: static getDerivedStateFromProps(nextProps, prevState) ,这是个静态方法,当我们接收到新的属性想去修改我们state，可以使用getDerivedStateFromProps</p>
</li>
<li><p>render: render函数是纯函数，只返回需要渲染的东西，不应该包含其它的业务逻辑,可以返回原生的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容</p>
</li>
<li><p>componentDidMount: 组件装载之后调用，此时我们可以获取到DOM节点并操作，比如对canvas，svg的操作，服务器请求，订阅都可以写在这个里面，但是记得在componentWillUnmount中取消订阅</p>
</li>
</ul>
<p><strong>更新阶段:</strong></p>
<ul>
<li>getDerivedStateFromProps: 此方法在更新个挂载阶段都可能会调用</li>
<li>shouldComponentUpdate: shouldComponentUpdate(nextProps, nextState) ,有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回一个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利用此生命周期来优化React程序性能</li>
<li>render: 更新阶段也会触发此生命周期</li>
<li>getSnapshotBeforeUpdate: getSnapshotBeforeUpdate(prevProps, prevState) ,这个方法在render之后，componentDidUpdate之前调用，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有一个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此生命周期必须与componentDidUpdate搭配使用</li>
<li>componentDidUpdate: componentDidUpdate(prevProps, prevState, snapshot) ,该方法在getSnapshotBeforeUpdate方法之后被调用，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要用到 DOM 元素的状态，则将对比或计算的过程迁移至getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统一触发回调或更新状态</li>
</ul>
<p><strong>卸载阶段:</strong></p>
<ul>
<li>componentWillUnmount: 当我们的组件被卸载或者销毁了就会调用，我们可以在这个函数里去清除一些定时器，取消网络请求，清理无效的DOM元素等垃圾清理工作</li>
</ul>
<p><strong>扩展：</strong></p>
<p>React 16之后有三个生命周期被废弃(但并未删除)</p>
<ul>
<li><p>componentWillMount</p>
</li>
<li><p>componentWillReceiveProps</p>
</li>
<li><p>componentWillUpdate</p>
</li>
</ul>
<p>官方计划在17版本完全删除这三个函数，只保留UNSAVE_前缀的三个函数，目的是为了向下兼容，但是对于开发者而言应该尽量避免使用他们，而是使用新增的生命周期函数替代它们</p>
<h2 id="1-6-router"><a href="#1-6-router" class="headerlink" title="1.6 router"></a>1.6 router</h2><ol>
<li>什么是React 路由？</li>
</ol>
<p>React 路由是一个构建在 React 之上的强大的路由库，它有助于向应用程序添加新的屏幕和流。这使 URL 与网页上显示的数据保持同步。它负责维护标准化的结构和行为，并用于开发单页 Web 应用。 React 路由有一个简单的API。</p>
<ol start="2">
<li>为什么需要 React 中的路由？</li>
</ol>
<p>Router 用于定义多个路由，当用户定义特定的 URL 时，如果此 URL 与 Router 内定义的任何 “路</p>
<p>由” 的路径匹配，则用户将重定向到该特定路由。所以基本上我们需要在自己的应用中添加一个</p>
<p>Router 库，允许创建多个路由，每个路由都会向我们提供一个独特的视图</p>
<ol start="3">
<li>为什么React Router v4中使用 switch 关键字 ？</li>
</ol>
<p>虽然 <div> 用于封装 Router 中的多个路由，当你想要仅显示要在多个定义的路线中呈现的单个路</p>
<p>线时，可以使用 “switch” 关键字。使用时， <switch> 标记会按顺序将已定义的 URL 与已定义的</p>
<p>路由进行匹配。找到第一个匹配项后，它将渲染指定的路径。从而绕过其它路线。</p>
<ol start="4">
<li>列出 React Router 的优点</li>
</ol>
<p>​    4.1 就像 React 基于组件一样，在 React Router v4 中，API 是 ‘All About Components’。可以将Router 可视化为单个根组件（），其中我们将特定的子路由（）包起来。</p>
<p>​    4.2 无需手动设置历史值：在 React Router v4 中，我们要做的就是将路由包装在 组件中。</p>
<p>​    4.3 包是分开的：共有三个包，分别用于 Web、Native 和 Core。这使我们应用更加紧凑。基于类似的编码风格很容易进行切换。</p>
<h2 id="1-7-React-的-refs-有什么了解？"><a href="#1-7-React-的-refs-有什么了解？" class="headerlink" title="1.7 React 的 refs 有什么了解？"></a>1.7 React <strong>的</strong> <strong>refs</strong> 有什么了解？</h2><p>Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render() 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class ReferenceDemo extends React.Component&#123;</span><br><span class="line">    display() &#123;</span><br><span class="line">        const name = this.inputDemo.value;</span><br><span class="line">        document.getElementById(&#x27;disp&#x27;).innerHTML = name;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            Name: &lt;input type=&quot;text&quot; ref=&#123;input =&gt; this.inputDemo = input&#125; /&gt;</span><br><span class="line">            &lt;button name=&quot;Click&quot; onClick=&#123;this.display&#125;&gt;Click&lt;/button&gt;</span><br><span class="line">            &lt;h2&gt;Hello &lt;span id=&quot;disp&quot;&gt;&lt;/span&gt; !!!&lt;/h2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-8-列出一些应该使用-Refs-的情况"><a href="#1-8-列出一些应该使用-Refs-的情况" class="headerlink" title="1.8 列出一些应该使用 Refs 的情况"></a>1.8 列出一些应该使用 Refs 的情况</h2><p>React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。</p>
<p>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用event.preventDefault</p>
<p><img data-lazy-src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20230810214434062.png" alt="image-20230810214434062"></p>
<h2 id="1-9-redux-saga和mobx的比较"><a href="#1-9-redux-saga和mobx的比较" class="headerlink" title="1.9 redux-saga和mobx的比较"></a>1.9 redux-saga和mobx的比较</h2><ol>
<li><strong>状态管理</strong></li>
</ol>
<ul>
<li><p>redux-sage 是 redux 的一个异步处理的中间件。</p>
</li>
<li><p>mobx 是数据管理库，和 redux 一样。</p>
</li>
</ul>
<ol start="2">
<li><strong>设计思想</strong></li>
</ol>
<ul>
<li><p>redux-sage 属于 flux 体系， 函数式编程思想。</p>
</li>
<li><p>mobx 不属于 flux 体系，面向对象编程和响应式编程。</p>
</li>
</ul>
<ol start="3">
<li><strong>主要特点</strong></li>
</ol>
<ul>
<li><p>redux-sage 因为是中间件，更关注异步处理的，通过 Generator 函数来将异步变为同步，使代码可读性高，结构清晰。action 也不是 action creator 而是 pure action，在 Generator 函数中通过 call 或者 put 方法直接声明式调用，并自带一些方法，如 takeEvery，takeLast，race等，控制多个异步操作，让多个异步更简单。</p>
</li>
<li><p>mobx 是更简单更方便更灵活的处理数据。 Store 是包含了 state 和 action。state 包装成一个可被观察的对象， action 可以直接修改 state，之后通过 Computed values 将依赖 state 的计算属性更新 ，之后触发 Reactions 响应依赖 state 的变更，输出相应的副作用 ，但不生成新的 state。</p>
</li>
</ul>
<ol start="4">
<li><strong>数据可变性</strong></li>
</ol>
<ul>
<li><p>redux-sage 强调 state 不可变，不能直接操作 state，通过 action 和 reducer 在原来的 state 的基础上返回一个新的 state 达到改变 state 的目的。</p>
</li>
<li><p>mobx 直接在方法中更改 state，同时所有使用的 state 都发生变化，不生成新的 state。</p>
</li>
</ul>
<ol start="5">
<li><strong>写法难易度</strong></li>
</ol>
<ul>
<li><p>redux-sage 比 redux 在 action 和 reducer 上要简单一些。需要用 dispatch 触发 state 的改变，需要 mapStateToProps 订阅 state。</p>
</li>
<li><p>mobx 在非严格模式下不用 action 和 reducer，在严格模式下需要在 action 中修改 state，并且自动触发相关依赖的更新。</p>
</li>
</ul>
<ol start="6">
<li><strong>使用场景</strong></li>
</ol>
<ul>
<li><p>redux-sage 很好的解决了 redux 关于异步处理时的复杂度和代码冗余的问题，数据流向比较好追踪。但是 redux 的学习成本比 较高，代码比较冗余，不是特别需要状态管理，最好用别的方式代替。</p>
</li>
<li><p>mobx 学习成本低，能快速上手，代码比较简洁。但是可能因为代码编写的原因和数据更新时相对黑盒，导致数据流向不利于追踪。</p>
</li>
</ul>
<h2 id="1-10-简述一下-React-的源码实现"><a href="#1-10-简述一下-React-的源码实现" class="headerlink" title="1.10 简述一下 React 的源码实现"></a>1.10 简述一下 <strong>React</strong> 的源码实现</h2><ol>
<li><p>React 的实现主要分为 Component 和 Element ；</p>
</li>
<li><p>Component 属于 React 实例，在创建实例的过程中会在实例中注册 state 和 props 属性，还会依次调用内置的生命周期函数；</p>
</li>
<li><p>Component 中有一个 render 函数， render 函数要求返回一个 Element 对象（或 null ）；</p>
</li>
<li><p>Element 对象分为原生 Element 对象和组件式对象，原生 Element + 组件式对象会被一起解析成虚拟 DOM 树，并且内部使用的 state 和 props 也以 AST 的形式注入到这棵虚拟 DOM 树之中；</p>
</li>
<li><p>在渲染虚拟 DOM 树的前后，会触发 React Component 的一些生命周期钩子函数，比如componentWillMount 和 componentDidMount ，在虚拟 DOM 树解析完成后将被渲染成真实DOM 树；</p>
</li>
<li><p>调用 setState 时，会调用更新函数更新 Component 的 state ，并且触发内部的一个updater ，调用 render 生成新的虚拟 DOM 树，利用 diff 算法与旧的虚拟 DOM 树进行比对，比对以后利用最优的方案进行 DOM 节点的更新，这也是 React 单向数据流的原理（与 Vue 的MVVM 不同之处）。</p>
</li>
</ol>
<h2 id="1-11-setState到底是异步还是同步"><a href="#1-11-setState到底是异步还是同步" class="headerlink" title="1.11 setState到底是异步还是同步"></a>1.11 setState到底是异步还是同步</h2><p>有时表现出异步,有时表现出同步</p>
<ol>
<li><p>setState 只在合成事件和钩子函数中是“异步”的，在原生事件和 setTimeout 中都是同步的。</p>
</li>
<li><p>setState 的异步并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback)中的 callback 拿到更新后的结果。</p>
</li>
<li><p>setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。</p>
</li>
</ol>
<h2 id="1-12-redux异步中间件之间的优劣"><a href="#1-12-redux异步中间件之间的优劣" class="headerlink" title="1.12  redux异步中间件之间的优劣?"></a>1.12  redux异步中间件之间的优劣?</h2><p><strong>redux-thunk优点:</strong></p>
<ul>
<li><p>体积小: redux-thunk的实现方式很简单,只有不到20行代码</p>
</li>
<li><p>使用简单: redux-thunk没有引入像redux-saga或者redux-observable额外的范式,上手简单</p>
</li>
</ul>
<p><strong>redux-thunk缺陷:</strong></p>
<ul>
<li><p>样板代码过多: 与redux本身一样,通常一个请求需要大量的代码,而且很多都是重复性质的</p>
</li>
<li><p>耦合严重: 异步操作与redux的action偶合在一起,不方便管理</p>
</li>
<li><p>功能孱弱: 有一些实际开发中常用的功能需要自己进行封装</p>
</li>
</ul>
<p><strong>redux-saga优点:</strong></p>
<ul>
<li><p>异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中</p>
</li>
<li><p>action摆脱thunk function: dispatch 的参数依然是一个纯粹的 action (FSA)，而不是充满 “黑魔法” thunk function</p>
</li>
<li><p>异常处理: 受益于 generator function 的 saga 实现，代码异常/请求失败 都可以直接通过try/catch 语法直接捕获处理</p>
</li>
<li><p>功能强大: redux-saga提供了大量的Saga 辅助函数和Effect 创建器供开发者使用,开发者无须封装或者简单封装即可使用</p>
</li>
<li><p>灵活: redux-saga可以将多个Saga可以串行/并行组合起来,形成一个非常实用的异步flow</p>
</li>
<li><p>易测试，提供了各种case的测试方案，包括mock task，分支覆盖等等</p>
</li>
</ul>
<p><strong>redux-saga缺陷:</strong></p>
<ul>
<li><p>额外的学习成本: redux-saga不仅在使用难以理解的 generator function,而且有数十个API,学习成本远超redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与redux-observable不同,redux-observable虽然也有额外学习成本但是背后是rxjs和一整套思想</p>
</li>
<li><p>体积庞大: 体积略大,代码近2000行，min版25KB左右</p>
</li>
<li><p>功能过剩: 实际上并发控制等功能很难用到,但是我们依然需要引入这些代码</p>
</li>
<li><p>ts支持不友好: yield无法返回TS类型</p>
</li>
</ul>
<p><strong>redux-observable优点:</strong></p>
<ul>
<li><p>功能最强: 由于背靠rxjs这个强大的响应式编程的库,借助rxjs的操作符,你可以几乎做任何你能想到的异步处理</p>
</li>
<li><p>背靠rxjs: 由于有rxjs的加持,如果你已经学习了rxjs,redux-observable的学习成本并不高,而且随着</p>
</li>
<li><p>rxjs的升级redux-observable也会变得更强大</p>
</li>
</ul>
<p><strong>redux-observable缺陷:</strong></p>
<ul>
<li><p>学习成本奇高: 如果你不会rxjs,则需要额外学习两个复杂的库</p>
</li>
<li><p>社区一般: redux-observable的下载量只有redux-saga的1/5,社区也不够活跃,在复杂异步流中间件</p>
</li>
<li><p>这个层面redux-saga仍处于领导地位</p>
</li>
</ul>
<h2 id="1-13-state-和-props-区别是啥？"><a href="#1-13-state-和-props-区别是啥？" class="headerlink" title="1.13 state 和 props 区别是啥？"></a>1.13 state <strong>和</strong> props 区别是啥？</h2><p>props和state是普通的 JS 对象。虽然它们都包含影响渲染输出的信息，但是它们在组件方面的功能是不同的。即</p>
<ul>
<li>state 是组件自己管理数据，控制自己的状态，可变</li>
<li>props 是外部传入的数据参数，不可变；</li>
<li>没有state的叫做无状态组件，有state的叫做有状态组件；</li>
<li>多用 props，少用 state，也就是多写无状态组件。</li>
</ul>
<h2 id="1-14-当调用setState时，React-render-是如何工作的？"><a href="#1-14-当调用setState时，React-render-是如何工作的？" class="headerlink" title="1.14  当调用setState时，React render 是如何工作的？"></a>1.14  当调用setState时，React render 是如何工作的？</h2><ul>
<li><p>虚拟 DOM 渲染:当render方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用setState()时，render会被再次调用，因为默认情况下shouldComponentUpdate总是返回true，所以默认情况下React 是没有优化的。</p>
</li>
<li><p>原生 DOM 渲染:React 只会在虚拟DOM中修改真实DOM节点，而且修改的次数非常少——这是很棒的React特性，它优化了真实DOM的变化，使React变得更快。</p>
</li>
</ul>
<h2 id="1-15-hooks"><a href="#1-15-hooks" class="headerlink" title="1.15 hooks"></a>1.15 hooks</h2><h3 id="Hooks简介"><a href="#Hooks简介" class="headerlink" title="Hooks简介"></a>Hooks简介</h3><p>React的组件创建方式，一种是类组件，一种是纯函数组件</p>
<ul>
<li>纯函数组件没有状态</li>
<li>纯函数组件没有生命周期</li>
<li>纯函数组件没有this</li>
</ul>
<p><strong>使用Hooks的优点：</strong></p>
<ul>
<li>告别难以理解的Class( this 和 生命周期 的痛点)</li>
<li>解决业务逻辑难以拆分的问题</li>
<li>使状态逻辑复用变得简单可行</li>
<li>函数组件从设计思想上来看更加契合React的理念</li>
</ul>
<p><strong>Hooks并非万能</strong>:</p>
<ul>
<li>Hooks暂时还不能完全的为函数组件补齐类组件地能力（如生命周期的getSnapshotBeforeUpdate、componentDidCatch方法暂时还未实现）</li>
<li>将类组件的复杂变成函数组件的轻量，可能使用者并不能很好地消化这种复杂</li>
<li>Hooks在使用层面有着严格地规则约束</li>
</ul>
<h3 id="Hook函数（9种）"><a href="#Hook函数（9种）" class="headerlink" title="Hook函数（9种）"></a>Hook函数（9种）</h3><ol>
<li>useState()：状态钩子</li>
<li>useContext()：共享状态钩子</li>
<li>useEffect()：副作用钩子</li>
<li>useReducer()：Action钩子</li>
<li>userRefef()：Ref Hook可以<strong>在函数组件中存储、查找组件内的标签或任意其它数据</strong></li>
<li>useMemo()： 主要<strong>用来解决使用React hooks产生的无用渲染的性能问题</strong></li>
<li>useCallback()： 主要<strong>是为了性能的优化</strong></li>
<li>useLayoutEffect() ：和useEffect相同，<strong>都是用来执行副作用，但是它会在所有的DOM变更之后同步调用effect</strong>。useLayoutEffect和useEffect最大的区别就是一个是同步，一个是异步。</li>
<li>useImperativeHandle()： 可以<strong>在使用 ref 时自定义暴露给父组件的实例值。</strong></li>
</ol>
<h3 id="自定义Hooks"><a href="#自定义Hooks" class="headerlink" title="自定义Hooks"></a>自定义Hooks</h3><p><strong>自定义 Hooks：是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook</strong></p>
<p><strong>自定义Hooks：可以封装状态，能够更好的实现状态共享</strong></p>
<h1 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h1><h2 id="1-1-前端为什么要进行打包和构建"><a href="#1-1-前端为什么要进行打包和构建" class="headerlink" title="1.1 前端为什么要进行打包和构建"></a>1.1 前端为什么要进行打包和构建</h2><ol>
<li>体积更小（Tree-Shaking、压缩、合并），加载更快</li>
<li>编译高级语言和语法（TS，ES6+，模块化，scss）</li>
<li>兼容性和错误检查（Polyfill、postcss、eslint)</li>
<li>统一、高效的开发环境</li>
<li>统一的构建流程和产出标准</li>
<li>集成公司构建规范（提测、上线等）</li>
</ol>
<h2 id="1-2-如何提高webpack的构建速度"><a href="#1-2-如何提高webpack的构建速度" class="headerlink" title="1.2 如何提高webpack的构建速度"></a>1.2 如何提高webpack的构建速度</h2><ol>
<li>优化babel-loader 开启缓存</li>
<li>使用module中的Noparse，不去解析属性值代表的库的依赖（需要在webpack.config.js的module节点添加noParse配置，使用|分割）</li>
<li>可以使用webpack内置插件lgnorePlugin插件（作用：忽略第三方包指定目录，让这些指定目录不要被打包进去）</li>
<li>使用happyPack多进程打包（需要下载）</li>
<li>使用parallelUgligyPlugin多进程压缩js（默认使用uglifyJs来压缩代码，单进程）</li>
</ol>
<h2 id="1-3-代码分割的本质是什么？"><a href="#1-3-代码分割的本质是什么？" class="headerlink" title="1.3 代码分割的本质是什么？"></a>1.3 代码分割的本质是什么？</h2><ol>
<li>代码分割的本质就是在源代码直接上线和达成唯一脚本main.bundle.js这两种极端方案之间的一种更适合实际场景的中间状态。</li>
<li>源码直接上线：虽然过程可控，但是http请求多，性能开销大。</li>
<li>打包成唯一脚本：服务器压力小，但是页面空白期长，用户体验不好。</li>
</ol>
<h2 id="1-4webpack的基本功能有哪些？"><a href="#1-4webpack的基本功能有哪些？" class="headerlink" title="1.4webpack的基本功能有哪些？"></a>1.4webpack的基本功能有哪些？</h2><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">代码转换</td>
<td align="left">typescript编译成JavaScript、scss编辑成css</td>
</tr>
<tr>
<td align="left">文件优化</td>
<td align="left">压缩JavaScript、css、html、压缩合并图片</td>
</tr>
<tr>
<td align="left">代码分割</td>
<td align="left">提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载</td>
</tr>
<tr>
<td align="left">模块合并</td>
<td align="left">采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件</td>
</tr>
<tr>
<td align="left">自动刷新</td>
<td align="left">监听本地源代码的变化，自动构建，刷新浏览器</td>
</tr>
<tr>
<td align="left">代码校验</td>
<td align="left">在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过</td>
</tr>
<tr>
<td align="left">自动发布</td>
<td align="left">更新完代码后，自动构建出线上发布代码并传输给发布系统</td>
</tr>
</tbody></table>
<h2 id="1-5-文件指纹是什么？"><a href="#1-5-文件指纹是什么？" class="headerlink" title="1.5 文件指纹是什么？"></a>1.5 文件指纹是什么？</h2><p> 文件指纹是打包之后的文件后缀名。</p>
<p>        chunkhash：和webpack打包的chunk有关，不同的entry会生出不同的chunkhash。</p>
<p>                js后缀名：filename:’[name][chunkhash:8].js’,</p>
<p>        contenthash：根据文件内容来定义hash，文件内容不变，则其不变。</p>
<p>                css后缀名：filename:’[name][contenthash:8].css’,</p>
<p>        hash：和整个项目构建有关，只要项目文件有修改，整个构建的hash值就会修改。</p>
<p>                img后缀名：name:’[name][hash:8].[ext]’</p>
<h2 id="x20-1-6-为什么说vite比webpack更快？"><a href="#x20-1-6-为什么说vite比webpack更快？" class="headerlink" title="&#x20;1.6 为什么说vite比webpack更快？"></a>&#x20;1.6 为什么说vite比webpack更快？</h2><ol>
<li>webpack会先打包，然后启动开发服务器，请求服务器时直接给予打包结果。</li>
<li>vite是直接启动开发服务器，请求哪个模块再对该模块进行实时编译。</li>
<li>vite在启动的时候不需要打包，意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快。</li>
<li>&#x20;当浏览器请求某个模块时，再根据需要对模块内容进行编译。这种按需动态编译的方式，极大的缩减了编译时间，项目越复杂、模块越多，vite的优势越明显。</li>
<li>&#x20;在HMR方面，当改动了一个模块后，仅需让浏览器重新请求该模块即可，不像webpack那样需要把该模块的相关依赖模块全部编译一次，效率更高。</li>
<li>&#x20;当需要打包到生产环境时，vite使用传统的rollup进行打包，因此，vite的主要优势在开发阶段。另外，由于vite利用的是ES Module，因此在代码中不可以使用CommonJS&#x20;</li>
</ol>
<h2 id="1-7-vite工作原理"><a href="#1-7-vite工作原理" class="headerlink" title="1.7 vite工作原理"></a>1.7 vite工作原理</h2><p>vite是一种现代化的前端开发工具，其工作原理主要分为以下几个步骤</p>
<ol>
<li>基于ESM构建：Vite作为一款基于ESM的前端构建工具，通过ES模块提供的动态导入功能来实现快速的开发和构建。</li>
<li>零配置开发：Vite允许开发者在不需要任何配置的情况下启动一个服务器进行开发，通过对文件的即时编译和缓存，来提高开发效率。</li>
<li>基于浏览器原生的ESM加载：Vite将所有文件视为ES模块，并且在开发时会直接从源代码加载模块，而不是打包后的文件，从而可以避免打包的过程带来的性能损失。</li>
<li>按需编译和缓存：Vite会按需编译和缓存依赖项，只有当需要更新时才会进行重新编译，缓存让开发者可以忽略无关的代码变化。</li>
<li>插件化架构：Vite的插件化架构可以方便地扩展其功能，例如使用插件来处理CSS、处理图片、压缩源代码等等。</li>
</ol>
<h2 id="x20-1-8-vite核心原理"><a href="#x20-1-8-vite核心原理" class="headerlink" title="&#x20;1.8 vite核心原理"></a>&#x20;1.8 vite核心原理</h2><ul>
<li>Vite其核心原理是利用浏览器现在已经支持ES6的import，碰见import就会发送一个HTTP请求去加载文件。</li>
<li>Vite整个过程中没有对文件进行打包编译，做到了真正的按需加载，所以其运行速度比原始的webpack开发编译速度快出许多！</li>
</ul>
<p><strong>特点：</strong></p>
<ol>
<li>快速的冷启动：基于Esbuild的依赖进行预编译优化 （Esbuild 打包速度太快了，比类似的工具快10~100倍 ）</li>
<li>增加缓存策略：源码模块使用协商缓存，依赖模块使用强缓；因此一旦被缓存它们将不需要再次请求</li>
<li>&#x20;HMR（热更新）：当修改代码时，HMR 能够在不刷新页面的情况下，把页面中发生变化的模块，替换成新的模块，同时不影响其他模块的正常运作</li>
<li>&#x20;基于 Rollup 打包：生产环境下由于esbuild对css和代码分割并使用Rollup进行打包</li>
<li>高效的热更新：基于ESM实现，同时利用HTTP头来加速整个页面的重新加载&#x20;</li>
</ol>
<h2 id="1-9-Vite-冷启动为什么快"><a href="#1-9-Vite-冷启动为什么快" class="headerlink" title="1.9 Vite 冷启动为什么快"></a>1.9 Vite 冷启动为什么快</h2><p>vite 运行 Dev 命令后只做了两件事情</p>
<ol>
<li>启动本地服务器并注册了一些中间件</li>
<li>使用 ESbuild 预构建模块</li>
</ol>
<h2 id="1-10-vite生产环境缺点"><a href="#1-10-vite生产环境缺点" class="headerlink" title="1.10 vite生产环境缺点"></a>1.10 vite生产环境缺点</h2><ol>
<li><p> Vite 在是直接把转化后的 es module 的JavaScript，扔给浏览器，让浏览器根据依赖关系，自己去加载依赖</p>
</li>
<li><p>那有人就会说了，那放到 生产环境 时，是不是可以不打包，直接在开个 Vite 服务就行，反正浏览器会自己去根据依赖关系去自己加载依赖。答案是不行的，为啥呢：</p>
<p>1、你代码是放在服务器的，过多的浏览器加载依赖肯定会引起更多的网络请求</p>
<p>2、为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割、CSS处理，这些优化操作，目前 esbuild 还不怎么完善&#x20;</p>
</li>
</ol>
<h2 id="x20-1-11-vite和webpack优缺点对比"><a href="#x20-1-11-vite和webpack优缺点对比" class="headerlink" title="&#x20;1.11 vite和webpack优缺点对比"></a>&#x20;1.11 vite和webpack优缺点对比</h2><ul>
<li>更快的启动时间和更新速度</li>
<li>更好的开发体验：自动打开浏览器、自动刷新页面 配置简单。</li>
<li>不需要过多的配置就可以搭建基本的开发环境 更少的依赖。</li>
<li>借助原生的ES模块</li>
<li>避免了过多的额外依赖</li>
</ul>
<p>&#x20;<strong>缺点：</strong></p>
<ul>
<li>vite的构建技术主要用于中小型项目，对于大型项目的支持不如webpack&#x20;</li>
<li>vite主要是针对vue3的单页面应用，对于多页面应用、ssr应用、自定义流程应用不如webpack&#x20;</li>
<li>开发环境首屏加载慢，懒加载慢&#x20;</li>
<li>vite由于基于原生ES模块，不支持commonJs；webpack关注兼容性，vite关注浏览器端的开发体验，vite的生态还不如webpack</li>
</ul>
</article><div class="post-copyright"><div class="post-copyright__author_group"><a class="post-copyright__author_img" href="/about/"><img class="post-copyright__author_img_front" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"></a><div class="post-copyright__author_name">XC's Blog</div><div class="post-copyright__author_desc"></div></div><div class="post-tools" id="post-tools"><div class="post-tools-left"><div id="quit-box" onclick="RemoveRewardMask()"></div></div></div><div class="post-copyright__notice"><span class="post-copyright-info">本文是原创文章，采用<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</a>协议，完整转载请注明来自<a href="/">XC's Blog</a></span></div></div><div class="post-tools-right"><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"><span class="tags-punctuation"></span>面试题<span class="tagsPageCount">2</span></a></div></div></div><nav class="needEndHide pagination-post" id="pagination"><div class="next-post pull-full"><a href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">常见前端面试题</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="scoicon sco-star-smile-fill"></i><span>喜欢这篇的人也看了</span><div class="relatedPosts-link"><a onclick="event.preventDefault(); toRandomPost();" href="javascript:void(0);" rel="external nofollow" data-pjax-state="">随便逛逛</a></div></div><div class="relatedPosts-list"><div><a href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png" alt="cover"><div class="content is-center"><div class="title">常见前端面试题</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="card-content"><div class="card-info-avatar is-center"><div class="author-info__top-group"><div class="author-info__sayhi" id="author-info__sayhi" onclick="sco.changeSayHelloText()">sayhello.morning</div></div></div><div class="avatar-img-group"><img class="avatar-img" alt="头像" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><div class="avatar-sticker"><img class="avatar-sticker-img" data-lazy-src="https://bu.dusays.com/2023/12/30/659011053e246.png" alt="心情贴纸"></div></div><div class="author-info__description_group"><div class="author-info__description">分享自己对编程的<b>热爱</b>，对美好生活的<b>向往</b>，对知识海洋<b>探索历程</b>。</div><div class="author-info__description2">相信你可以在这里找到对你有用的知识和教程。</div></div><div class="author-info__bottom-group"><a class="author-info__bottom-group-left" href="/about/"><div class="author-info__name">XC's Blog</div><div class="author-info__desc"></div></a><div class="card-info-social-icons is-center"></div></div></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="scoicon sco-menu-line"></i><span>文章目录</span></div><div class="toc-content" id="toc-content"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80"><span class="toc-text">前端基础</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#html"><span class="toc-text">html</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-html%E6%A0%87%E7%AD%BE%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%88head%EF%BC%8C-body%EF%BC%8C-Doctype%EF%BC%89-%E4%BB%96%E4%BB%AC%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88"><span class="toc-text">1.1 html标签的类型（head， body，!Doctype） 他们的作用是什么</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-h5%E6%96%B0%E7%89%B9%E6%80%A7"><span class="toc-text">1.2 h5新特性</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-3-%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0"><span class="toc-text">1.3 伪类和伪元素</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-4-html%E8%AF%AD%E4%B9%89%E5%8C%96"><span class="toc-text">1.4 html语义化</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-5-%E5%BC%95%E5%85%A5%E6%A0%B7%E5%BC%8F%E6%97%B6%EF%BC%8Clink%E5%92%8C-import%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"><span class="toc-text">1.5 引入样式时，link和@import的区别？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-6-%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E4%BD%A0%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E7%90%86%E8%A7%A3"><span class="toc-text">1.6 介绍一下你对浏览器内核的理解</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-7-%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%9C%89%E5%93%AA%E4%BA%9B"><span class="toc-text">1.7 常见的浏览器内核有哪些</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-8-label%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88-%E6%98%AF%E6%80%8E%E4%B9%88%E7%94%A8%E7%9A%84"><span class="toc-text">1.8 label标签的作用是什么? 是怎么用的?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-9-title%E4%B8%8Eh1%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81b%E4%B8%8Estrong%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81i%E4%B8%8Eem%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">1.9 title与h1的区别、b与strong的区别、i与em的区别?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-10-%E5%85%83%E7%B4%A0%E7%9A%84alt%E5%92%8Ctitle%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F"><span class="toc-text">1.10 元素的alt和title有什么不同？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-11-%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%93%AA%E4%B8%89%E5%B1%82%E6%9E%84%E6%88%90%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88"><span class="toc-text">1.11 浏览器页面有哪三层构成，分别是什么，作用是什么?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-12-%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F"><span class="toc-text">1.12 网页制作会用到的图片格式有哪些？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-13-viewport-%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%EF%BC%9F"><span class="toc-text">1.13 viewport 所有属性？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-14-meta%E6%A0%87%E7%AD%BE%E7%9A%84name%E5%B1%9E%E6%80%A7%E5%80%BC%EF%BC%9F"><span class="toc-text">1.14 meta标签的name属性值？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-15-a%E6%A0%87%E7%AD%BE%E4%B8%AD-%E5%A6%82%E4%BD%95%E7%A6%81%E7%94%A8href-%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2-%E6%88%96-%E5%AE%9A%E4%BD%8D%E9%93%BE%E6%8E%A5"><span class="toc-text">1.15 a标签中 如何禁用href 跳转页面 或 定位链接?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-16-video%E6%A0%87%E7%AD%BE%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95"><span class="toc-text">1.16 video标签的几个属性方法</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-17-%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0"><span class="toc-text">1.17 块级元素、行内元素、行内块元素</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-18-web%E6%A0%87%E5%87%86%E5%92%8Cw3c%E6%A0%87%E5%87%86"><span class="toc-text">1.18 web标准和w3c标准</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-19-%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9BSEO"><span class="toc-text">1.19 前端需要注意哪些SEO</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-20-canvas%E5%92%8Csvg%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">1.20 canvas和svg的区别</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#CSS"><span class="toc-text">CSS</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-%E6%A0%87%E5%87%86%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%92%8CIE%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B8%A4%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><span class="toc-text">1.1 标准盒模型和IE盒模型两者的区别是什么？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-%E7%9B%92%E5%AD%90%E5%A1%8C%E9%99%B7%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><span class="toc-text">1.2 盒子塌陷是什么？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-3-%E7%BB%A7%E6%89%BF%E7%9B%B8%E5%85%B3"><span class="toc-text">1.3 继承相关</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-4-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AEpadding%EF%BC%8Cmargin%E5%90%97%EF%BC%9F"><span class="toc-text">1.4 行内元素可以设置padding，margin吗？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-5-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A0%EF%BC%9F%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%8F%91%E7%94%9F%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A0%EF%BC%9F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A0%EF%BC%9F"><span class="toc-text">1.5 什么是边距重叠？什么情况下会发生边距重叠？如何解决边距重叠？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-6-BFC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><span class="toc-text">1.6 BFC是什么？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-7-%E5%9D%97%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD"><span class="toc-text">1.7 块元素居中</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-8-CSS-%E4%BC%98%E5%8C%96%E3%80%81%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F"><span class="toc-text">1.8 CSS 优化、提高性能的方法有哪些？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-9-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%8C%E7%84%B6%E5%90%8E%E6%80%8E%E4%B9%88%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2"><span class="toc-text">1.9 行内元素和块级元素什么区别，然后怎么相互转换</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-10-min-width-max-width-%E5%92%8C-min-height-max-height-%E5%B1%9E%E6%80%A7%E9%97%B4%E7%9A%84%E8%A6%86%E7%9B%96%E8%A7%84%E5%88%99%EF%BC%9F"><span class="toc-text">1.10 min-width&#x2F;max-width 和 min-height&#x2F;max-height 属性间的覆盖规则？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-11-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E8%A7%A3%E6%9E%90CSS%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%EF%BC%9F"><span class="toc-text">1.11 浏览器是怎样解析CSS选择器的？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-12-width-auto-%E5%92%8C-width-100-%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">1.12 width:auto 和 width:100%的区别</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-13-display%E3%80%81position%E5%92%8Cfloat%E7%9A%84%E7%9B%B8%E4%BA%92%E5%85%B3%E7%B3%BB%EF%BC%9F"><span class="toc-text">1.13 display、position和float的相互关系？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-14-IFC-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><span class="toc-text">1.14 IFC 是什么？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-15-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E7%BB%9F%E9%85%8D%E7%AC%A6%E5%88%9D%E5%A7%8B%E5%8C%96-css-%E6%A0%B7%E5%BC%8F"><span class="toc-text">1.15 为什么不建议使用统配符初始化 css 样式</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-16-CSS3-%E6%96%B0%E7%89%B9%E6%96%B0"><span class="toc-text">1.16 CSS3 新特新</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-17-position-%E8%B7%9F-display%E3%80%81float-%E8%BF%99%E4%BA%9B%E7%89%B9%E6%80%A7%E7%9B%B8%E4%BA%92%E5%8F%A0%E5%8A%A0%E5%90%8E%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%EF%BC%9F"><span class="toc-text">1.17 position 跟 display、float 这些特性相互叠加后会怎么样？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-18-%E4%BB%80%E4%B9%88%E6%98%AFCSS-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%EF%BC%9F"><span class="toc-text">1.18 什么是CSS 预处理器？为什么使用？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-19-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E8%A7%A3%E6%9E%90%E7%9A%84%EF%BC%9F"><span class="toc-text">1.19 浏览器是怎样解析的？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-20-%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E7%9A%84%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%A5%87%E6%95%B0%E8%BF%98%E6%98%AF%E5%81%B6%E6%95%B0%E7%9A%84%E5%AD%97%E4%BD%93%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F"><span class="toc-text">1.20 在网页中的应该使用奇数还是偶数的字体？为什么呢？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-21-%E5%85%83%E7%B4%A0%E7%AB%96%E5%90%91%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E6%98%AF%E7%9B%B8%E5%AF%B9%E4%BA%8E%E5%AE%B9%E5%99%A8%E7%9A%84%E9%AB%98%E5%BA%A6%E5%90%97%EF%BC%9F"><span class="toc-text">1.21 元素竖向的百分比设定是相对于容器的高度吗？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-22-%E6%80%8E%E4%B9%88%E8%AE%A9%E8%B0%B7%E6%AD%8C%E6%94%AF%E6%8C%81%E5%B0%8F%E4%BA%8E12px%E7%9A%84%E6%96%87%E5%AD%97%EF%BC%9F"><span class="toc-text">1.22 怎么让谷歌支持小于12px的文字？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-23-li-%E4%B8%8E-li-%E4%B9%8B%E9%97%B4%E6%9C%89%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E7%A9%BA%E7%99%BD%E9%97%B4%E9%9A%94%E6%98%AF%E4%BB%80%E4%B9%88%E5%8E%9F%E5%9B%A0%E5%BC%95%E8%B5%B7%E7%9A%84%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%9F"><span class="toc-text">1.23 li 与 li 之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-24-display-inline-block-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%98%BE%E7%A4%BA%E9%97%B4%E9%9A%99%EF%BC%9F"><span class="toc-text">1.24 display:inline-block 什么时候会显示间隙？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-25-png%E3%80%81jpg%E3%80%81gif-%E8%BF%99%E4%BA%9B%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%88%86%E5%88%AB%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E3%80%82%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BA%86%E8%A7%A3%E8%BF%87webp%EF%BC%9F"><span class="toc-text">1.25 png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-26-style-%E6%A0%87%E7%AD%BE%E5%86%99%E5%9C%A8-body-%E5%90%8E%E4%B8%8E-body%E5%89%8D%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F"><span class="toc-text">1.26 style 标签写在 body 后与 body前有什么区别？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-27-before-%E5%92%8C-after-%E4%B8%AD%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8C%E5%8D%95%E5%86%92%E5%8F%B7%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E3%80%81%E4%BD%9C%E7%94%A8%EF%BC%9F"><span class="toc-text">1.27 ::before 和::after 中双冒号和单冒号有什么区别、作用？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-28-CSS3%E6%96%B0%E5%A2%9E%E4%BC%AA%E7%B1%BB%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%BC%AA%E5%85%83%E7%B4%A0%EF%BC%9F"><span class="toc-text">1.28 CSS3新增伪类，以及伪元素？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-29-%E6%9C%AA%E7%9F%A5%E9%AB%98%E5%BA%A6%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E3%80%81%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F"><span class="toc-text">1.29 未知高度元素垂直居中、垂直居中的实现方式有哪些？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-30-%E5%9B%BE%E7%89%87%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD"><span class="toc-text">1.30 图片垂直居中</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-31-%E6%96%87%E6%9C%AC%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD"><span class="toc-text">1.31 文本元素居中</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-32-CSS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AD%89%E8%85%B0%E4%B8%89%E8%A7%92%E5%BD%A2"><span class="toc-text">1.32 CSS实现一个等腰三角形</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-33-%E7%94%BB-0-5px-%E7%9A%84%E7%9B%B4%E7%BA%BF"><span class="toc-text">1.33 画 0.5px 的直线</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-34-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88"><span class="toc-text">1.34 移动端适配方案</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-35-link-%E5%92%8C-import-%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">1.35 link 和 @import 的区别</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-36-iframe%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9%E3%80%81%E7%BC%BA%E7%82%B9"><span class="toc-text">1.36 iframe有什么优点、缺点?</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#JavaScript"><span class="toc-text">JavaScript</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-let-var-const%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"><span class="toc-text">1.1 let var const的区别？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8C%BA%E5%88%AB"><span class="toc-text">1.2 js数据类型，区别</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-3-Javascript-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9F"><span class="toc-text">1.3 Javascript 创建对象的几种方式？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-4-%E3%80%81-%E5%92%8Cobject-is-%E5%8C%BA%E5%88%AB"><span class="toc-text">1.4 &#x3D;&#x3D;、&#x3D;&#x3D;&#x3D;和object.is 区别</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-5-%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E6%95%B0%E7%BB%84%E5%92%8C%E5%AF%B9%E8%B1%A1%EF%BC%9F"><span class="toc-text">1.5 如何区分数组和对象？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-6-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE"><span class="toc-text">1.6 作用域和作用域链</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-7-constructor%E7%9A%84%E7%90%86%E8%A7%A3"><span class="toc-text">1.7 constructor的理解</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-8-webworker%E5%92%8Cwebsocket"><span class="toc-text">1.8 webworker和websocket</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-9-XML%E4%B8%8EJSON%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"><span class="toc-text">1.9 XML与JSON的区别？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-10-map-%E5%92%8C-forEach-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"><span class="toc-text">1.10 map 和 forEach 的区别？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-11-for-of-%E5%8F%AF%E4%BB%A5%E9%81%8D%E5%8E%86%E5%93%AA%E4%BA%9B%E5%AF%B9%E8%B1%A1%EF%BC%9F"><span class="toc-text">1.11 for of 可以遍历哪些对象？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-13-new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%85%B7%E4%BD%93%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%E5%91%A2"><span class="toc-text">1.13 new操作符具体干了什么呢?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-14-%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="toc-text">1.14 作用域</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-15-javascript%E4%B8%ADarguments%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98"><span class="toc-text">1.15 javascript中arguments相关的问题</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-16-instanceOf%E4%BD%9C%E7%94%A8-%E5%8D%B3%E5%8E%9F%E7%90%86"><span class="toc-text">1.16 instanceOf作用 即原理</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-17-%E6%95%B0%E7%BB%84%E5%92%8C%E4%BC%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">1.17 数组和伪数组的区别?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-18-%E4%BB%8B%E7%BB%8D%E4%B8%8B-Set%E3%80%81Map%E3%80%81WeakSet-%E5%92%8C-WeakMap%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F"><span class="toc-text">1.18 介绍下 Set、Map、WeakSet 和 WeakMap的区别？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-19-%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4-js-%E4%B8%AD%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%83%85%E5%86%B5"><span class="toc-text">1.19 简单说说 js 中有哪几种内存泄露的情况</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-20-json%E5%92%8Cxml%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">1.20 json和xml数据的区别?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-21-JavaScript%E6%9C%89%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B"><span class="toc-text">1.21 JavaScript有几种方法判断变量的类型?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-22-Math-min-lt-Math-max"><span class="toc-text">1.22  Math.min()&lt; Math.max()</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-23-promise%E5%92%8C-async-await-%E5%8C%BA%E5%88%AB"><span class="toc-text">1.23 promise和 async await 区别?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-24-defer%E5%92%8Casync%E5%8C%BA%E5%88%AB"><span class="toc-text">1.24 defer和async区别?</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-25-%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5"><span class="toc-text">1.25 同步和异步</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-26-javascript%E4%B8%ADarguments%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9F"><span class="toc-text">1.26 javascript中arguments相关的问题？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-27-null-%E5%92%8C-undefined-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%80%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%98%E4%B8%BAnull"><span class="toc-text">1.27 null 和 undefined 的区别，如何让一个属性变为null</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-28-%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4-js-%E4%B8%AD%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%83%85%E5%86%B5"><span class="toc-text">1.28 简单说说 js 中有哪几种内存泄露的情况</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-29-call-appy-bind%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB%EF%BC%9F"><span class="toc-text">1.29 call appy bind的作用和区别？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-30-this%E6%8C%87%E5%90%91%EF%BC%88%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%EF%BC%89"><span class="toc-text">1.30 this指向（普通函数、箭头函数）</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-31-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E8%83%BD%E5%90%A6%E5%BD%93%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"><span class="toc-text">1.31 箭头函数能否当构造函数</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-32-%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BC%98%E7%BC%BA%E7%82%B9-%E5%8F%8A%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F"><span class="toc-text">1.32 继承，优缺点 及方法有哪些？</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-32-1%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF"><span class="toc-text">1.32.1原型链继承</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-32-2-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF"><span class="toc-text">1.32.2 构造函数继承</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-32-3-%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF"><span class="toc-text">1.32.3 组合继承</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-32-4-%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF"><span class="toc-text">1.32.4 原型式继承</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-32-5-%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF"><span class="toc-text">1.32.5 寄生式继承</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-32-6-%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF"><span class="toc-text">1.32.6 寄生组合式继承</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-32-7-ES6-class-extends"><span class="toc-text">1.32.7 ES6 class extends</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-33-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6-%E2%80%A6"><span class="toc-text">1.33 扩展运算符 …</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-33-1%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E8%83%BD%E8%A2%AB%E6%89%A9%E5%B1%95%E6%93%8D%E4%BD%9C%E7%AC%A6"><span class="toc-text">1.33.1哪些类型能被扩展操作符?</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-33-2-%E5%9C%BA%E6%99%AF"><span class="toc-text">1.33.2 场景</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-34-%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%9A%84%E6%96%B9%E6%B3%95"><span class="toc-text">1.34 实现异步的方法</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-34-1-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0"><span class="toc-text">1.34.1 回调函数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-34-2-promise"><span class="toc-text">1.34.2 promise</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-34-3-%E7%94%9F%E6%88%90%E5%99%A8generator-yield"><span class="toc-text">1.34.3 生成器generator&#x2F;yield</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-34-3-async-await"><span class="toc-text">1.34.3 async&#x2F;await</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-35-%E5%BE%AA%E7%8E%AFi-%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E8%BE%93%E5%87%BA%E4%BB%80%E4%B9%88%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%9F"><span class="toc-text">1.35 循环i 一次性定时器中输出什么，如何解决？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-36-%E4%B8%BA%E4%BB%80%E4%B9%88js%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B"><span class="toc-text">1.36 为什么js是单线程</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-37-%E6%AD%BB%E9%94%81"><span class="toc-text">1.37 死锁</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-38-%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA"><span class="toc-text">1.38 暂时性死区</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%B5%8F%E8%A7%88%E5%99%A8"><span class="toc-text">浏览器</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-cookie-sessionStorage-localStorage-%E5%8C%BA%E5%88%AB"><span class="toc-text">1.1 cookie sessionStorage localStorage 区别</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E4%BC%9A%E8%BF%87%E6%9C%9F%E7%9A%84localStorage%EF%BC%8C%E8%AF%B4%E8%AF%B4%E6%83%B3%E6%B3%95"><span class="toc-text">1.2 如何写一个会过期的localStorage，说说想法</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-3-localStorage-%E8%83%BD%E8%B7%A8%E5%9F%9F%E5%90%97"><span class="toc-text">1.3 localStorage 能跨域吗</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-4-memory-cache-%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF"><span class="toc-text">1.4 memory cache 如何开启</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-5-localstorage%E7%9A%84%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98"><span class="toc-text">1.5 localstorage的注意哪些问题</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-6-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88"><span class="toc-text">1.6 浏览器输入URL发生了什么</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-7-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84%EF%BC%9F"><span class="toc-text">1.7 浏览器是如何渲染页面的？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-8-%E9%87%8D%E7%BB%98%E3%80%81%E9%87%8D%E6%8E%92"><span class="toc-text">1.8 重绘、重排</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-9-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%88Event-loop%EF%BC%89"><span class="toc-text">1.9 事件循环（Event loop）</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-10-let-a-1-%E6%8C%82%E8%BD%BD%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F"><span class="toc-text">1.10 let a &#x3D; 1 挂载在哪里？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-11-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6"><span class="toc-text">1.11 浏览器垃圾回收机制</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-12-cookie"><span class="toc-text">1.12 cookie</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-13-%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7"><span class="toc-text">1.13 调试工具</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#a-%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8"><span class="toc-text">a.谷歌浏览器</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#b-%E5%85%B6%E4%BB%96"><span class="toc-text">b.其他</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93"><span class="toc-text">网络传输</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-%E8%B7%A8%E5%9F%9F"><span class="toc-text">1.1 跨域</span></a></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="scoicon sco-map-line"></i><span>最近发布</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题"><img alt="整个前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题">整个前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img alt="常见前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题">常见前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台"><img alt="硅谷甄选运营平台" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台">硅谷甄选运营平台</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天"><img alt="Vue第三天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天">Vue第三天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天"><img alt="Vue第二天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天">Vue第二天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9">Vue框架笔记</a></div></div></div></div></div></div></main><footer id="footer"><div id="sco-footer-bar"><div class="footer-logo"><span class="scoicon">XC's Blog</span></div><div class="footer-bar-description">来自XC's Blog - 的文章</div><a class="footer-bar-link" href="/">了解更多</a></div><div id="footer_deal"><div class="footer_mini_logo" id="footer_mini_logo" title="返回顶部" onclick="sco.toTop()"><img data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg" alt="返回顶部"></div></div><div id="sco-footer"></div><div id="footer-bar"><div class="footer-bar-links"><div class="footer-bar-left"><div class="copyright">© 2021 - 2024 By&nbsp;<a class="footer-bar-link" href="/">XC's Blog</a></div></div><div class="footer-bar-right"><a class="footer-bar-link" target="_blank" rel="noopener" href="https://github.com/wleelw/hexo-theme-solitude" title="主题">主题</a><a class="footer-bar-link cc"><i class="scoicon sco-copyright-line"></i><i class="scoicon sco-creative-commons-by-line"></i><i class="scoicon sco-creative-commons-nc-line"></i><i class="scoicon sco-creative-commons-nd-line"></i></a></div></div></div></footer></div><!-- inject body--><div><script src="/js/main.js?v=1.5.1"></script><script src="/js/utils.js?v=1.5.1"></script><script src="https://cdn.cbd.int/solitude-source/js/universe.min.js"></script><script>dark()
</script><script src="https://cdn.staticfile.org/pjax/0.2.8/pjax.min.js"></script><script src="https://cdn.staticfile.org/vanilla-lazyload/17.8.5/lazyload.iife.min.js"></script><script src="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.js"></script><script src="/js/sco-ai.min.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js"></script><script src="https://cdn.staticfile.org/meting/2.0.1/Meting.min.js"></script><script>const meting_api = 'https://meting.qjqq.cn/?server=:server&type=:type&id=:id&auth=:auth&r=:r';
</script><script src="/js/covercolor/local.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/pace/1.2.4/pace.min.js"></script></div><div id="js-pjax"><script async src="https://cdn.staticfile.org/busuanzi/2.3.0/bsz.pure.mini.min.js"></script><script id="config-diff">var PAGE_CONFIG = {
    is_post: true,
    is_page: false,
    is_home: false,
    page: 'post',
    toc: true,
    comment: false,
}
</script></div><!-- newest comment--><!-- pjax--><script>let pjaxSelectors = [
    'title',
    '#body-wrap',
    '#site-config',
    'meta[name="description"]',
    '#js-pjax',
    'meta[property^="og:"]',
]

const pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
})

document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
})

document.addEventListener('pjax:complete', () => {
    window.refreshFn()
})

document.addEventListener('pjax:error', (e) => {
    if (e.request.status === 404) {
        pjax.loadUrl('/404.html')
    }
})</script><!-- theme--><script>initTheme = () => {
    const cachedMode = saveToLocal.get('theme');
    if (cachedMode === undefined)
        document.documentElement.setAttribute('data-theme', 'light');
    else
        document.documentElement.setAttribute('data-theme', cachedMode);
}
initTheme()</script><!-- search--><!-- music--><div class="needEndHide" id="nav-music" onclick="sco.musicToggle()"><div id="nav-music-hoverTips">音乐已暂停</div><meting-js id="8407304077" server="netease" type="playlist" mutex="true" preload="none" data-lrctype="0" order="random" theme="var(--sco-main)"></meting-js></div></body></html><script>const posts=["Vue笔记/前端面试题","Vue笔记/面试题","Vue笔记/硅谷甄选项目笔记","Vue笔记/vue第三天","Vue笔记/vue第二天","Vue笔记/Vue第一天","Vue笔记/vue框架笔记","Vue前置基础/5.ES6模块化与Webpack入门","Vue前置基础/1.Vue前置JS功底","Vue前置基础/4.跨域的基本概念","Vue前置基础/3.NPM的使用","Vue前置基础/2.Nodejs基础","Ajax学习笔记/黑马头条数据管理平台","Ajax学习笔记/Promise笔记","Ajax学习笔记/Ajax第四天","Ajax学习笔记/Ajax第三天","Ajax学习笔记/Ajax第二天","Ajax学习笔记/Ajax第一天","WebAPI学习笔记/JS进阶复习","WebAPI学习笔记/JS进阶第四天","WebAPI学习笔记/JS进阶第三天","WebAPI学习笔记/JS进阶第二天","WebAPI学习笔记/JS进阶第一天","WebAPI学习笔记/WebAPIs第七天","WebAPI学习笔记/WebAPIs第六天","WebAPI学习笔记/WebAPIs第五天","WebAPI学习笔记/WebAPIs第四天","WebAPI学习笔记/WebAPIs第三天","WebAPI学习笔记/WebAPIs第二天","WebAPI学习笔记/WebAPIs第一天","WebAPI学习笔记/WebAPIs学习笔记","WebAPI学习笔记/JS-ES6模块化","WebAPI学习笔记/JavaScript进阶","JavaScript学习笔记/JavaScript第五天","JavaScript学习笔记/JavaScript第四天","JavaScript学习笔记/JavaScript第三天","JavaScript学习笔记/JavaScript第二天","JavaScript学习笔记/JavaScript第一天","基础学习路线/移动开发-响应式布局","基础学习路线/移动开发-rem布局","基础学习路线/移动开发-flex布局","基础学习路线/移动开发-流式布局","基础学习路线/CSS3转换问题","基础学习路线/CSS-2D-3D转换","基础学习路线/前端168个单词","基础学习路线/CSS高级技巧","前端技术栈/前端路线","Hexo/图床方案汇总","其他技术栈/Windows软件推荐","Hexo/Butterfly主题配置","Hexo/Qexo","JavaScript/This指向与改变This指向","JavaScript/JS防抖与节流","JavaScript/如何在1分钟内完美解释什么是 JSONP 请求？","前端技术栈/移动端最佳适配解决方案","GitHub/Git常用命令","前端技术栈/来自2.5年前端小白的总结","网站资源/如何买到合适的域名","其他技术栈/CentOS一键安装Docker","网站资源/阿里云资源合集","其他技术栈/15个前端必备学习网站","其他技术栈/CSS3（圆角边框、阴影、浮动详解及示例）","网络协议/浅谈 HTTP 和 HTTPS","学习笔记/CSS属性大全","基础学习路线/CSS第五天-定位","基础学习路线/CSS第四天-浮动","基础学习路线/CSS第三天","基础学习路线/CSS第二天","基础学习路线/CSS第一天","基础学习路线/HTML第二天","基础学习路线/HTML第一天","学习笔记/「学习笔记」JavaScript基础","学习笔记/HTML与CSS进阶","Vue笔记/Vue X-数组对象的双向数据绑定","学习笔记/「学习笔记」CSS基础","学习笔记/「学习笔记」HTML基础","学习笔记/HTML基础","Windows/PE-Win10教程","Windows/Win系统网站-KMS","安卓玩机/Magisk卡刷-通刷官方-了解Fastboot","其他技术栈/前端开发免费资源大汇总","GitHub/Git基础-Github自定义域名","学习笔记/CSS笔记","Vscode/Vscode笔记-24款插件","其他技术栈/免费常用的前端CDN库","其他技术栈/软件及网站推荐","Vscode/记录 Vscode 插件","Hexo/Hexo音乐排行-Netlify CMS","GitHub/玩转GitHub","jQuery/jQuery自动触发事件与bootstrapjQuery插件用法","Hexo/使用Hexo和Github搭建个人博客","Hexo/Hexo博客搭建指南","Hexo/Hexo相关","Markdown/Markdown基础--高级教程","Markdown/Markdown基础教程"];function toRandomPost(){ pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]); };</script>