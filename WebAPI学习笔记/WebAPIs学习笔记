<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>WebAPIs学习笔记 | XC's Blog</title><noscript>开启JavaScript才能访问本站哦~</noscript><link rel="icon" href="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><!-- index.css--><link rel="stylesheet" href="/css/index.css?v=1.5.1"><!-- inject head--><link rel="stylesheet" href="https://cdn.cbd.int/solitude-source/icon/scoicon.min.css"><link rel="stylesheet" href="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.css"><!-- aplayer--><link rel="stylesheet" href="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css"><!-- swiper--><!-- Open Graph--><meta name="description" content="WebAPIs基本学习笔记 作用：使用JS操作html和浏览器 分类：DOM（文档对象模型）、BOM（浏览器对象模型） DOM的内容 DOM（Document Object Model——文档对象模型）是用来呈现以及与任意 HTML 或 XML文档交互的API 简单来说：DOM是浏览器提供的"><!-- pwa--><script>(win => {
        win.saveToLocal = {
            set: function setWithExpiry(key, value, ttl) {
                if (ttl === 0)
                    return
                const now = new Date()
                const expiryDay = ttl * 86400000
                const item = {
                    value: value,
                    expiry: now.getTime() + expiryDay,
                }
                localStorage.setItem(key, JSON.stringify(item))
            },

            get: function getWithExpiry(key) {
                const itemStr = localStorage.getItem(key)

                if (!itemStr) {
                    return undefined
                }
                const item = JSON.parse(itemStr)
                const now = new Date()

                if (now.getTime() > item.expiry) {
                    localStorage.removeItem(key)
                    return undefined
                }
                return item.value
            }
        }

        const DarkModeStatus = localStorage.getItem('theme')
        if (DarkModeStatus !== null) {
            if (DarkModeStatus === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-theme', 'light')
            }
        }

        const asideStatus = saveToLocal.get('aside-status')
        if (asideStatus !== undefined) {
            if (asideStatus === 'hide') {
                document.documentElement.classList.add('hide-aside')
            } else {
                document.documentElement.classList.remove('hide-aside')
            }
        }
    }
)(window)

console.log(
    "%c Program: Hexo %c Theme: Hexo-Theme-Solitude %c Version: v1.5.1",
    "border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#ff3842;margin:10px 0",
    "padding: 5px 10px;color:white;background:#3e9f50;",
    "border-radius:0 5px 5px 0;padding: 5px 10px;background:#0084ff;"
);</script><!-- global head--><script>const GLOBAL_CONFIG = {
    root: '/',
    algolia: undefined,
    localsearch: undefined,
    runtime: '2021-04-20 00:00:00',
    lazyload: {
        enable: true,
        error: '/img/error_load.png'
    },
    hightlight: {
        enable: true,
        limit: 200,
        expand: false,
        copy: true,
    },
    randomlinks: false,
    lang: {
        theme: {
            dark: '已切换至深色模式',
            light: '已切换至浅色模式',
        },
        copy: {
            success: '复制成功',
            error: '复制失败',
        },
        backtop: '返回顶部',
        time: {
            recent: '最近',
            yesterday: '昨天',
            berforeyesterday: '前天',
            daybefore: '天前',
            runtime: '天',
        },
        search: {
            empty: '找不到你查询的内容：${query}',
            hit: '找到 ${hits} 条结果，用时 ${time} 毫秒',
            placeholder: '输入关键词快速查找',
        },
        chs: {
            chs_to_cht: '繁體中文',
            cht_to_chs: '简体中文',
        }
    },
    aside: {
        sayhello: {
            morning: '一日之计在于晨',
            noon: '吃饱了才有力气干活',
            afternoon: '集中精力，攻克难关',
            night: '不要太劳累了，早睡更健康',
            goodnight: '睡个好觉，保证精力充沛',
        },
        sayhello2: ["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙","🤝 专修交互与设计","🏃 脚踏实地行动派","🧱 团队小组发动机","💢 壮汉人狠话不多","🎮 电竞游戏爱好者"],
    },
    covercolor: {
        enable: true
    },
    comment: {
        enable: false,
        type: '',
        commentBarrage: false,
        randomInfoStart: ["聪敏的","可爱的","美丽的"],
        randomInfoEnd: ["白菜","小可爱","小仙女"],
        twikoo: {
            url: '',
            accessToken: ''
        },
        waline: {
            url: '',
        }
    },
    lightbox: 'null',
    rightside: {
        enable: false
    },
    ai: {
        enable: true,
        key: '',
        talk: '我是王卓Sco开发的摘要生成助理ScoGPT，ScoGPT在静态部署时进行摘要的撰写，并且在访客访问时通过ScoCorrection转译后的文本摘要实现工具。我在这里只负责已经生成的摘要显示，你无法与我直接沟通，但我可以回答一些预设的问题。',
        randomPost: false,
    },
    music: {
        enable: false,
    },
    translate: undefined,
};</script><meta name="generator" content="Hexo 6.3.0"></head><body id="body"><!-- universe--><canvas id="universe"></canvas><!-- loading--><!-- console--><div id="console"><div class="close-btn" onclick="sco.hideConsole()"><i class="scoicon sco-close-fill"></i></div><div class="button-group"><div class="console-btn-item"><a class="darkmode_switchbutton" onclick="sco.switchDarkMode()" title="昼夜切换" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i></a></div><div class="console-btn-item" id="consoleHideAside"><a class="asideSwitch" onclick="sco.switchHideAside()" title="边栏显示控制" href="javascript:void(0);"><i class="scoicon sco-side-bar-fill"></i></a></div><div class="console-btn-item" id="consoleMusic" onclick="sco.musicToggle()"><a class="music-switch" title="音乐开关" href="javascript:void(0);"><i class="scoicon sco-disc-fill"></i></a></div></div><div class="console-mask" onclick="sco.hideConsole()"></div></div><!-- sidebar--><div id="sidebar" style="zoom: 1;"><div id="menu-mask" style="display: none;"></div><div id="sidebar-menus"><span class="sidebar-menu-item-title">功能</span><div class="sidebar-menu-item"><a class="darkmode_switchbutton menu-child" onclick="sco.switchDarkMode()" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i><span>显示模式</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div><span class="sidebar-menu-item-title">标签</span><div class="card-widget card-tags card-archives card-webinfo card-allinfo"><div class="card-tag-cloud"><a href="/tags/Ajax%E7%AC%94%E8%AE%B0/">Ajax笔记<sup>6</sup></a><a href="/tags/Hexo/">Hexo<sup>6</sup></a><a href="/tags/Qexo/">Qexo<sup>1</sup></a><a href="/tags/GitHub/">GitHub<sup>3</sup></a><a href="/tags/JavaScript/">JavaScript<sup>3</sup></a><a href="/tags/Markdown/">Markdown<sup>2</sup></a><a href="/tags/JavaScript%E7%AC%94%E8%AE%B0/">JavaScript笔记<sup>5</sup></a><a href="/tags/Vscode/">Vscode<sup>2</sup></a><a href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/">Vue前置基础<sup>5</sup></a><a href="/tags/Vue%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/">Vue框架笔记<sup>6</sup></a><a href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/">面试题<sup>2</sup></a><a href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/">Web APIs笔记<sup>10</sup></a><a href="/tags/JavaScript%E9%AB%98%E7%BA%A7/">JavaScript高级<sup>5</sup></a><a href="/tags/Windows/">Windows<sup>3</sup></a><a href="/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF%E6%A0%88/">其他技术栈<sup>6</sup></a><a href="/tags/jQuery/">jQuery<sup>1</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/">前端技术栈<sup>3</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CSS/">学习笔记-CSS<sup>9</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-HTML/">学习笔记-HTML<sup>2</sup></a><a href="/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/">前端经验<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/">前端笔记<sup>3</sup></a><a href="/tags/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/">网站资源<sup>2</sup></a><a href="/tags/%E5%AE%89%E5%8D%93%E7%8E%A9%E6%9C%BA/">安卓玩机<sup>1</sup></a><a href="/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/">网络协议<sup>1</sup></a></div></div></div></div><!-- keyboard--><div class="post" id="body-wrap"><header class="post-bg" id="page-header"><nav class="show" id="nav"><div id="nav-group"><div id="blog_name"><a id="site-name" href="/" title="返回博客主页"><span class="title">XC's Blog</span></a></div><div id="page-name-mask"><div id="page-name"><a id="page-name-text" onclick="sco.toTop()">WebAPIs学习笔记</a></div></div><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div></div><div id="nav-left"></div><div id="nav-right"><div class="nav-button" id="randomPost_button"><a class="site-page" onclick="toRandomPost()" title="随机一篇文章" href="javascript:void(0);"><i class="scoicon sco-signal-tower-fill"></i></a></div><div class="nav-button" id="nav-console"><a class="console_switchbutton" onclick="sco.showConsole()" title="中控台" href="javascript:void(0);"><i class="scoicon sco-dashboard-fill"></i></a></div><div class="nav-button" id="nav-totop" onclick="sco.toTop()"><a class="totopbtn"><i class="scoicon sco-arrow-up-line"></i><span id="percent">0</span></a></div><div id="toggle-menu"><a class="site-page"><i class="scoicon sco-menu-line"></i></a></div></div></div></nav><div class="coverdiv" id="coverdiv"><img class="nolazyload" id="post-cover" src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="WebAPIs学习笔记"></div><div id="post-info"><div id="post-firstinfo"><div class="meta-firstline"><a class="post-meta-original" title="该文章为原创文章，注意版权协议">原创</a><span class="post-meta-categories"><a class="post-meta-categories" href="/categories/Web-APIs笔记/">Web APIs笔记</a></span><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/"><span class="tags-name tags-punctuation">Web APIs笔记</span></a></div></div></div></div><h1 class="post-title">WebAPIs学习笔记</h1><div id="post-meta"><div class="meta-secondline"></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><div class="post-ai"><div class="ai-title"><div class="ai-title-left"><i class="ai-title-icon scoicon sco-robot-fill"></i><div class="ai-title-text">文章摘要</div></div><div class="ai-tag" id="ai-tag">GPT 4</div></div><div class="ai-explanation" style="display: block;"></div><div class="ai-suggestions"></div><div class="ai-bottom"><div class="ai-tips">此内容根据文章生成，并经过人工审核，仅用于文章内容的解释与总结</div><a class="ai-report" title="投诉" target="_blank" rel="noopener" href="https://blog.wzsco.top/about/">投诉</a></div></div><article class="post-content" id="article-container"><h2 id="WebAPIs基本学习笔记"><a href="#WebAPIs基本学习笔记" class="headerlink" title="WebAPIs基本学习笔记"></a>WebAPIs基本学习笔记</h2><ul>
<li>作用：使用JS操作html和浏览器</li>
<li>分类：DOM（文档对象模型）、BOM（浏览器对象模型）</li>
</ul>
 <img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220626113415737.png" style="zoom: 33%;" />

<h2 id="DOM的内容"><a href="#DOM的内容" class="headerlink" title="DOM的内容"></a>DOM的内容</h2><ul>
<li>DOM（Document Object Model——文档对象模型）是用来呈现以及与任意 HTML 或 XML文档交互的API</li>
<li>简单来说：DOM是浏览器提供的一套专门用来 操作网页内容 的功能</li>
<li>作用：开发网页内容特效和实现用户交互</li>
</ul>
<h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><ul>
<li><p>内容：将HTML以树状的内容直观显示出来，也称文档树</p>
</li>
<li><p>作用：直观体现出标签与标签的关系</p>
</li>
</ul>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    文本</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/0d429a429c4b10f6ba024de35a73da88b39e4b6e76b0f7bd95697db1ceaab0b5.gif"  style="zoom: 33%;" />



<h2 id="获取DOM元素"><a href="#获取DOM元素" class="headerlink" title="获取DOM元素"></a>获取DOM元素</h2><ul>
<li><p>CSS选择器     匹配到第一个元素，返回一个HTMLElement对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;CSS选择器&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>匹配多个选择器，返回NodeList对象集合，得到是一个伪数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;CSS选择器&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>其他方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByid</span>(<span class="string">&#x27;id名&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByClassName</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="设置和修改DOM元素"><a href="#设置和修改DOM元素" class="headerlink" title="设置和修改DOM元素"></a>设置和修改DOM元素</h2><ul>
<li><p>修改标签文本内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line">元素.<span class="property">innerText</span>=<span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="comment">//只能识别内容，不能解释标签</span></span><br><span class="line"><span class="comment">//可以解析标签 即：</span></span><br><span class="line">元素.<span class="property">innerHTML</span>=<span class="string">&#x27;&lt;h3&gt;会对html标签进行解析&lt;/h3&gt;&#x27;</span> </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="设置与修改DOM元素的属性"><a href="#设置与修改DOM元素的属性" class="headerlink" title="设置与修改DOM元素的属性"></a>设置与修改DOM元素的属性</h2><ul>
<li><p>语法：<code>对象.属性=值</code>，最常见的属性比如： <strong>href</strong>、<strong>title</strong>、<strong>src</strong> 等</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">let</span> pic =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">pic.<span class="property">src</span>=<span class="string">&#x27;./images/pic2.jpg&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过<strong>style</strong>修改CSS属性 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span>=<span class="string">&#x27;300px&#x27;</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">paddingLeft</span> =<span class="string">&#x27;300px&#x27;</span></span><br><span class="line"><span class="comment">//注：有链接-符号的需要转换为小驼峰命名法</span></span><br><span class="line"><span class="comment">//即：padding-left--&gt;paddingLeft</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改标签类名</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="property">clssName</span>=<span class="string">&#x27;新类名&#x27;</span></span><br><span class="line"><span class="comment">//注：直接使用 className 赋值会覆盖以前的类名</span></span><br><span class="line"><span class="comment">//保留可写</span></span><br><span class="line">元素.<span class="property">clssName</span>=<span class="string">&#x27;旧类名 新类名&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过<strong>clssList</strong>操作css类名</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加一个类名</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//删除一个类</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//切换一个类,存在就删除,不存在就增加</span></span><br><span class="line">元素.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="修改表单属性"><a href="#修改表单属性" class="headerlink" title="修改表单属性"></a>修改表单属性</h2><ul>
<li><p>作用：表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p>
</li>
<li><p>获取：DOM对象.属性名；设置：DOM对象.属性名=新值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表单.<span class="property">value</span>=<span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">表单.<span class="property">type</span>=<span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>表单属性中添加就有效果,移除就没有效果,一律使用布尔值表示 如果为true 代表添加了该属性 如果是false 代表移除了该属性<br>比如： disabled、checked、selected</p>
</li>
</ul>
<h2 id="定时器-setInterval-间歇函数"><a href="#定时器-setInterval-间歇函数" class="headerlink" title="定时器-setInterval() 间歇函数"></a>定时器-<strong>setInterval()</strong> 间歇函数</h2><ul>
<li><p>开启定时器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(函数，间隔时间) <span class="comment">//时间也毫秒为单位，1秒==1000ms</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭定时器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer =<span class="built_in">setInterval</span>(函数，间隔时间)</span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote>
<p>事件是在编程时系统内发生的动作或者发生的事情，比如用户在网页上单击一个按钮</p>
</blockquote>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><blockquote>
<p>让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为 注册事件</p>
</blockquote>
<p>语法：<code>元素.addEventListener(&#39;事件&#39;,要执行的函数)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">let</span> btn=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="comment">//事件监听</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;被点击了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>事件监听三要素：</p>
<ul>
<li>事件源：那个dom元素被事件触发了，要获取dom元素</li>
<li>事件：有什么方式触发，比如鼠标点击<strong>click</strong></li>
<li>事件触发时调用的函数</li>
</ul>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><ul>
<li><p>DOM L0</p>
<p>语法：<code>事件源.on事件=function()&#123;&#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&#x27;点击&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>DOM L2  :star:</p>
<p>语法：<code>事件源.addEventlistener(事件，事件处理函数)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;点击&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3> <img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220702092821996.png" style="zoom:33%;" />

 

<hr>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote>
<p>高阶函数可以被简单理解为函数的高级应用，JavaScript 中函数可以被当成【值】来对待，基于这个特性实现函数的高级应用</p>
</blockquote>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter=<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> result=<span class="title function_">counter</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><blockquote>
<p>如果将函数A当作参数传递给函数B时，我们称函数A为回调函数</p>
<p>回调函数本质还是函数，只不过把它当成参数使用</p>
</blockquote>
<p>使用场景</p>
<ul>
<li><p>定时器<strong>setInterval()</strong> 间歇函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我是回调函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fn传递了给setInterval ，fn就是回调函数</span></span><br><span class="line"><span class="built_in">setInterval</span>(fn,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>事件监听</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&#x27;我是回调函数&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><blockquote>
<p>环境对象指的是函数内部特殊的变量 this ，它代表着当前函数运行时所处的环境<br>作用：弄清楚this的指向，可以让我们代码更简洁</p>
</blockquote>
<ul>
<li>函数的调用方式不同，this 指代的对象也不同</li>
<li>【谁调用， this 就是谁】 是判断 this 指向的粗略规则</li>
<li>直接调用函数，其实相当于是 window.函数，所以 this 指代 window</li>
</ul>
<hr>
<h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><p>当前元素为A状态,其他元素为B状态</p>
<p>使用：</p>
<ol>
<li>干掉所有人<br>使用for循环</li>
<li>复活他自己<br>通过this或者下标找到自己或者对应的元素</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给点击的li加上pink类</span></span><br><span class="line">&lt;li <span class="keyword">class</span>=<span class="string">&#x27;pink&#x27;</span>&gt;第一个&lt;/li&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"> 	 <span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">           lis[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="comment">// 干掉所有人</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; btns.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                 btns[j].<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">              &#125;</span><br><span class="line">               <span class="comment">//复活自己</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">               <span class="comment">//==================分割线===========================</span></span><br><span class="line">               <span class="comment">//高级做法</span></span><br><span class="line">               <span class="comment">// 我只需要找出那个唯一的 pink类，删除</span></span><br><span class="line">               <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pink&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">               <span class="comment">// 我的</span></span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="DOM结点"><a href="#DOM结点" class="headerlink" title="DOM结点"></a>DOM结点</h2><blockquote>
<p>DOM树里每一个内容都称之为节点</p>
</blockquote>
<p>结点类型</p>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220702101440879.png" style="zoom:33%;" />

<ul>
<li><p>元素结点 :star:</p>
<p>所有的标签：比如 <code>body</code> <code>div</code>，<code>html</code>是根节点</p>
</li>
<li><p>属性结点</p>
<p>所有的属性，比如 <code>herf</code></p>
</li>
<li><p>文本结点</p>
<p>所有的文本</p>
</li>
</ul>
<h3 id="结点的查找"><a href="#结点的查找" class="headerlink" title="结点的查找"></a>结点的查找</h3><p>结点的关系：父节点，子节点，兄弟节点</p>
<ul>
<li><p>父节点的查找</p>
<p>使用<code>parentNode</code>属性，返回最近一级的父节点，找不到返回<strong>null</strong></p>
<p>语法：<code>子元素.parentNode</code></p>
</li>
<li><p>子结点的查找</p>
<p><code>childNodes</code> - 获得所有的子节点，包括文本节点（空格、换行）、注释节点等</p>
<p><code>chilrden</code> :star:  -获得所有元素节点，返回的还是一个伪数组</p>
</li>
<li><p>兄弟结点的查找</p>
<p><code>nextElementSibling</code>  查找下一个兄弟结点</p>
<p><code>previousElementSibling</code>  查找上一个兄弟节点</p>
</li>
</ul>
<h3 id="结点的增加"><a href="#结点的增加" class="headerlink" title="结点的增加"></a>结点的增加</h3><blockquote>
<p>一般情况下，我们新增节点，按照如下操作</p>
<p>1创建一个新的节点</p>
<p>2把创建的新的节点放入到指定的元素内部</p>
</blockquote>
<ul>
<li><p>创建结点</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">documnet.<span class="title function_">createElement</span>(<span class="string">&#x27;标签名&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>追加结点</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入父元素的最后</span></span><br><span class="line">父元素.<span class="title function_">appendChild</span>(要插入的元素)</span><br><span class="line"><span class="comment">//插到某个子元素的前面</span></span><br><span class="line">父元素.<span class="title function_">insertBefore</span>(要插入的元素,在哪个元素的前面)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="结点的克隆"><a href="#结点的克隆" class="headerlink" title="结点的克隆"></a>结点的克隆</h3><blockquote>
<p>cloneNode会克隆出一个跟原标签一样的元素，括号内传入布尔值<br>若为true，则代表克隆时会包含后代节点一起克隆<br>若为false，则代表克隆时不包含后代节点<br>默认为false</p>
</blockquote>
<p><strong>语法</strong>：<code>元素.cloneNode(布尔值)</code></p>
<h3 id="结点的删除"><a href="#结点的删除" class="headerlink" title="结点的删除"></a>结点的删除</h3><blockquote>
<p>删除节点和隐藏节点（display:none） 有区别的： 隐藏节点还是存在的，但是删除，则从html中删除节点在 JavaScript 原生DOM操作中，要删除元素必须通过父元素删除</p>
</blockquote>
<p><strong>语法</strong>：<code>父元素.removeChild(要删除的元素)</code></p>
<hr>
<h2 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h2><p>浏览器进行界面渲染</p>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220702104807814.png"  style="zoom: 33%;" />

<ul>
<li>解析（Parser）HTML，生成DOM树(DOM Tree)</li>
<li>同时解析（Parser） CSS，生成样式规则 (Style Rules)</li>
<li>根据DOM树和样式规则，生成渲染树(Render Tree)</li>
<li>进行布局 Layout(回流/重排):根据生成的渲染树，得到节点的几何信息（位置，大小）</li>
<li>进行绘制 Painting(重绘): 根据计算和获取的信息进行整个页面的绘制</li>
<li>Display: 展示在页面上</li>
</ul>
<h3 id="回流-重排"><a href="#回流-重排" class="headerlink" title="回流(重排)"></a>回流(重排)</h3><blockquote>
<p>当 Render Tree 中部分或者全部元素的尺寸、结构、布局等发生改变时，浏览器就会重新渲染部分或全部文档的过程称为回流，简单理解影响到布局了，就会有回流</p>
</blockquote>
<p>会导致回流的操作</p>
<ul>
<li>页面的首次刷新</li>
<li>浏览器的窗口大小发生改变</li>
<li>元素的大小或位置发生改变</li>
<li>改变字体的大小</li>
<li>内容的变化（如：input框的输入，图片的大小）</li>
<li>激活css伪类 （如：:hover）</li>
<li>脚本操作DOM（添加或者删除可见的DOM元素）</li>
</ul>
<h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><blockquote>
<p>由于节点(元素)的样式的改变并不影响它在文档流中的位置和文档布局时(比如：color、background-color、<br>outline等), 称为重绘</p>
</blockquote>
<p><strong>注：</strong>重绘不一定引起回流，而回流一定会引起重绘。</p>
<p>练习：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">stlye</span></span><br><span class="line">s.<span class="property">padding</span> = <span class="string">&#x27;2px&#x27;</span> <span class="comment">//重排 + 重绘</span></span><br><span class="line">s.<span class="property">border</span> = <span class="string">&#x27;1px solid red&#x27;</span> <span class="comment">// 重排 + 重绘</span></span><br><span class="line">s.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span><span class="comment">//重绘</span></span><br><span class="line">s.<span class="property">backgroundColor</span> = <span class="string">&#x27;#666&#x27;</span> <span class="comment">//重绘</span></span><br><span class="line">s.<span class="property">fontSize</span>= <span class="string">&quot;14px&quot;</span> <span class="comment">// 重排 + 重绘</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote>
<p>内容：事件对象是个对象，这个对象里有事件触发时的相关信息</p>
<p>例如：鼠标点击事件中，事件对象就存了鼠标点在哪个位置等信息</p>
</blockquote>
<p>获取方法：</p>
<ul>
<li><p>在事件绑定的回调函数的第一个参数就是事件对象</p>
</li>
<li><p>一般命名为 even 、ev 、e</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">//e就是事件对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>常用事件对象的属性</p>
<ul>
<li><code>type</code> ：获取当前事件类型</li>
<li><code>clientX</code> / <code>clientY</code> ：获得光标相对于浏览器可见窗口左上角的位置</li>
<li><code>offsetX</code> / <code>offsetY</code> :   获取光标相对于当前DOM元素左上角的位置</li>
<li><code>key</code> ：用户按下的键盘的值，现在不提倡用 <strong>keyCode</strong></li>
</ul>
<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><blockquote>
<p>事件流指的是事件完整执行过程的流动路径，两个阶段：事件捕获和事件冒泡</p>
</blockquote>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220703184458601.png" style="zoom: 33%;" />

<ul>
<li><p>说明：假设页面里有个div，当触发事件时，会经历两个阶段，分别是捕获阶段、冒泡阶段</p>
</li>
<li><p>简单来说：捕获阶段是 从父到子 冒泡阶段是从子到父</p>
</li>
</ul>
<p><strong>事件冒泡</strong></p>
<blockquote>
<p>  当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发</p>
<p>  简单理解：当一个元素触发事件后，会依次向上调用所有父级元素的同名事件</p>
<p>  事件冒泡是默认存在的</p>
</blockquote>
<p><strong>事件捕获</strong></p>
<blockquote>
<p>从DOM的根元素开始去执行对应的事件 (从外到里)</p>
</blockquote>
<p>说明：</p>
<ul>
<li>addEventListener第三个参数传入true代表是捕获阶段触发（很少使用）</li>
<li>若传入false代表冒泡阶段触发，默认就是false</li>
<li>若是用 L0 事件监听，则只有冒泡阶段，没有捕获</li>
</ul>
<p><strong>阻止事件流动</strong></p>
<ul>
<li>因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素</li>
<li>若想把事件就限制在当前元素内，就需要阻止事件流动</li>
<li>阻止事件流动需要拿到事件对象</li>
<li>语法：<code>事件对象.stopProagation()</code></li>
<li>此方法可以阻断事件流动传播，不光在冒泡阶段有效，捕获阶段也有效</li>
</ul>
<p><strong>鼠标经过事件</strong>：</p>
<ul>
<li><p><code>mouseover </code>和 <code>mouseout</code> 会有冒泡效果</p>
</li>
<li><p><code>mouseenter</code> 和 <code>mouseleave</code>  没有冒泡效果(推荐)</p>
</li>
</ul>
<p><strong>两种注册事件的区别：</strong></p>
<ul>
<li><p>传统on注册（L0）</p>
<ul>
<li>同一个对象,后面注册的事件会覆盖前面注册(同一个事件)</li>
<li>直接使用null覆盖偶就可以实现事件的解绑</li>
<li>都是冒泡阶段执行的</li>
</ul>
</li>
<li><p>事件监听注册（L2）</p>
<ul>
<li><p>语法: addEventListener(事件类型, 事件处理函数, 是否使用捕获)</p>
</li>
<li><p>后面注册的事件不会覆盖前面注册的事件(同一个事件)</p>
</li>
<li><p>可以通过第三个参数去确定是在冒泡或者捕获阶段执行</p>
</li>
<li><p>必须使用removeEventListener(事件类型, 事件处理函数, 获取捕获或者冒泡阶段)</p>
</li>
<li><p>匿名函数无法被解绑</p>
</li>
</ul>
</li>
</ul>
<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><blockquote>
<p>事件委托其实是利用事件冒泡的特点， 给父元素添加事件，子元素可以触发</p>
</blockquote>
<ul>
<li><p><strong>优点：</strong>给父级元素加事件（可以提高性能）</p>
</li>
<li><p><strong>实现：</strong><code>事件对象.target </code>可以获得真正触发事件的元素</p>
</li>
</ul>
<hr>
<h2 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h2><blockquote>
<p> 作用：很多网页需要检测用户把页面滚动到某个区域后做一些处理， 比如固定导航栏，比如返回顶部</p>
</blockquote>
<p><strong>事件名</strong> <code>scroll</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以给window或document添加滚动事件来监听整个页面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//要执行的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h2><h3 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h3><ul>
<li><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p>
</li>
<li><p>为什么要学？</p>
<ul>
<li>有些时候需要等页面资源全部处理完了做一些事情</li>
<li>老代码喜欢把  script  写在  head  中，这时候直接找  dom  元素找不到</li>
</ul>
</li>
<li><p>事件名：<code>load</code></p>
</li>
<li><p>监听页面所有资源加载完毕：</p>
<ul>
<li><p>给 window 添加 load 事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//要执行的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意：不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定load事件</p>
</li>
</ul>
<h3 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h3><ul>
<li><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而<strong>无</strong>需等待样式表全加载</p>
</li>
<li><p>事件名：<code>DOMContentLoaded</code></p>
</li>
<li><p>监听页面DOM加载完毕：</p>
<ul>
<li><p>给 document 添加 DOMContentLoaded 事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//要执行的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h2 id="元素大小和位置"><a href="#元素大小和位置" class="headerlink" title="元素大小和位置"></a>元素大小和位置</h2><p><strong>三大家族</strong></p>
<ul>
<li>scroll家族</li>
<li>offest家族</li>
<li>client家族</li>
</ul>
<h3 id="scroll家族"><a href="#scroll家族" class="headerlink" title="scroll家族"></a>scroll家族</h3><blockquote>
<p>作用：检测页面滚动的距离</p>
</blockquote>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220710212619434.png"  style="zoom: 33%;" />

<ul>
<li><p>获取宽高</p>
<ul>
<li> 获取元素的<strong>内容总宽高（不包含滚动条）</strong>返回值不带单位</li>
<li> scrollWidth 和 scrollHeight</li>
</ul>
</li>
<li><p>获取位置（属性可修改）</p>
<ul>
<li>获取元素内容往左、往上滚出去看不到的距离</li>
<li>scrollLeft和scrollTop</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">scrollTop</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注：<code>document.documentElement</code> ：HTML 文档返回对象为HTML元素</p>
</li>
</ul>
<h3 id="offest家族"><a href="#offest家族" class="headerlink" title="offest家族"></a>offest家族</h3><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220710213109240.png" style="zoom:33%;" />

<ul>
<li>获取宽高<ul>
<li> 获取元素的自身宽高、包含元素自身设置的宽高、padding、border</li>
<li> offsetWidth 和 offsetHeight</li>
</ul>
</li>
<li>获取位置（只读，不可修改）<ul>
<li>获取元素距离自己定位父级元素的左、上距离</li>
</ul>
</li>
</ul>
<h3 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h3><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220710213252589.png"  style="zoom: 33%;" />

<ul>
<li>获取宽高<ul>
<li>获取元素的可见部分宽高（不包含边框，滚动条等）</li>
<li>clientWidth和clientHeight</li>
</ul>
</li>
<li>位置<ul>
<li> clientLeft和clientTop 注意是只读属性</li>
</ul>
</li>
</ul>
<p><code>resize</code>事件</p>
<ul>
<li>改变窗口大小的时候触发的事件，类似css3媒体查询</li>
</ul>
<hr>
<h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><blockquote>
<p>浏览器对象模型</p>
</blockquote>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713111536299.png"  style="zoom: 33%;" />

<ul>
<li><p>window 是浏览器内置的全局对象，我们所学习的 web apis 的知识内容都是基于 window 对象实现的</p>
</li>
<li><p>window 对象下包含了 <code>navigator</code> 、<code>location</code> 、<code>doucment</code>   <code>history</code> 、 <code>srceen</code> 5个属性，即 BOM</p>
</li>
<li><p>document 是实现 DOM 的基础，它其实是依附于 window 的属性</p>
</li>
<li><p>依附于 window 对象的所有属性和方法，使用时可以省略 window</p>
</li>
</ul>
<h3 id="定时器-延时函数"><a href="#定时器-延时函数" class="headerlink" title="定时器-延时函数"></a>定时器-延时函数</h3><blockquote>
<p> JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p>
</blockquote>
<p>语法：<code>setTimeout(回调函数,等待的毫秒数)</code></p>
<p><strong>setTimeout</strong> 仅执行一次，简单来说把一段代码延迟执行</p>
<p>清除延时函数语法 ：<code>clearTimeout(延时函数的id)</code></p>
<p>结合函数的递归可以实现 setInterval 间歇函数 一样的功能</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInterval</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> d=<span class="keyword">new</span> <span class="title function_">date</span>();</span><br><span class="line">    <span class="comment">//写入页面</span></span><br><span class="line">    clock.<span class="property">innertext</span>=d.<span class="title function_">toLocaleString</span>();</span><br><span class="line">    <span class="comment">//调用自己 一直循环，倒计时效果</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(myInterval,<span class="number">1000</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myInterval</span>();</span><br></pre></td></tr></table></figure>



<h3 id="JS执行机制-（面试）-star"><a href="#JS执行机制-（面试）-star" class="headerlink" title="JS执行机制 （面试）:star:"></a>JS执行机制 （面试）:star:</h3><blockquote>
<p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。。这是因为 Javascript 这<br>门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比<br>如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</p>
</blockquote>
<blockquote>
<p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问<br>题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p>
</blockquote>
<p>同步和异步</p>
<blockquote>
<p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许<br>JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p>
</blockquote>
<ul>
<li><p>同步</p>
<ul>
<li>前一个任务执行完才执行后一个任务，程序执行的顺序和代码排列顺序一样</li>
</ul>
</li>
<li><p>异步</p>
<ul>
<li><p>执行一个某个任务费很长时间，在做这个任务的同时，还可以去处理其他的任务</p>
<p>比如：做饭时，等水开的期间可以去其他事，比如切菜</p>
</li>
</ul>
</li>
<li><p>他们的本质区别： 这条流水线上各个流程的执行顺序不同。</p>
</li>
</ul>
<hr>
<ul>
<li><p>同步任务</p>
<ul>
<li>同步任务都在主线程上执行，形成一个执行栈。</li>
</ul>
</li>
<li><p>异步任务</p>
<ul>
<li><p>JS 的异步是通过回调函数实现的</p>
</li>
<li><p>一般来说异步任务有以下三种类型</p>
<p>1、普通事件，如 click、resize 等<br>2、资源加载，如 load、error 等<br>3、定时器，包括 setInterval、setTimeout 等</p>
</li>
<li><p>异步任务相关会添加的任务队列（消息队列）中</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>执行机制</strong></p>
<ol>
<li>先执行执行栈里面的同步任务</li>
<li>异步任务放在消息队列中</li>
<li>一旦执行栈的执行任务完毕，系统会依次读取消息队列里的异步任务，被读取的异步任务<br>结束等待状态，进入执行栈，开始执行</li>
</ol>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713115651765.png"  style="zoom: 33%;" />

<p><strong>事件循环</strong>（event loop）</p>
<blockquote>
<p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）</p>
</blockquote>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713115913074.png" style="zoom:33%;" />

<hr>
<h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><blockquote>
<p>location 的数据类型是对象，它拆分并保存了 URL 地址的各个组成部分</p>
</blockquote>
<p> <strong>常用属性和方法：</strong></p>
<ul>
<li> href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</li>
<li> search 属性获取地址中携带的参数，符号 ？后面部分</li>
<li> hash 属性获取地址中的啥希值，符号 # 后面部分</li>
<li> reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新</li>
</ul>
<p>语法：<code>loaction.属性</code>  <code>loactiom.方法()</code></p>
<h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><blockquote>
<p>navigator的数据类型是对象，该对象下记录了浏览器自身的相关信息</p>
</blockquote>
<p> 常用属性和方法： 通过 userAgent 检测浏览器的版本及平台</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测 userAgent（浏览器信息）</span></span><br><span class="line">!(function () &#123;</span><br><span class="line"><span class="type">const</span> <span class="variable">userAgent</span> <span class="operator">=</span> navigator.userAgent</span><br><span class="line"><span class="comment">// 验证是否为Android或iPhone</span></span><br><span class="line"><span class="type">const</span> <span class="variable">android</span> <span class="operator">=</span> userAgent.match(/(Android);?[\s\/]+([\d.]+)?/)</span><br><span class="line"><span class="type">const</span> <span class="variable">iphone</span> <span class="operator">=</span> userAgent.match(/(iPhone\sOS)\s([\d_]+)/)</span><br><span class="line"><span class="comment">// 如果是Android或iPhone，则跳转至移动站点</span></span><br><span class="line"><span class="keyword">if</span> (android || iphone) &#123;</span><br><span class="line">location.href = <span class="string">&#x27;http://m.itcast.cn&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>



<h3 id="histroy对象"><a href="#histroy对象" class="headerlink" title="histroy对象"></a>histroy对象</h3><blockquote>
<p>history 的数据类型是对象，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</p>
</blockquote>
<table>
<thead>
<tr>
<th>history对象和方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>可以后退功能</td>
</tr>
<tr>
<td>forward()</td>
<td>可以前进功能</td>
</tr>
<tr>
<td>go(参数)</td>
<td>前进，后退功能，参数决定，-1后退，1前进</td>
</tr>
</tbody></table>
<h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><blockquote>
<p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在<br>本地存储大量的数据，HTML5规范提出了相关解决方案</p>
</blockquote>
<ol>
<li>数据存储在用户浏览器中</li>
<li>设置、读取方便、甚至页面刷新不丢失数据</li>
<li>容量较大，sessionStorage和localStorage约 5M 左右</li>
</ol>
<p><strong>localStorage</strong></p>
<ol>
<li>生命周期永久生效，除非手动删除 否则关闭页面也会存在</li>
<li>可以多窗口（页面）共享（同一浏览器可以共享）</li>
<li>以键值对的形式存储使用</li>
</ol>
<p>语法</p>
<ul>
<li>存储数据：<code>localStorage.setItem(key, value)</code></li>
<li>获取数据：<code>localStorage.getItem(key)</code></li>
<li>删除数据：<code>localStorage.removeItem(key)</code></li>
</ul>
<p>存储复杂数据类型存储：</p>
<blockquote>
<p>本地只能存储字符串,无法存储复杂数据类型.需要将复杂数据类型转换成JSON字符串,在存储到本地</p>
</blockquote>
<p><strong>JSON.stringify(复杂数据类型) ：</strong></p>
<p>将复杂数据转换成JSON字符串 <strong>存储</strong> 本地存储中</p>
<p><strong>JSON.parse(JSON字符串)：</strong></p>
<p>将JSON字符串转换成对象 <strong>取出</strong> 时候使用</p>
<hr>
<p>sessionStorage（了解）<br>     1. 生命周期为关闭浏览器窗口<br>     2. 在同一个窗口(页面)下数据可以共享<br>     3. 以键值对的形式存储使用<br>    4. 用法跟localStorage 基本相同</p>
<h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>固有属性：</p>
<blockquote>
<p>标签天生自带的属性 比如class id title等, 可以直接使用点语法操作</p>
</blockquote>
<p>自定义属性:</p>
<blockquote>
<p>由程序员自己添加的属性,在DOM对象中找不到, 无法使用点语法操作,必须使用专门的API</p>
</blockquote>
<ul>
<li>获取自定义属性 ：<code>getAttribute(&#39;属性名&#39;)</code></li>
<li>设置自定义属性：<code>setAttribute(&#39;属性名&#39;, &#39;属性值&#39;)</code></li>
<li>删除自定义属性：<code>removeAttribute(&#39;属性名&#39;) </code></li>
</ul>
<p>data-自定义属性：</p>
<blockquote>
<p>传统的自定义属性没有专门的定义规则,开发者随意定值,不够规范,所以在html5中推出来了专门的data-自定义属性 在标签上一律以data-开头</p>
</blockquote>
<p>在DOM对象上一律以dataset对象方式获取</p>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713122248633.png" style="zoom:33%;" />

<hr>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote>
<p>正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象</p>
</blockquote>
<p>正则表达式在 JavaScript中的使用场景：</p>
<ul>
<li>例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)</li>
<li>比如用户名: <code> /^[a-z0-9_-]&#123;3,16&#125;$/</code></li>
<li>过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><strong>使用</strong>：</p>
<ol>
<li>定义规则</li>
<li>查找</li>
</ol>
<p><strong>语法</strong>：<code>let 变量名=/表达式/</code></p>
<ul>
<li>/ / 是正则表达式字面量，比如 ：<code>let reg=/abc/</code></li>
</ul>
<p><strong>判断</strong>：</p>
<ul>
<li><p>test() 方法 用来查看正则表达式与指定的字符串是否匹配 ，返回 false 或 true</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello ,world&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/hello/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li>
<li><p>exec() 方法 在一个指定字符串中执行一个搜索匹配</p>
<p>如果匹配成功，exec() 方法返回一个数组，否则返回null</p>
</li>
</ul>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><blockquote>
<p>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</p>
</blockquote>
<ul>
<li><p>比如，规定用户只能输入英文26个英文字母，普通字符的话 abcdefghijklm…..</p>
<p>但是换成元字符写法： [a-z]</p>
</li>
</ul>
<p><strong>方便记忆和学习，众多的元字符进行了分类：</strong></p>
<ol>
<li><p><strong>边界符</strong>（表示位置，开头和结尾，必须用什么开头，用什么结尾）</p>
<p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220714135805923.png" style="zoom:50%;" />

<p><strong>注意</strong>：如果 <code>^</code> 和 <code>$</code>在一起，表示必须是精确匹配。</p>
</li>
<li><p><strong>量词</strong> （表示重复次数）</p>
<p>量词用来 设定某个模式出现的次数</p>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220714135915669.png" style="zoom: 50%;" />

<p><strong>注意</strong>： 逗号左右两侧千万不要出现空格</p>
</li>
<li><p><strong>字符类</strong> （比如  <code>\d</code>  表示 0~9）</p>
<ul>
<li><p><code>-</code> 连字符</p>
<p>使用连字符 <code>-</code> 表示一个范围</p>
</li>
<li><p><input disabled="" type="checkbox">  比如：</p>
<ol>
<li>[a-z] 表示 a 到 z 26个英文字母都可以</li>
<li>[a-zA-Z] 表示大小写都可以</li>
<li>[0-9] 表示 0~9 的数字都可以</li>
</ol>
</li>
<li><p><input disabled="" type="checkbox">  [ ] 里面加上 <code>^</code> 取反符号<br>比如：<br><code>[^a-z] </code>匹配除了小写字母以外的字符<br>  注意要写到中括号里面</p>
</li>
<li><p><code>. </code>  匹配除换行符之外的任何单个字符</p>
</li>
<li><p><input disabled="" type="checkbox">  预定义：指的是某些常见模式的简写方式</p>
</li>
</ul>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220714140426304.png" style="zoom:50%;" /></li>
<li><p><strong>修饰符</strong></p>
<p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p>
<p>语法：</p>
<p><code>/表达式/修饰符</code></p>
<p> i  是单词 ignore 的缩写，正则匹配时字母不区分大小写<br>g  是单词 global 的缩写，匹配所有满足正则表达式的结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>替换 replace 替换：（过滤敏感词）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="title function_">replace</span>(<span class="regexp">/正则表达式/</span>，<span class="string">&#x27;替换的文本&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</article><div class="post-copyright"><div class="post-copyright__author_group"><a class="post-copyright__author_img" href="/about/"><img class="post-copyright__author_img_front" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"></a><div class="post-copyright__author_name">XC's Blog</div><div class="post-copyright__author_desc"></div></div><div class="post-tools" id="post-tools"><div class="post-tools-left"><div id="quit-box" onclick="RemoveRewardMask()"></div></div></div><div class="post-copyright__notice"><span class="post-copyright-info">本文是原创文章，采用<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</a>协议，完整转载请注明来自<a href="/">XC's Blog</a></span></div></div><div class="post-tools-right"><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/"><span class="tags-punctuation"></span>Web APIs笔记<span class="tagsPageCount">10</span></a></div></div></div><nav class="needEndHide pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E4%B8%80%E5%A4%A9"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">Web APIs第一天</div></div></a></div><div class="next-post pull-right"><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS-ES6%E6%A8%A1%E5%9D%97%E5%8C%96"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">ES6模块化与异步编程</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="scoicon sco-star-smile-fill"></i><span>喜欢这篇的人也看了</span><div class="relatedPosts-link"><a onclick="event.preventDefault(); toRandomPost();" href="javascript:void(0);" rel="external nofollow" data-pjax-state="">随便逛逛</a></div></div><div class="relatedPosts-list"><div><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E4%B8%83%E5%A4%A9" title="Web APIs第七天"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="cover"><div class="content is-center"><div class="title">Web APIs第七天</div></div></a></div><div><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E5%85%AD%E5%A4%A9" title="Web APIs第六天"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="cover"><div class="content is-center"><div class="title">Web APIs第六天</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="card-content"><div class="card-info-avatar is-center"><div class="author-info__top-group"><div class="author-info__sayhi" id="author-info__sayhi" onclick="sco.changeSayHelloText()">sayhello.morning</div></div></div><div class="avatar-img-group"><img class="avatar-img" alt="头像" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><div class="avatar-sticker"><img class="avatar-sticker-img" data-lazy-src="https://bu.dusays.com/2023/12/30/659011053e246.png" alt="心情贴纸"></div></div><div class="author-info__description_group"><div class="author-info__description">分享自己对编程的<b>热爱</b>，对美好生活的<b>向往</b>，对知识海洋<b>探索历程</b>。</div><div class="author-info__description2">相信你可以在这里找到对你有用的知识和教程。</div></div><div class="author-info__bottom-group"><a class="author-info__bottom-group-left" href="/about/"><div class="author-info__name">XC's Blog</div><div class="author-info__desc"></div></a><div class="card-info-social-icons is-center"></div></div></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="scoicon sco-menu-line"></i><span>文章目录</span></div><div class="toc-content" id="toc-content"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#WebAPIs%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0"><span class="toc-text">WebAPIs基本学习笔记</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#DOM%E7%9A%84%E5%86%85%E5%AE%B9"><span class="toc-text">DOM的内容</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#DOM%E6%A0%91"><span class="toc-text">DOM树</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%8E%B7%E5%8F%96DOM%E5%85%83%E7%B4%A0"><span class="toc-text">获取DOM元素</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%AE%BE%E7%BD%AE%E5%92%8C%E4%BF%AE%E6%94%B9DOM%E5%85%83%E7%B4%A0"><span class="toc-text">设置和修改DOM元素</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%AE%BE%E7%BD%AE%E4%B8%8E%E4%BF%AE%E6%94%B9DOM%E5%85%83%E7%B4%A0%E7%9A%84%E5%B1%9E%E6%80%A7"><span class="toc-text">设置与修改DOM元素的属性</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%8D%95%E5%B1%9E%E6%80%A7"><span class="toc-text">修改表单属性</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AE%9A%E6%97%B6%E5%99%A8-setInterval-%E9%97%B4%E6%AD%87%E5%87%BD%E6%95%B0"><span class="toc-text">定时器-setInterval() 间歇函数</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BA%8B%E4%BB%B6"><span class="toc-text">事件</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC"><span class="toc-text">事件监听</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%89%88%E6%9C%AC"><span class="toc-text">版本</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B"><span class="toc-text">事件类型</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0"><span class="toc-text">高阶函数</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F"><span class="toc-text">函数表达式</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0"><span class="toc-text">回调函数</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F"><span class="toc-text">环境变量</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3"><span class="toc-text">编程思想</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3"><span class="toc-text">排他思想</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#DOM%E7%BB%93%E7%82%B9"><span class="toc-text">DOM结点</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%BB%93%E7%82%B9%E7%9A%84%E6%9F%A5%E6%89%BE"><span class="toc-text">结点的查找</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%BB%93%E7%82%B9%E7%9A%84%E5%A2%9E%E5%8A%A0"><span class="toc-text">结点的增加</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%BB%93%E7%82%B9%E7%9A%84%E5%85%8B%E9%9A%86"><span class="toc-text">结点的克隆</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%BB%93%E7%82%B9%E7%9A%84%E5%88%A0%E9%99%A4"><span class="toc-text">结点的删除</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81"><span class="toc-text">重绘和回流</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%9B%9E%E6%B5%81-%E9%87%8D%E6%8E%92"><span class="toc-text">回流(重排)</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%87%8D%E7%BB%98"><span class="toc-text">重绘</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7"><span class="toc-text">事件高级</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1"><span class="toc-text">事件对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BA%8B%E4%BB%B6%E6%B5%81"><span class="toc-text">事件流</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98"><span class="toc-text">事件委托</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%BB%9A%E5%8A%A8%E4%BA%8B%E4%BB%B6"><span class="toc-text">滚动事件</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8A%A0%E8%BD%BD%E4%BA%8B%E4%BB%B6"><span class="toc-text">加载事件</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#load-%E4%BA%8B%E4%BB%B6"><span class="toc-text">load 事件</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#DOMContentLoaded"><span class="toc-text">DOMContentLoaded</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8F%E5%92%8C%E4%BD%8D%E7%BD%AE"><span class="toc-text">元素大小和位置</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#scroll%E5%AE%B6%E6%97%8F"><span class="toc-text">scroll家族</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#offest%E5%AE%B6%E6%97%8F"><span class="toc-text">offest家族</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#client%E5%AE%B6%E6%97%8F"><span class="toc-text">client家族</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Window%E5%AF%B9%E8%B1%A1"><span class="toc-text">Window对象</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#BOM"><span class="toc-text">BOM</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%9A%E6%97%B6%E5%99%A8-%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0"><span class="toc-text">定时器-延时函数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6-%EF%BC%88%E9%9D%A2%E8%AF%95%EF%BC%89-star"><span class="toc-text">JS执行机制 （面试）:star:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#location%E5%AF%B9%E8%B1%A1"><span class="toc-text">location对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#navigator%E5%AF%B9%E8%B1%A1"><span class="toc-text">navigator对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#histroy%E5%AF%B9%E8%B1%A1"><span class="toc-text">histroy对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8"><span class="toc-text">本地存储</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7"><span class="toc-text">自定义属性</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"><span class="toc-text">正则表达式</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%AF%AD%E6%B3%95"><span class="toc-text">语法</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%85%83%E5%AD%97%E7%AC%A6"><span class="toc-text">元字符</span></a></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="scoicon sco-map-line"></i><span>最近发布</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题"><img alt="整个前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题">整个前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img alt="常见前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题">常见前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台"><img alt="硅谷甄选运营平台" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台">硅谷甄选运营平台</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天"><img alt="Vue第三天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天">Vue第三天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天"><img alt="Vue第二天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天">Vue第二天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9">Vue框架笔记</a></div></div></div></div></div></div></main><footer id="footer"><div id="sco-footer-bar"><div class="footer-logo"><span class="scoicon">XC's Blog</span></div><div class="footer-bar-description">来自XC's Blog - 的文章</div><a class="footer-bar-link" href="/">了解更多</a></div><div id="footer_deal"><div class="footer_mini_logo" id="footer_mini_logo" title="返回顶部" onclick="sco.toTop()"><img data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg" alt="返回顶部"></div></div><div id="sco-footer"></div><div id="footer-bar"><div class="footer-bar-links"><div class="footer-bar-left"><div class="copyright">© 2021 - 2024 By&nbsp;<a class="footer-bar-link" href="/">XC's Blog</a></div></div><div class="footer-bar-right"><a class="footer-bar-link" target="_blank" rel="noopener" href="https://github.com/wleelw/hexo-theme-solitude" title="主题">主题</a><a class="footer-bar-link cc"><i class="scoicon sco-copyright-line"></i><i class="scoicon sco-creative-commons-by-line"></i><i class="scoicon sco-creative-commons-nc-line"></i><i class="scoicon sco-creative-commons-nd-line"></i></a></div></div></div></footer></div><!-- inject body--><div><script src="/js/main.js?v=1.5.1"></script><script src="/js/utils.js?v=1.5.1"></script><script src="https://cdn.cbd.int/solitude-source/js/universe.min.js"></script><script>dark()
</script><script src="https://cdn.staticfile.org/pjax/0.2.8/pjax.min.js"></script><script src="https://cdn.staticfile.org/vanilla-lazyload/17.8.5/lazyload.iife.min.js"></script><script src="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.js"></script><script src="/js/sco-ai.min.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js"></script><script src="https://cdn.staticfile.org/meting/2.0.1/Meting.min.js"></script><script>const meting_api = 'https://meting.qjqq.cn/?server=:server&type=:type&id=:id&auth=:auth&r=:r';
</script><script src="/js/covercolor/local.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/pace/1.2.4/pace.min.js"></script></div><div id="js-pjax"><script async src="https://cdn.staticfile.org/busuanzi/2.3.0/bsz.pure.mini.min.js"></script><script id="config-diff">var PAGE_CONFIG = {
    is_post: true,
    is_page: false,
    is_home: false,
    page: 'post',
    toc: true,
    comment: false,
}
</script></div><!-- newest comment--><!-- pjax--><script>let pjaxSelectors = [
    'title',
    '#body-wrap',
    '#site-config',
    'meta[name="description"]',
    '#js-pjax',
    'meta[property^="og:"]',
]

const pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
})

document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
})

document.addEventListener('pjax:complete', () => {
    window.refreshFn()
})

document.addEventListener('pjax:error', (e) => {
    if (e.request.status === 404) {
        pjax.loadUrl('/404.html')
    }
})</script><!-- theme--><script>initTheme = () => {
    const cachedMode = saveToLocal.get('theme');
    if (cachedMode === undefined)
        document.documentElement.setAttribute('data-theme', 'light');
    else
        document.documentElement.setAttribute('data-theme', cachedMode);
}
initTheme()</script><!-- search--><!-- music--><div class="needEndHide" id="nav-music" onclick="sco.musicToggle()"><div id="nav-music-hoverTips">音乐已暂停</div><meting-js id="8407304077" server="netease" type="playlist" mutex="true" preload="none" data-lrctype="0" order="random" theme="var(--sco-main)"></meting-js></div></body></html><script>const posts=["Vue笔记/前端面试题","Vue笔记/面试题","Vue笔记/硅谷甄选项目笔记","Vue笔记/vue第三天","Vue笔记/vue第二天","Vue笔记/Vue第一天","Vue笔记/vue框架笔记","Vue前置基础/5.ES6模块化与Webpack入门","Vue前置基础/1.Vue前置JS功底","Vue前置基础/4.跨域的基本概念","Vue前置基础/3.NPM的使用","Vue前置基础/2.Nodejs基础","Ajax学习笔记/黑马头条数据管理平台","Ajax学习笔记/Promise笔记","Ajax学习笔记/Ajax第四天","Ajax学习笔记/Ajax第三天","Ajax学习笔记/Ajax第二天","Ajax学习笔记/Ajax第一天","WebAPI学习笔记/JS进阶复习","WebAPI学习笔记/JS进阶第四天","WebAPI学习笔记/JS进阶第三天","WebAPI学习笔记/JS进阶第二天","WebAPI学习笔记/JS进阶第一天","WebAPI学习笔记/WebAPIs第七天","WebAPI学习笔记/WebAPIs第六天","WebAPI学习笔记/WebAPIs第五天","WebAPI学习笔记/WebAPIs第四天","WebAPI学习笔记/WebAPIs第三天","WebAPI学习笔记/WebAPIs第二天","WebAPI学习笔记/WebAPIs第一天","WebAPI学习笔记/WebAPIs学习笔记","WebAPI学习笔记/JS-ES6模块化","WebAPI学习笔记/JavaScript进阶","JavaScript学习笔记/JavaScript第五天","JavaScript学习笔记/JavaScript第四天","JavaScript学习笔记/JavaScript第三天","JavaScript学习笔记/JavaScript第二天","JavaScript学习笔记/JavaScript第一天","基础学习路线/移动开发-响应式布局","基础学习路线/移动开发-rem布局","基础学习路线/移动开发-flex布局","基础学习路线/移动开发-流式布局","基础学习路线/CSS3转换问题","基础学习路线/CSS-2D-3D转换","基础学习路线/前端168个单词","基础学习路线/CSS高级技巧","前端技术栈/前端路线","Hexo/图床方案汇总","其他技术栈/Windows软件推荐","Hexo/Butterfly主题配置","Hexo/Qexo","JavaScript/This指向与改变This指向","JavaScript/JS防抖与节流","JavaScript/如何在1分钟内完美解释什么是 JSONP 请求？","前端技术栈/移动端最佳适配解决方案","GitHub/Git常用命令","前端技术栈/来自2.5年前端小白的总结","网站资源/如何买到合适的域名","其他技术栈/CentOS一键安装Docker","网站资源/阿里云资源合集","其他技术栈/15个前端必备学习网站","其他技术栈/CSS3（圆角边框、阴影、浮动详解及示例）","网络协议/浅谈 HTTP 和 HTTPS","学习笔记/CSS属性大全","基础学习路线/CSS第五天-定位","基础学习路线/CSS第四天-浮动","基础学习路线/CSS第三天","基础学习路线/CSS第二天","基础学习路线/CSS第一天","基础学习路线/HTML第二天","基础学习路线/HTML第一天","学习笔记/「学习笔记」JavaScript基础","学习笔记/HTML与CSS进阶","Vue笔记/Vue X-数组对象的双向数据绑定","学习笔记/「学习笔记」CSS基础","学习笔记/「学习笔记」HTML基础","学习笔记/HTML基础","Windows/PE-Win10教程","Windows/Win系统网站-KMS","安卓玩机/Magisk卡刷-通刷官方-了解Fastboot","其他技术栈/前端开发免费资源大汇总","GitHub/Git基础-Github自定义域名","学习笔记/CSS笔记","Vscode/Vscode笔记-24款插件","其他技术栈/免费常用的前端CDN库","其他技术栈/软件及网站推荐","Vscode/记录 Vscode 插件","Hexo/Hexo音乐排行-Netlify CMS","GitHub/玩转GitHub","jQuery/jQuery自动触发事件与bootstrapjQuery插件用法","Hexo/使用Hexo和Github搭建个人博客","Hexo/Hexo博客搭建指南","Hexo/Hexo相关","Markdown/Markdown基础--高级教程","Markdown/Markdown基础教程"];function toRandomPost(){ pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]); };</script>