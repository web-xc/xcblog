<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Web APIs第六天 | XC's Blog</title><noscript>开启JavaScript才能访问本站哦~</noscript><link rel="icon" href="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><!-- index.css--><link rel="stylesheet" href="/css/index.css?v=1.5.1"><!-- inject head--><link rel="stylesheet" href="https://cdn.cbd.int/solitude-source/icon/scoicon.min.css"><link rel="stylesheet" href="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.css"><!-- aplayer--><link rel="stylesheet" href="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css"><!-- swiper--><!-- Open Graph--><meta name="description" content="BOM- 操作浏览器1. JS执行机制 JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这 门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比 如我们对某个 DOM 元素进行添加"><!-- pwa--><script>(win => {
        win.saveToLocal = {
            set: function setWithExpiry(key, value, ttl) {
                if (ttl === 0)
                    return
                const now = new Date()
                const expiryDay = ttl * 86400000
                const item = {
                    value: value,
                    expiry: now.getTime() + expiryDay,
                }
                localStorage.setItem(key, JSON.stringify(item))
            },

            get: function getWithExpiry(key) {
                const itemStr = localStorage.getItem(key)

                if (!itemStr) {
                    return undefined
                }
                const item = JSON.parse(itemStr)
                const now = new Date()

                if (now.getTime() > item.expiry) {
                    localStorage.removeItem(key)
                    return undefined
                }
                return item.value
            }
        }

        const DarkModeStatus = localStorage.getItem('theme')
        if (DarkModeStatus !== null) {
            if (DarkModeStatus === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-theme', 'light')
            }
        }

        const asideStatus = saveToLocal.get('aside-status')
        if (asideStatus !== undefined) {
            if (asideStatus === 'hide') {
                document.documentElement.classList.add('hide-aside')
            } else {
                document.documentElement.classList.remove('hide-aside')
            }
        }
    }
)(window)

console.log(
    "%c Program: Hexo %c Theme: Hexo-Theme-Solitude %c Version: v1.5.1",
    "border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#ff3842;margin:10px 0",
    "padding: 5px 10px;color:white;background:#3e9f50;",
    "border-radius:0 5px 5px 0;padding: 5px 10px;background:#0084ff;"
);</script><!-- global head--><script>const GLOBAL_CONFIG = {
    root: '/',
    algolia: undefined,
    localsearch: undefined,
    runtime: '2021-04-20 00:00:00',
    lazyload: {
        enable: true,
        error: '/img/error_load.png'
    },
    hightlight: {
        enable: true,
        limit: 200,
        expand: false,
        copy: true,
    },
    randomlinks: false,
    lang: {
        theme: {
            dark: '已切换至深色模式',
            light: '已切换至浅色模式',
        },
        copy: {
            success: '复制成功',
            error: '复制失败',
        },
        backtop: '返回顶部',
        time: {
            recent: '最近',
            yesterday: '昨天',
            berforeyesterday: '前天',
            daybefore: '天前',
            runtime: '天',
        },
        search: {
            empty: '找不到你查询的内容：${query}',
            hit: '找到 ${hits} 条结果，用时 ${time} 毫秒',
            placeholder: '输入关键词快速查找',
        },
        chs: {
            chs_to_cht: '繁體中文',
            cht_to_chs: '简体中文',
        }
    },
    aside: {
        sayhello: {
            morning: '一日之计在于晨',
            noon: '吃饱了才有力气干活',
            afternoon: '集中精力，攻克难关',
            night: '不要太劳累了，早睡更健康',
            goodnight: '睡个好觉，保证精力充沛',
        },
        sayhello2: ["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙","🤝 专修交互与设计","🏃 脚踏实地行动派","🧱 团队小组发动机","💢 壮汉人狠话不多","🎮 电竞游戏爱好者"],
    },
    covercolor: {
        enable: true
    },
    comment: {
        enable: false,
        type: '',
        commentBarrage: false,
        randomInfoStart: ["聪敏的","可爱的","美丽的"],
        randomInfoEnd: ["白菜","小可爱","小仙女"],
        twikoo: {
            url: '',
            accessToken: ''
        },
        waline: {
            url: '',
        }
    },
    lightbox: 'null',
    rightside: {
        enable: false
    },
    ai: {
        enable: true,
        key: '',
        talk: '我是王卓Sco开发的摘要生成助理ScoGPT，ScoGPT在静态部署时进行摘要的撰写，并且在访客访问时通过ScoCorrection转译后的文本摘要实现工具。我在这里只负责已经生成的摘要显示，你无法与我直接沟通，但我可以回答一些预设的问题。',
        randomPost: false,
    },
    music: {
        enable: false,
    },
    translate: undefined,
};</script><meta name="generator" content="Hexo 6.3.0"></head><body id="body"><!-- universe--><canvas id="universe"></canvas><!-- loading--><!-- console--><div id="console"><div class="close-btn" onclick="sco.hideConsole()"><i class="scoicon sco-close-fill"></i></div><div class="button-group"><div class="console-btn-item"><a class="darkmode_switchbutton" onclick="sco.switchDarkMode()" title="昼夜切换" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i></a></div><div class="console-btn-item" id="consoleHideAside"><a class="asideSwitch" onclick="sco.switchHideAside()" title="边栏显示控制" href="javascript:void(0);"><i class="scoicon sco-side-bar-fill"></i></a></div><div class="console-btn-item" id="consoleMusic" onclick="sco.musicToggle()"><a class="music-switch" title="音乐开关" href="javascript:void(0);"><i class="scoicon sco-disc-fill"></i></a></div></div><div class="console-mask" onclick="sco.hideConsole()"></div></div><!-- sidebar--><div id="sidebar" style="zoom: 1;"><div id="menu-mask" style="display: none;"></div><div id="sidebar-menus"><span class="sidebar-menu-item-title">功能</span><div class="sidebar-menu-item"><a class="darkmode_switchbutton menu-child" onclick="sco.switchDarkMode()" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i><span>显示模式</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div><span class="sidebar-menu-item-title">标签</span><div class="card-widget card-tags card-archives card-webinfo card-allinfo"><div class="card-tag-cloud"><a href="/tags/Ajax%E7%AC%94%E8%AE%B0/">Ajax笔记<sup>6</sup></a><a href="/tags/Hexo/">Hexo<sup>6</sup></a><a href="/tags/Qexo/">Qexo<sup>1</sup></a><a href="/tags/GitHub/">GitHub<sup>3</sup></a><a href="/tags/JavaScript/">JavaScript<sup>3</sup></a><a href="/tags/Markdown/">Markdown<sup>2</sup></a><a href="/tags/JavaScript%E7%AC%94%E8%AE%B0/">JavaScript笔记<sup>5</sup></a><a href="/tags/Vscode/">Vscode<sup>2</sup></a><a href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/">Vue前置基础<sup>5</sup></a><a href="/tags/Vue%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/">Vue框架笔记<sup>6</sup></a><a href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/">面试题<sup>2</sup></a><a href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/">Web APIs笔记<sup>10</sup></a><a href="/tags/JavaScript%E9%AB%98%E7%BA%A7/">JavaScript高级<sup>5</sup></a><a href="/tags/Windows/">Windows<sup>3</sup></a><a href="/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF%E6%A0%88/">其他技术栈<sup>6</sup></a><a href="/tags/jQuery/">jQuery<sup>1</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/">前端技术栈<sup>3</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CSS/">学习笔记-CSS<sup>9</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-HTML/">学习笔记-HTML<sup>2</sup></a><a href="/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/">前端经验<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/">前端笔记<sup>3</sup></a><a href="/tags/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/">网站资源<sup>2</sup></a><a href="/tags/%E5%AE%89%E5%8D%93%E7%8E%A9%E6%9C%BA/">安卓玩机<sup>1</sup></a><a href="/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/">网络协议<sup>1</sup></a></div></div></div></div><!-- keyboard--><div class="post" id="body-wrap"><header class="post-bg" id="page-header"><nav class="show" id="nav"><div id="nav-group"><div id="blog_name"><a id="site-name" href="/" title="返回博客主页"><span class="title">XC's Blog</span></a></div><div id="page-name-mask"><div id="page-name"><a id="page-name-text" onclick="sco.toTop()">Web APIs第六天</a></div></div><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div></div><div id="nav-left"></div><div id="nav-right"><div class="nav-button" id="randomPost_button"><a class="site-page" onclick="toRandomPost()" title="随机一篇文章" href="javascript:void(0);"><i class="scoicon sco-signal-tower-fill"></i></a></div><div class="nav-button" id="nav-console"><a class="console_switchbutton" onclick="sco.showConsole()" title="中控台" href="javascript:void(0);"><i class="scoicon sco-dashboard-fill"></i></a></div><div class="nav-button" id="nav-totop" onclick="sco.toTop()"><a class="totopbtn"><i class="scoicon sco-arrow-up-line"></i><span id="percent">0</span></a></div><div id="toggle-menu"><a class="site-page"><i class="scoicon sco-menu-line"></i></a></div></div></div></nav><div class="coverdiv" id="coverdiv"><img class="nolazyload" id="post-cover" src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="Web APIs第六天"></div><div id="post-info"><div id="post-firstinfo"><div class="meta-firstline"><a class="post-meta-original" title="该文章为原创文章，注意版权协议">原创</a><span class="post-meta-categories"><a class="post-meta-categories" href="/categories/Web-APIs笔记/">Web APIs笔记</a></span><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/"><span class="tags-name tags-punctuation">Web APIs笔记</span></a></div></div></div></div><h1 class="post-title">Web APIs第六天</h1><div id="post-meta"><div class="meta-secondline"></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><div class="post-ai"><div class="ai-title"><div class="ai-title-left"><i class="ai-title-icon scoicon sco-robot-fill"></i><div class="ai-title-text">文章摘要</div></div><div class="ai-tag" id="ai-tag">GPT 4</div></div><div class="ai-explanation" style="display: block;"></div><div class="ai-suggestions"></div><div class="ai-bottom"><div class="ai-tips">此内容根据文章生成，并经过人工审核，仅用于文章内容的解释与总结</div><a class="ai-report" title="投诉" target="_blank" rel="noopener" href="https://blog.wzsco.top/about/">投诉</a></div></div><article class="post-content" id="article-container"><h3 id="BOM-操作浏览器"><a href="#BOM-操作浏览器" class="headerlink" title="BOM- 操作浏览器"></a>BOM- 操作浏览器</h3><h2 id="1-JS执行机制"><a href="#1-JS执行机制" class="headerlink" title="1. JS执行机制"></a>1. JS执行机制</h2><ol>
<li>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这 门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比 如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除</li>
<li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问 题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉</li>
<li>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步</li>
</ol>
<h3 id="1-同步"><a href="#1-同步" class="headerlink" title="1. 同步"></a>1. 同步</h3><ol>
<li>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步 做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜</li>
<li>同步任务都在主线程上执行，形成一个执行栈</li>
</ol>
<h3 id="2-异步"><a href="#2-异步" class="headerlink" title="2. 异步"></a>2. 异步</h3><ol>
<li>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事 情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜</li>
<li>JS 的异步是通过回调函数实现的</li>
</ol>
<h5 id="一般而言，异步任务有以下三种类型"><a href="#一般而言，异步任务有以下三种类型" class="headerlink" title="一般而言，异步任务有以下三种类型:"></a>一般而言，异步任务有以下三种类型:</h5><ol>
<li>普通事件, 如 click、resize 等</li>
<li>资源加载, 如 load、error 等</li>
<li>定时器, 包括 setInterval、setTimeout 等 异步任务相关添加到任务队列中(任务队列也称为消息队列)</li>
<li>他们的本质区别： 这条流水线上各个流程的执行顺序不同</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. JS执行机制 同步 异步</span></span><br><span class="line"><span class="comment">// 同步: 执行栈 在主线程上执行</span></span><br><span class="line"><span class="comment">// 异步: 任务/消息队列 通过回调函数实现</span></span><br><span class="line"><span class="comment">// 1. 先执行栈的同步任务</span></span><br><span class="line"><span class="comment">// 2. 异步任务放入任务队列中</span></span><br><span class="line"><span class="comment">// 3. 同步任务执行完 系统按次序读取异步任务 进入执行栈执行</span></span><br><span class="line"><span class="comment">// 主线程重复获得任务、执行任务、再获取任务、再执行 这种机制称事件循环event loop</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">44</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">33</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<img data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/js执行机制.jpg" style="zoom: 25%;" />

<h2 id="2-JS执行过程"><a href="#2-JS执行过程" class="headerlink" title="2. JS执行过程"></a>2. JS执行过程</h2><ol>
<li>先执行执行栈中的同步任务</li>
<li>异步任务放入任务队列中</li>
<li>一旦执行栈中的所有同步任务执行完毕, 系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务 结束等待状态，进入执行栈，开始执行</li>
</ol>
<img data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/js执行机制过程.jpg" style="zoom:33%;" />

<img data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/js执行机制图解.jpg" style="zoom:33%;" />

<blockquote>
<p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环event loop</p>
</blockquote>
<h2 id="3-Window对象"><a href="#3-Window对象" class="headerlink" title="3. Window对象"></a>3. Window对象</h2><ol>
<li>BOM(Browser Object Model ) 是浏览器对象模型</li>
<li>window 是浏览器内置中的全局对象，我们所学习的所有 Web APIs 的知识内容都是基于 window 对象实现的window 对象下包含了 navigator、location、document、history、screen 5个属性, 即所谓的 BOM(浏览器对象模 型)</li>
<li>document 是实现 DOM 的基础，它其实是依附于 window 的属性</li>
<li>注：依附于 window 对象的所有属性和方法，使用时可以省略 window</li>
</ol>
<img data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/bom对象.jpg" style="zoom:33%;" />

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window是最大的对象 浏览器对象模型</span></span><br><span class="line"><span class="comment">// document是DOM最大对象</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setInterval</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)   </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">prompt</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-定时器-延时函数"><a href="#1-定时器-延时函数" class="headerlink" title="1. 定时器-延时函数"></a>1. 定时器-延时函数</h3><ol>
<li>JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</li>
<li>setTimeout 仅仅只执行一次，所以可以理解为就是把一段代码延迟执行, 平时省略window</li>
<li>结合递归函数可以使用 setTimeout 实现 setInterval 一样的功能</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 延迟对象 仅执行一次 就没了</span></span><br><span class="line"><span class="keyword">let</span> time = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;爆炸了&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">// 2. 清除延迟函数 点击按钮后清除</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">num1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(time)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="1-两种定时器对比"><a href="#1-两种定时器对比" class="headerlink" title="1. 两种定时器对比:"></a>1. 两种定时器对比:</h5><ol>
<li>setInterval 的特征是重复执行，首次执行会延时</li>
<li>setTimeout 的特征是延时执行，只执行 1 次</li>
<li>setTimeout 结合递归函数，能模拟 setInterval 重复执行</li>
<li>clearTimeout 清除由 setTimeout 创建的定时任务</li>
</ol>
<h5 id="2-5秒钟之后消失的广告"><a href="#2-5秒钟之后消失的广告" class="headerlink" title="2. 5秒钟之后消失的广告"></a>2. 5秒钟之后消失的广告</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2秒后自动消失广告</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    num2.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">// 4. 递归函数: 自己调用自己</span></span><br><span class="line"><span class="comment">// 容易死递归 要加上退出条件</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num3++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 如果要退出 得加上判断条件</span></span><br><span class="line">    <span class="keyword">if</span> (num3 &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自己调自己</span></span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// 5. 利用递归实现/模拟 setInterval</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num4.<span class="property">innerHTML</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(fn1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"><span class="comment">// 6. 两个定时器对比</span></span><br><span class="line"><span class="comment">// 间歇函数 重复执行 首次延迟执行</span></span><br><span class="line"><span class="comment">// 延迟函数 只执行1次</span></span><br></pre></td></tr></table></figure>

<h3 id="2-location对象"><a href="#2-location对象" class="headerlink" title="2.  location对象"></a>2.  location对象</h3><ol>
<li>location 的数据类型是对象，它拆分并保存了 URL 地址的各个组成部分</li>
</ol>
<h3 id="1-href-属性获取完整的-URL-地址，对其赋值时用于地址的跳转"><a href="#1-href-属性获取完整的-URL-地址，对其赋值时用于地址的跳转" class="headerlink" title="1. href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转"></a>1. href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</h3><ol>
<li>href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. location.href 得到url地址 可读写 可利用js跳转页面</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>)</span><br><span class="line"><span class="comment">// location.href = &#x27;http://baidu.com&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="5秒钟之后跳转的页面"><a href="#5秒钟之后跳转的页面" class="headerlink" title="5秒钟之后跳转的页面"></a>5秒钟之后跳转的页面</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 3秒后跳转页面</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&quot;</span>&gt;<span class="number">3</span>秒后跳转百度页面&lt;/a&gt;</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    num2--</span><br><span class="line">    num1.<span class="property">innerHTML</span> = <span class="string">`<span class="subst">$&#123;num2&#125;</span>秒后跳转百度页面`</span></span><br><span class="line">    <span class="keyword">if</span> (num2 == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(num3)</span><br><span class="line">        location.<span class="property">href</span> = <span class="string">&#x27;http://baidu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-search-属性获取地址中携带的参数，符号-？后面部分"><a href="#2-search-属性获取地址中携带的参数，符号-？后面部分" class="headerlink" title="2. search 属性获取地址中携带的参数，符号 ？后面部分"></a>2. search 属性获取地址中携带的参数，符号 ？后面部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="number">3.</span>location.<span class="property">search</span> 属性 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;4.JS执行机制.html&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">// 3. location.search 属性 ?username=abd</span></span><br><span class="line"><span class="language-xml">document.write(location.search)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-hash-属性获取地址中的啥希值，符号-后面部分"><a href="#3-hash-属性获取地址中的啥希值，符号-后面部分" class="headerlink" title="3. hash 属性获取地址中的啥希值，符号 # 后面部分"></a>3. hash 属性获取地址中的啥希值，符号 # 后面部分</h3><blockquote>
<p>后期vue路由的铺垫，经常用于不刷新页面，显示不同页面，比如 网易云音乐</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. location.hash # 属性 vue路由</span></span><br><span class="line">&lt;a href=<span class="string">&quot;#one&quot;</span>&gt;第一个&lt;/a&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(location.<span class="property">hash</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-reload-方法用来刷新当前页面，传入参数-true-时表示强制刷新"><a href="#4-reload-方法用来刷新当前页面，传入参数-true-时表示强制刷新" class="headerlink" title="4. reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新"></a>4. reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. location.reload 属性 方法</span></span><br><span class="line">button <span class="keyword">class</span>=<span class="string">&quot;btn&quot;</span>&gt;强制刷新&lt;/button&gt;</span><br><span class="line"><span class="keyword">let</span> num5 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span><br><span class="line">num5.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 强制刷新 默认为 true</span></span><br><span class="line">    location.<span class="title function_">reload</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-navigator对象"><a href="#3-navigator对象" class="headerlink" title="3. navigator对象"></a>3. navigator对象</h3><ol>
<li>navigator的数据类型是对象，该对象下记录了浏览器自身的相关信息</li>
<li>通过 userAgent 检测浏览器的版本及平台</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator)</span><br><span class="line"><span class="comment">// 1.检测 userAgent 浏览器信息</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line"><span class="comment">// 2.验证是否为Android或iPhone</span></span><br><span class="line">    <span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line">    <span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line"><span class="comment">// 3.如果是Android或iPhone，则跳转至移动站点</span></span><br><span class="line">    <span class="keyword">if</span> (android || iphone) &#123;</span><br><span class="line">        location.<span class="property">href</span> = <span class="string">&#x27;http://baidu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="4-histroy对象"><a href="#4-histroy对象" class="headerlink" title="4. histroy对象"></a>4. histroy对象</h3><ol>
<li>history 的数据类型是对象，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</li>
<li>history 对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到</li>
</ol>
<table>
<thead>
<tr>
<th align="left">使用方法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">back()</td>
<td align="left">可以后退</td>
</tr>
<tr>
<td align="left">forward()</td>
<td align="left">前进</td>
</tr>
<tr>
<td align="left">go(参数)</td>
<td align="left">前进后退, 1是前进页面, -1是后退页面</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;前进&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 1. history.forward()</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button:first-child&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// history.forward()</span></span><br><span class="line">    history.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2. history.back()</span></span><br><span class="line"><span class="keyword">let</span> btn1 = btn.<span class="property">nextElementSibling</span></span><br><span class="line">btn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// history.back()</span></span><br><span class="line">    history.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-本地存储"><a href="#4-本地存储" class="headerlink" title="4. 本地存储"></a>4. 本地存储</h2><ol>
<li>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在 本地存储大量的数据，HTML5规范提出了相关解决方案</li>
<li>数据存储在用户浏览器中</li>
<li>设置、读取方便、甚至页面刷新不丢失数据</li>
<li>容量较大，sessionStorage和localStorage约 5M 左右</li>
</ol>
<h3 id="1-localStorage"><a href="#1-localStorage" class="headerlink" title="1. localStorage"></a>1. localStorage</h3><ol>
<li>生命周期永久生效，除非手动删除 否则关闭页面也会存在</li>
<li>可以多窗口 (页面) 共享 (同一浏览器可以共享)</li>
<li>以键值对的形式存储使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 存储数据 localStorage.setItem(&#x27;键&#x27;, &#x27;值&#x27;)</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;csy&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 获取数据 getItem(&#x27;键&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="comment">// 3. 删除数据 removeItem(&#x27;值&#x27;)</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-存储复杂数据类型存储"><a href="#2-存储复杂数据类型存储" class="headerlink" title="2. 存储复杂数据类型存储"></a>2. 存储复杂数据类型存储</h3><p>本地只能存储字符串,无法存储复杂数据类型.需要将复杂数据类型转换成JSON字符串,在存储到本地</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储复杂数据类型 引用数据类型</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uanme</span>: <span class="string">&#x27;小城&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JSON 格式 属性和值 双引号包含</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="string">&quot;uanme&quot;</span>: <span class="string">&quot;小城&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1.</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(复杂数据类型)</span><br><span class="line"><span class="number">2.</span> 将复杂数据转换成<span class="title class_">JSON</span>字符串 存储 本地存储中</span><br><span class="line"><span class="number">3.</span> <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;obj&#x27;</span>, obj) 是对象 但不知道什么名</span><br><span class="line"><span class="number">4.</span> 复杂数据类型转换为 json字符串 进行存储</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;obj&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)))</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;obj&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>字符串)</span><br><span class="line"><span class="number">2.</span> 将<span class="title class_">JSON</span>字符串转换成对象 取出 时候使用</span><br><span class="line"><span class="number">3.</span> 取数据 将 json字符串 转换为 对象</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;obj&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="3-sessionStorage（了解）"><a href="#3-sessionStorage（了解）" class="headerlink" title="3. sessionStorage（了解）"></a>3. sessionStorage（了解）</h3><ol>
<li>生命周期为关闭浏览器窗口</li>
<li>在同一个窗口(页面)下数据可以共享</li>
<li>以键值对的形式存储使用</li>
<li>用法跟localStorage 基本相同</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生命周期为关闭浏览器窗口 (了解)</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;csy&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="5-自定义属性"><a href="#5-自定义属性" class="headerlink" title="5. 自定义属性"></a>5. 自定义属性</h2><ol>
<li>固有属性: 标签天生自带的属性 比如class id title等, 可以直接使用点语法操作</li>
<li>由程序员自己添加的属性,在DOM对象中找不到, 无法使用点语法操作,必须使用专门的API </li>
</ol>
<ul>
<li>getAttribute(‘属性名’) // 获取自定义属性 </li>
<li>setAttribute(‘属性名’, ‘属性值’) // 设置自定义属性 </li>
<li>removeAttribute(‘属性名’) // 删除自定义属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自带的属性id: 直接用点语法操作</span></span><br><span class="line"><span class="comment">// 由程序员自己添加属性 在DOM对象中找不到 无法使用点语法操作 须使用专门API</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span> data-id=<span class="string">&quot;1&quot;</span> data-id1=<span class="string">&quot;2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"><span class="comment">// 1. 设置自定义属性</span></span><br><span class="line">num1.<span class="title function_">setAttribute</span>(<span class="string">&#x27;myid&#x27;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 2. 获取自定义属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1.<span class="title function_">getAttribute</span>(<span class="string">&#x27;myid&#x27;</span>))</span><br><span class="line"><span class="comment">// 3. 删除自定义属性</span></span><br><span class="line">num1.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;myid&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="data-自定义属性"><a href="#data-自定义属性" class="headerlink" title="data-自定义属性:"></a>data-自定义属性:</h3><ol>
<li>传统的自定义属性没有专门的定义规则,开发者随意定值,不够规范,所以在html5中推出来了专门的data-自定义属性 在 标签上一律以data-开头 </li>
<li>在DOM对象上一律以dataset对象方式获取</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dataset对象 不能随意定值 需data-id规范 取值是数组</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span> data-id=<span class="string">&quot;1&quot;</span> data-id1=<span class="string">&quot;2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1.<span class="property">dataset</span>.<span class="property">id</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1.<span class="property">dataset</span>)</span><br></pre></td></tr></table></figure>

<h2 id="5-swiper-插件"><a href="#5-swiper-插件" class="headerlink" title="5. swiper 插件"></a>5. swiper 插件</h2><ol>
<li>插件: 就是别人写好的一些代码,我们只需要复制对应的代码,就可以直接实现对应的效果</li>
<li>熟悉官网,了解这个插件可以完成什么需求 <a target="_blank" rel="noopener" href="https://www.swiper.com.cn/">https://www.swiper.com.cn</a></li>
<li>看在线演示,找到符合自己需求的demo <a target="_blank" rel="noopener" href="https://www.swiper.com.cn/demo/index.html">https://www.swiper.com.cn/demo/index.html</a></li>
<li>查看基本使用流程 <a target="_blank" rel="noopener" href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a></li>
<li>查看APi文档,去配置自己的插件 <a target="_blank" rel="noopener" href="https://www.swiper.com.cn/api/index.html">https://www.swiper.com.cn/api/index.html</a></li>
<li>注意: 多个swiper同时使用的时候, 类名需要注意区分</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&quot;.Swiper&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">slidesPerView</span>: <span class="number">1</span>, <span class="comment">// 等分播放</span></span><br><span class="line">    <span class="attr">spaceBetween</span>: <span class="number">0</span>, <span class="comment">// 背景过渡</span></span><br><span class="line">    <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 是否循环</span></span><br><span class="line">    <span class="attr">pagination</span>: &#123; <span class="comment">// 小圆点显示/隐藏</span></span><br><span class="line">        <span class="attr">el</span>: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">        <span class="attr">clickable</span>: <span class="literal">true</span>, <span class="comment">// 小圆点是否能点</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">navigation</span>: &#123; <span class="comment">// 左右按钮</span></span><br><span class="line">        <span class="attr">nextEl</span>: <span class="string">&quot;.swiper-button-next&quot;</span>,</span><br><span class="line">        <span class="attr">prevEl</span>: <span class="string">&quot;.swiper-button-prev&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">autoplay</span>: &#123; <span class="comment">// 自动切换</span></span><br><span class="line">        <span class="attr">delay</span>: <span class="number">400</span>, <span class="comment">// 间隔时间</span></span><br><span class="line">        <span class="attr">stopOnLastSlide</span>: <span class="literal">false</span>, <span class="comment">// 到最后一个停止切换 loop模式下无效</span></span><br><span class="line">        <span class="attr">disableOnInteraction</span>: <span class="literal">false</span>, <span class="comment">// 拖动/点击后 停止自动切换</span></span><br><span class="line">    &#125;,</span><br><span class="line">    keyboard : <span class="literal">true</span>, <span class="comment">// 键盘左右键控制</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="6-综合案例"><a href="#6-综合案例" class="headerlink" title="6. 综合案例"></a>6. 综合案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">需求①：读取本地存储数据（封装函数）</span><br><span class="line">如果本地存储有数据，则返回 <span class="title class_">JSON</span>.<span class="title function_">parse</span>() 之后的对象</span><br><span class="line">如果本地存储没有数据，则默认写入三条数据，注意存储的利用<span class="title class_">JSON</span>.<span class="title function_">stringify</span>() 存 储<span class="title class_">JSON</span> 格式的数据</span><br><span class="line">需求②：渲染模块</span><br><span class="line">先读取本地存储数据，然后渲染</span><br><span class="line">需求③：添加模块</span><br><span class="line">注意，先取的最新的本地存储数据，然后追加</span><br><span class="line">新增了数据，要把新数据存储到本地存储别，忘记转换</span><br><span class="line">需求④：删除模块</span><br><span class="line">注意，先取的最新的本地存储数据，然后追加</span><br><span class="line">新增了数据，要把新数据存储到本地存储别忘记转换</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增学员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;div class=&quot;info&quot;&gt;</span><br><span class="line">  姓名：&lt;input type=&quot;text&quot; class=&quot;uname&quot;&gt;</span><br><span class="line">  年龄：&lt;input type=&quot;text&quot; class=&quot;age&quot;&gt;</span><br><span class="line">  性别: &lt;select name=&quot;gender&quot; id=&quot;&quot; class=&quot;gender&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;男&quot;&gt;男&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;女&quot;&gt;女&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  薪资：&lt;input type=&quot;text&quot; class=&quot;salary&quot;&gt;</span><br><span class="line">  就业城市：&lt;select name=&quot;city&quot; id=&quot;&quot; class=&quot;city&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;北京&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;上海&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;广州&quot;&gt;广州&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;深圳&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;曹县&quot;&gt;曹县&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;button class=&quot;add&quot;&gt;录入&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h1&gt;就业榜&lt;/h1&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;薪资&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;就业城市&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/thead&gt;</span><br><span class="line">  &lt;tbody&gt;</span><br><span class="line">  &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 1. 读取本地存储数据 封装函数 </span><br><span class="line">  function fn1() &#123;</span><br><span class="line">    let num1 = localStorage.getItem(&#x27;data&#x27;)</span><br><span class="line">    if (num1) &#123;</span><br><span class="line">      // 如果本地存储有数据 则返回 JSON.parse 对象</span><br><span class="line">      return JSON.parse(num1)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 如果没有则默认写入三条数据 利用stringify 存储</span><br><span class="line">    let arr = [</span><br><span class="line">      &#123; stuid: 1001, uname: &#x27;欧阳霸天&#x27;, age: 19, gender: &#x27;男&#x27;, salary: &#x27;20000&#x27;, city: &#x27;上海&#x27; &#125;,</span><br><span class="line">      &#123; stuid: 1002, uname: &#x27;令狐霸天&#x27;, age: 29, gender: &#x27;男&#x27;, salary: &#x27;30000&#x27;, city: &#x27;北京&#x27; &#125;,</span><br><span class="line">      &#123; stuid: 1003, uname: &#x27;诸葛霸天&#x27;, age: 39, gender: &#x27;男&#x27;, salary: &#x27;2000&#x27;, city: &#x27;北京&#x27; &#125;,</span><br><span class="line">    ]</span><br><span class="line">      localStorage.setItem(&#x27;data&#x27;, JSON.stringify(arr))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fn1()</span><br><span class="line"></span><br><span class="line">  let tbody = document.querySelector(&#x27;tbody&#x27;)</span><br><span class="line">  let btn = document.querySelector(&#x27;.add&#x27;)</span><br><span class="line">  let uname = document.querySelector(&#x27;.uname&#x27;)</span><br><span class="line">  let age = document.querySelector(&#x27;.age&#x27;)</span><br><span class="line">  let gender = document.querySelector(&#x27;.gender&#x27;)</span><br><span class="line">  let salary = document.querySelector(&#x27;.salary&#x27;)</span><br><span class="line">  let city = document.querySelector(&#x27;.city&#x27;)</span><br><span class="line">  function fn() &#123;</span><br><span class="line">  // 2. 先读取本地存储数据 再渲染</span><br><span class="line">    let arr = fn1()</span><br><span class="line">    tbody.innerHTML = &#x27;&#x27;</span><br><span class="line">    for (let num1 = 0; num1 &lt; arr.length; num1++) &#123;</span><br><span class="line">      let tr = document.createElement(&#x27;tr&#x27;)</span><br><span class="line">      tr.innerHTML = `</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;arr[num1].stuid&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;arr[num1].uname&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;arr[num1].age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;arr[num1].gender&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;arr[num1].salary&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;arr[num1].city&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=&quot;javascript:&quot; id=&quot;$&#123;num1&#125;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;`</span><br><span class="line">      tbody.appendChild(tr)</span><br><span class="line">      uname.value = age.value = salary.value = &#x27;&#x27;</span><br><span class="line">      gender.value = &#x27;男&#x27;</span><br><span class="line">      city.value = &#x27;北京&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fn()</span><br><span class="line"></span><br><span class="line">  btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    // 3. 先读取本地存储数据 再渲染</span><br><span class="line">    let arr = fn1()</span><br><span class="line">    arr.push(&#123;</span><br><span class="line">      stuid: arr[arr.length - 1].stuid + 1, </span><br><span class="line">      uname: uname.value, </span><br><span class="line">      age: age.value, </span><br><span class="line">      gender: gender.value, </span><br><span class="line">      salary: salary.value, </span><br><span class="line">      city: city.value</span><br><span class="line">    &#125;)</span><br><span class="line">    // 4. 存储到本地</span><br><span class="line">    localStorage.setItem(&#x27;data&#x27;, JSON.stringify(arr))</span><br><span class="line">    fn()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  tbody.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">    // 5. 先读取本地数据 再渲染</span><br><span class="line">    let arr = fn1()</span><br><span class="line">    if (e.target.tagName == &#x27;A&#x27;) &#123;</span><br><span class="line">      // 7. 第一条数据不能删除 添加判断</span><br><span class="line">      if (e.target.id == 0) &#123;</span><br><span class="line">        return alert(&#x27;此条数据不能被删除&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">      arr.splice(e.target.id, 1)</span><br><span class="line">      // 6. 存储到本地</span><br><span class="line">      localStorage.setItem(&#x27;data&#x27;, JSON.stringify(arr))</span><br><span class="line">    &#125;</span><br><span class="line">    fn()</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="本节单词"><a href="#本节单词" class="headerlink" title="本节单词:"></a>本节单词:</h4><ol>
<li><p>localStorage</p>
</li>
<li><p>setItem</p>
</li>
<li><p>getItem</p>
</li>
<li><p>stringify</p>
</li>
<li><p>parse</p>
</li>
<li><p>removeItem</p>
</li>
<li><p>setTimeout</p>
</li>
<li><p>location</p>
</li>
<li><p>href</p>
</li>
<li><p>search</p>
</li>
<li><p>hash</p>
</li>
<li><p>reload</p>
</li>
<li><p>setAttribute</p>
</li>
<li><p>getAttribute</p>
</li>
<li><p>removeAttribute</p>
</li>
<li><p>dataset</p>
</li>
<li><p>histroy</p>
</li>
<li><p>forward</p>
</li>
<li><p>back</p>
</li>
<li><p>go</p>
</li>
<li><p>json</p>
</li>
<li><p>window</p>
</li>
<li><p>navigator</p>
</li>
<li><p>sessionStorage</p>
</li>
<li><p>Browser Object Model </p>
</li>
</ol>
</article><div class="post-copyright"><div class="post-copyright__author_group"><a class="post-copyright__author_img" href="/about/"><img class="post-copyright__author_img_front" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"></a><div class="post-copyright__author_name">XC's Blog</div><div class="post-copyright__author_desc"></div></div><div class="post-tools" id="post-tools"><div class="post-tools-left"><div id="quit-box" onclick="RemoveRewardMask()"></div></div></div><div class="post-copyright__notice"><span class="post-copyright-info">本文是原创文章，采用<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</a>协议，完整转载请注明来自<a href="/">XC's Blog</a></span></div></div><div class="post-tools-right"><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/"><span class="tags-punctuation"></span>Web APIs笔记<span class="tagsPageCount">10</span></a></div></div></div><nav class="needEndHide pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E4%B8%83%E5%A4%A9"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">Web APIs第七天</div></div></a></div><div class="next-post pull-right"><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E4%BA%94%E5%A4%A9"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">Web APIs第五天</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="scoicon sco-star-smile-fill"></i><span>喜欢这篇的人也看了</span><div class="relatedPosts-link"><a onclick="event.preventDefault(); toRandomPost();" href="javascript:void(0);" rel="external nofollow" data-pjax-state="">随便逛逛</a></div></div><div class="relatedPosts-list"><div><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E4%B8%83%E5%A4%A9" title="Web APIs第七天"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="cover"><div class="content is-center"><div class="title">Web APIs第七天</div></div></a></div><div><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E4%BA%94%E5%A4%A9" title="Web APIs第五天"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="cover"><div class="content is-center"><div class="title">Web APIs第五天</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="card-content"><div class="card-info-avatar is-center"><div class="author-info__top-group"><div class="author-info__sayhi" id="author-info__sayhi" onclick="sco.changeSayHelloText()">sayhello.morning</div></div></div><div class="avatar-img-group"><img class="avatar-img" alt="头像" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><div class="avatar-sticker"><img class="avatar-sticker-img" data-lazy-src="https://bu.dusays.com/2023/12/30/659011053e246.png" alt="心情贴纸"></div></div><div class="author-info__description_group"><div class="author-info__description">分享自己对编程的<b>热爱</b>，对美好生活的<b>向往</b>，对知识海洋<b>探索历程</b>。</div><div class="author-info__description2">相信你可以在这里找到对你有用的知识和教程。</div></div><div class="author-info__bottom-group"><a class="author-info__bottom-group-left" href="/about/"><div class="author-info__name">XC's Blog</div><div class="author-info__desc"></div></a><div class="card-info-social-icons is-center"></div></div></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="scoicon sco-menu-line"></i><span>文章目录</span></div><div class="toc-content" id="toc-content"><ol class="toc"><li class="toc-item toc-level-3"><a class="toc-link" href="#BOM-%E6%93%8D%E4%BD%9C%E6%B5%8F%E8%A7%88%E5%99%A8"><span class="toc-text">BOM- 操作浏览器</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-JS%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6"><span class="toc-text">1. JS执行机制</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-%E5%90%8C%E6%AD%A5"><span class="toc-text">1. 同步</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-%E5%BC%82%E6%AD%A5"><span class="toc-text">2. 异步</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#%E4%B8%80%E8%88%AC%E8%80%8C%E8%A8%80%EF%BC%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%9C%89%E4%BB%A5%E4%B8%8B%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B"><span class="toc-text">一般而言，异步任务有以下三种类型:</span></a></li></ol></li></ol></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-JS%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B"><span class="toc-text">2. JS执行过程</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-Window%E5%AF%B9%E8%B1%A1"><span class="toc-text">3. Window对象</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-%E5%AE%9A%E6%97%B6%E5%99%A8-%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0"><span class="toc-text">1. 定时器-延时函数</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#1-%E4%B8%A4%E7%A7%8D%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AF%B9%E6%AF%94"><span class="toc-text">1. 两种定时器对比:</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#2-5%E7%A7%92%E9%92%9F%E4%B9%8B%E5%90%8E%E6%B6%88%E5%A4%B1%E7%9A%84%E5%B9%BF%E5%91%8A"><span class="toc-text">2. 5秒钟之后消失的广告</span></a></li></ol></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-location%E5%AF%B9%E8%B1%A1"><span class="toc-text">2.  location对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#1-href-%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E7%9A%84-URL-%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%AF%B9%E5%85%B6%E8%B5%8B%E5%80%BC%E6%97%B6%E7%94%A8%E4%BA%8E%E5%9C%B0%E5%9D%80%E7%9A%84%E8%B7%B3%E8%BD%AC"><span class="toc-text">1. href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#5%E7%A7%92%E9%92%9F%E4%B9%8B%E5%90%8E%E8%B7%B3%E8%BD%AC%E7%9A%84%E9%A1%B5%E9%9D%A2"><span class="toc-text">5秒钟之后跳转的页面</span></a></li></ol></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-search-%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E4%B8%AD%E6%90%BA%E5%B8%A6%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E7%AC%A6%E5%8F%B7-%EF%BC%9F%E5%90%8E%E9%9D%A2%E9%83%A8%E5%88%86"><span class="toc-text">2. search 属性获取地址中携带的参数，符号 ？后面部分</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-hash-%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E4%B8%AD%E7%9A%84%E5%95%A5%E5%B8%8C%E5%80%BC%EF%BC%8C%E7%AC%A6%E5%8F%B7-%E5%90%8E%E9%9D%A2%E9%83%A8%E5%88%86"><span class="toc-text">3. hash 属性获取地址中的啥希值，符号 # 后面部分</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-reload-%E6%96%B9%E6%B3%95%E7%94%A8%E6%9D%A5%E5%88%B7%E6%96%B0%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0-true-%E6%97%B6%E8%A1%A8%E7%A4%BA%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0"><span class="toc-text">4. reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-navigator%E5%AF%B9%E8%B1%A1"><span class="toc-text">3. navigator对象</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-histroy%E5%AF%B9%E8%B1%A1"><span class="toc-text">4. histroy对象</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8"><span class="toc-text">4. 本地存储</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-localStorage"><span class="toc-text">1. localStorage</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-%E5%AD%98%E5%82%A8%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8"><span class="toc-text">2. 存储复杂数据类型存储</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-sessionStorage%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89"><span class="toc-text">3. sessionStorage（了解）</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7"><span class="toc-text">5. 自定义属性</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#data-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7"><span class="toc-text">data-自定义属性:</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-swiper-%E6%8F%92%E4%BB%B6"><span class="toc-text">5. swiper 插件</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#6-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B"><span class="toc-text">6. 综合案例</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%9C%AC%E8%8A%82%E5%8D%95%E8%AF%8D"><span class="toc-text">本节单词:</span></a></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="scoicon sco-map-line"></i><span>最近发布</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题"><img alt="整个前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题">整个前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img alt="常见前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题">常见前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台"><img alt="硅谷甄选运营平台" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台">硅谷甄选运营平台</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天"><img alt="Vue第三天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天">Vue第三天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天"><img alt="Vue第二天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天">Vue第二天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9">Vue框架笔记</a></div></div></div></div></div></div></main><footer id="footer"><div id="sco-footer-bar"><div class="footer-logo"><span class="scoicon">XC's Blog</span></div><div class="footer-bar-description">来自XC's Blog - 的文章</div><a class="footer-bar-link" href="/">了解更多</a></div><div id="footer_deal"><div class="footer_mini_logo" id="footer_mini_logo" title="返回顶部" onclick="sco.toTop()"><img data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg" alt="返回顶部"></div></div><div id="sco-footer"></div><div id="footer-bar"><div class="footer-bar-links"><div class="footer-bar-left"><div class="copyright">© 2021 - 2024 By&nbsp;<a class="footer-bar-link" href="/">XC's Blog</a></div></div><div class="footer-bar-right"><a class="footer-bar-link" target="_blank" rel="noopener" href="https://github.com/wleelw/hexo-theme-solitude" title="主题">主题</a><a class="footer-bar-link cc"><i class="scoicon sco-copyright-line"></i><i class="scoicon sco-creative-commons-by-line"></i><i class="scoicon sco-creative-commons-nc-line"></i><i class="scoicon sco-creative-commons-nd-line"></i></a></div></div></div></footer></div><!-- inject body--><div><script src="/js/main.js?v=1.5.1"></script><script src="/js/utils.js?v=1.5.1"></script><script src="https://cdn.cbd.int/solitude-source/js/universe.min.js"></script><script>dark()
</script><script src="https://cdn.staticfile.org/pjax/0.2.8/pjax.min.js"></script><script src="https://cdn.staticfile.org/vanilla-lazyload/17.8.5/lazyload.iife.min.js"></script><script src="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.js"></script><script src="/js/sco-ai.min.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js"></script><script src="https://cdn.staticfile.org/meting/2.0.1/Meting.min.js"></script><script>const meting_api = 'https://meting.qjqq.cn/?server=:server&type=:type&id=:id&auth=:auth&r=:r';
</script><script src="/js/covercolor/local.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/pace/1.2.4/pace.min.js"></script></div><div id="js-pjax"><script async src="https://cdn.staticfile.org/busuanzi/2.3.0/bsz.pure.mini.min.js"></script><script id="config-diff">var PAGE_CONFIG = {
    is_post: true,
    is_page: false,
    is_home: false,
    page: 'post',
    toc: true,
    comment: false,
}
</script></div><!-- newest comment--><!-- pjax--><script>let pjaxSelectors = [
    'title',
    '#body-wrap',
    '#site-config',
    'meta[name="description"]',
    '#js-pjax',
    'meta[property^="og:"]',
]

const pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
})

document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
})

document.addEventListener('pjax:complete', () => {
    window.refreshFn()
})

document.addEventListener('pjax:error', (e) => {
    if (e.request.status === 404) {
        pjax.loadUrl('/404.html')
    }
})</script><!-- theme--><script>initTheme = () => {
    const cachedMode = saveToLocal.get('theme');
    if (cachedMode === undefined)
        document.documentElement.setAttribute('data-theme', 'light');
    else
        document.documentElement.setAttribute('data-theme', cachedMode);
}
initTheme()</script><!-- search--><!-- music--><div class="needEndHide" id="nav-music" onclick="sco.musicToggle()"><div id="nav-music-hoverTips">音乐已暂停</div><meting-js id="8407304077" server="netease" type="playlist" mutex="true" preload="none" data-lrctype="0" order="random" theme="var(--sco-main)"></meting-js></div></body></html><script>const posts=["Vue笔记/前端面试题","Vue笔记/面试题","Vue笔记/硅谷甄选项目笔记","Vue笔记/vue第三天","Vue笔记/vue第二天","Vue笔记/Vue第一天","Vue笔记/vue框架笔记","Vue前置基础/5.ES6模块化与Webpack入门","Vue前置基础/1.Vue前置JS功底","Vue前置基础/4.跨域的基本概念","Vue前置基础/3.NPM的使用","Vue前置基础/2.Nodejs基础","Ajax学习笔记/黑马头条数据管理平台","Ajax学习笔记/Promise笔记","Ajax学习笔记/Ajax第四天","Ajax学习笔记/Ajax第三天","Ajax学习笔记/Ajax第二天","Ajax学习笔记/Ajax第一天","WebAPI学习笔记/JS进阶复习","WebAPI学习笔记/JS进阶第四天","WebAPI学习笔记/JS进阶第三天","WebAPI学习笔记/JS进阶第二天","WebAPI学习笔记/JS进阶第一天","WebAPI学习笔记/WebAPIs第七天","WebAPI学习笔记/WebAPIs第六天","WebAPI学习笔记/WebAPIs第五天","WebAPI学习笔记/WebAPIs第四天","WebAPI学习笔记/WebAPIs第三天","WebAPI学习笔记/WebAPIs第二天","WebAPI学习笔记/WebAPIs第一天","WebAPI学习笔记/WebAPIs学习笔记","WebAPI学习笔记/JS-ES6模块化","WebAPI学习笔记/JavaScript进阶","JavaScript学习笔记/JavaScript第五天","JavaScript学习笔记/JavaScript第四天","JavaScript学习笔记/JavaScript第三天","JavaScript学习笔记/JavaScript第二天","JavaScript学习笔记/JavaScript第一天","基础学习路线/移动开发-响应式布局","基础学习路线/移动开发-rem布局","基础学习路线/移动开发-flex布局","基础学习路线/移动开发-流式布局","基础学习路线/CSS3转换问题","基础学习路线/CSS-2D-3D转换","基础学习路线/前端168个单词","基础学习路线/CSS高级技巧","前端技术栈/前端路线","Hexo/图床方案汇总","其他技术栈/Windows软件推荐","Hexo/Butterfly主题配置","Hexo/Qexo","JavaScript/This指向与改变This指向","JavaScript/JS防抖与节流","JavaScript/如何在1分钟内完美解释什么是 JSONP 请求？","前端技术栈/移动端最佳适配解决方案","GitHub/Git常用命令","前端技术栈/来自2.5年前端小白的总结","网站资源/如何买到合适的域名","其他技术栈/CentOS一键安装Docker","网站资源/阿里云资源合集","其他技术栈/15个前端必备学习网站","其他技术栈/CSS3（圆角边框、阴影、浮动详解及示例）","网络协议/浅谈 HTTP 和 HTTPS","学习笔记/CSS属性大全","基础学习路线/CSS第五天-定位","基础学习路线/CSS第四天-浮动","基础学习路线/CSS第三天","基础学习路线/CSS第二天","基础学习路线/CSS第一天","基础学习路线/HTML第二天","基础学习路线/HTML第一天","学习笔记/「学习笔记」JavaScript基础","学习笔记/HTML与CSS进阶","Vue笔记/Vue X-数组对象的双向数据绑定","学习笔记/「学习笔记」CSS基础","学习笔记/「学习笔记」HTML基础","学习笔记/HTML基础","Windows/PE-Win10教程","Windows/Win系统网站-KMS","安卓玩机/Magisk卡刷-通刷官方-了解Fastboot","其他技术栈/前端开发免费资源大汇总","GitHub/Git基础-Github自定义域名","学习笔记/CSS笔记","Vscode/Vscode笔记-24款插件","其他技术栈/免费常用的前端CDN库","其他技术栈/软件及网站推荐","Vscode/记录 Vscode 插件","Hexo/Hexo音乐排行-Netlify CMS","GitHub/玩转GitHub","jQuery/jQuery自动触发事件与bootstrapjQuery插件用法","Hexo/使用Hexo和Github搭建个人博客","Hexo/Hexo博客搭建指南","Hexo/Hexo相关","Markdown/Markdown基础--高级教程","Markdown/Markdown基础教程"];function toRandomPost(){ pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]); };</script>