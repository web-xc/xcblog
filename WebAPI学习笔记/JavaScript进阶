<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>JavaScript 进阶 | XC's Blog</title><noscript>开启JavaScript才能访问本站哦~</noscript><link rel="icon" href="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><!-- index.css--><link rel="stylesheet" href="/css/index.css?v=1.5.1"><!-- inject head--><link rel="stylesheet" href="https://cdn.cbd.int/solitude-source/icon/scoicon.min.css"><link rel="stylesheet" href="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.css"><!-- aplayer--><link rel="stylesheet" href="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css"><!-- swiper--><!-- Open Graph--><meta name="description" content="作用域 作用域规定了变量能够被访问的范围，离开这个范围变量就不能被访问 作用域分为： 局部作用域局部作用域分为函数作用域和块作用域。 函数作用域： 在函数内部声明的变量只能在函数内部被访问，外部无法访问 总结： 函数内部声明的变量，在函数外部无法被访问 函数的参数也是函数内部的局部的变量 不"><!-- pwa--><script>(win => {
        win.saveToLocal = {
            set: function setWithExpiry(key, value, ttl) {
                if (ttl === 0)
                    return
                const now = new Date()
                const expiryDay = ttl * 86400000
                const item = {
                    value: value,
                    expiry: now.getTime() + expiryDay,
                }
                localStorage.setItem(key, JSON.stringify(item))
            },

            get: function getWithExpiry(key) {
                const itemStr = localStorage.getItem(key)

                if (!itemStr) {
                    return undefined
                }
                const item = JSON.parse(itemStr)
                const now = new Date()

                if (now.getTime() > item.expiry) {
                    localStorage.removeItem(key)
                    return undefined
                }
                return item.value
            }
        }

        const DarkModeStatus = localStorage.getItem('theme')
        if (DarkModeStatus !== null) {
            if (DarkModeStatus === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-theme', 'light')
            }
        }

        const asideStatus = saveToLocal.get('aside-status')
        if (asideStatus !== undefined) {
            if (asideStatus === 'hide') {
                document.documentElement.classList.add('hide-aside')
            } else {
                document.documentElement.classList.remove('hide-aside')
            }
        }
    }
)(window)

console.log(
    "%c Program: Hexo %c Theme: Hexo-Theme-Solitude %c Version: v1.5.1",
    "border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#ff3842;margin:10px 0",
    "padding: 5px 10px;color:white;background:#3e9f50;",
    "border-radius:0 5px 5px 0;padding: 5px 10px;background:#0084ff;"
);</script><!-- global head--><script>const GLOBAL_CONFIG = {
    root: '/',
    algolia: undefined,
    localsearch: undefined,
    runtime: '2021-04-20 00:00:00',
    lazyload: {
        enable: true,
        error: '/img/error_load.png'
    },
    hightlight: {
        enable: true,
        limit: 200,
        expand: false,
        copy: true,
    },
    randomlinks: false,
    lang: {
        theme: {
            dark: '已切换至深色模式',
            light: '已切换至浅色模式',
        },
        copy: {
            success: '复制成功',
            error: '复制失败',
        },
        backtop: '返回顶部',
        time: {
            recent: '最近',
            yesterday: '昨天',
            berforeyesterday: '前天',
            daybefore: '天前',
            runtime: '天',
        },
        search: {
            empty: '找不到你查询的内容：${query}',
            hit: '找到 ${hits} 条结果，用时 ${time} 毫秒',
            placeholder: '输入关键词快速查找',
        },
        chs: {
            chs_to_cht: '繁體中文',
            cht_to_chs: '简体中文',
        }
    },
    aside: {
        sayhello: {
            morning: '一日之计在于晨',
            noon: '吃饱了才有力气干活',
            afternoon: '集中精力，攻克难关',
            night: '不要太劳累了，早睡更健康',
            goodnight: '睡个好觉，保证精力充沛',
        },
        sayhello2: ["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙","🤝 专修交互与设计","🏃 脚踏实地行动派","🧱 团队小组发动机","💢 壮汉人狠话不多","🎮 电竞游戏爱好者"],
    },
    covercolor: {
        enable: true
    },
    comment: {
        enable: false,
        type: '',
        commentBarrage: false,
        randomInfoStart: ["聪敏的","可爱的","美丽的"],
        randomInfoEnd: ["白菜","小可爱","小仙女"],
        twikoo: {
            url: '',
            accessToken: ''
        },
        waline: {
            url: '',
        }
    },
    lightbox: 'null',
    rightside: {
        enable: false
    },
    ai: {
        enable: true,
        key: '',
        talk: '我是王卓Sco开发的摘要生成助理ScoGPT，ScoGPT在静态部署时进行摘要的撰写，并且在访客访问时通过ScoCorrection转译后的文本摘要实现工具。我在这里只负责已经生成的摘要显示，你无法与我直接沟通，但我可以回答一些预设的问题。',
        randomPost: false,
    },
    music: {
        enable: false,
    },
    translate: undefined,
};</script><meta name="generator" content="Hexo 6.3.0"></head><body id="body"><!-- universe--><canvas id="universe"></canvas><!-- loading--><!-- console--><div id="console"><div class="close-btn" onclick="sco.hideConsole()"><i class="scoicon sco-close-fill"></i></div><div class="button-group"><div class="console-btn-item"><a class="darkmode_switchbutton" onclick="sco.switchDarkMode()" title="昼夜切换" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i></a></div><div class="console-btn-item" id="consoleHideAside"><a class="asideSwitch" onclick="sco.switchHideAside()" title="边栏显示控制" href="javascript:void(0);"><i class="scoicon sco-side-bar-fill"></i></a></div><div class="console-btn-item" id="consoleMusic" onclick="sco.musicToggle()"><a class="music-switch" title="音乐开关" href="javascript:void(0);"><i class="scoicon sco-disc-fill"></i></a></div></div><div class="console-mask" onclick="sco.hideConsole()"></div></div><!-- sidebar--><div id="sidebar" style="zoom: 1;"><div id="menu-mask" style="display: none;"></div><div id="sidebar-menus"><span class="sidebar-menu-item-title">功能</span><div class="sidebar-menu-item"><a class="darkmode_switchbutton menu-child" onclick="sco.switchDarkMode()" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i><span>显示模式</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div><span class="sidebar-menu-item-title">标签</span><div class="card-widget card-tags card-archives card-webinfo card-allinfo"><div class="card-tag-cloud"><a href="/tags/Ajax%E7%AC%94%E8%AE%B0/">Ajax笔记<sup>6</sup></a><a href="/tags/Hexo/">Hexo<sup>6</sup></a><a href="/tags/Qexo/">Qexo<sup>1</sup></a><a href="/tags/GitHub/">GitHub<sup>3</sup></a><a href="/tags/JavaScript/">JavaScript<sup>3</sup></a><a href="/tags/Markdown/">Markdown<sup>2</sup></a><a href="/tags/JavaScript%E7%AC%94%E8%AE%B0/">JavaScript笔记<sup>5</sup></a><a href="/tags/Vscode/">Vscode<sup>2</sup></a><a href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/">Vue前置基础<sup>5</sup></a><a href="/tags/Vue%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/">Vue框架笔记<sup>6</sup></a><a href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/">面试题<sup>2</sup></a><a href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/">Web APIs笔记<sup>10</sup></a><a href="/tags/JavaScript%E9%AB%98%E7%BA%A7/">JavaScript高级<sup>5</sup></a><a href="/tags/Windows/">Windows<sup>3</sup></a><a href="/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF%E6%A0%88/">其他技术栈<sup>6</sup></a><a href="/tags/jQuery/">jQuery<sup>1</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/">前端技术栈<sup>3</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CSS/">学习笔记-CSS<sup>9</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-HTML/">学习笔记-HTML<sup>2</sup></a><a href="/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/">前端经验<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/">前端笔记<sup>3</sup></a><a href="/tags/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/">网站资源<sup>2</sup></a><a href="/tags/%E5%AE%89%E5%8D%93%E7%8E%A9%E6%9C%BA/">安卓玩机<sup>1</sup></a><a href="/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/">网络协议<sup>1</sup></a></div></div></div></div><!-- keyboard--><div class="post" id="body-wrap"><header class="post-bg" id="page-header"><nav class="show" id="nav"><div id="nav-group"><div id="blog_name"><a id="site-name" href="/" title="返回博客主页"><span class="title">XC's Blog</span></a></div><div id="page-name-mask"><div id="page-name"><a id="page-name-text" onclick="sco.toTop()">JavaScript 进阶</a></div></div><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div></div><div id="nav-left"></div><div id="nav-right"><div class="nav-button" id="randomPost_button"><a class="site-page" onclick="toRandomPost()" title="随机一篇文章" href="javascript:void(0);"><i class="scoicon sco-signal-tower-fill"></i></a></div><div class="nav-button" id="nav-console"><a class="console_switchbutton" onclick="sco.showConsole()" title="中控台" href="javascript:void(0);"><i class="scoicon sco-dashboard-fill"></i></a></div><div class="nav-button" id="nav-totop" onclick="sco.toTop()"><a class="totopbtn"><i class="scoicon sco-arrow-up-line"></i><span id="percent">0</span></a></div><div id="toggle-menu"><a class="site-page"><i class="scoicon sco-menu-line"></i></a></div></div></div></nav><div class="coverdiv" id="coverdiv"><img class="nolazyload" id="post-cover" src="https://npm.elemecdn.com/webxc/cover/js1.webp" alt="JavaScript 进阶"></div><div id="post-info"><div id="post-firstinfo"><div class="meta-firstline"><a class="post-meta-original" title="该文章为原创文章，注意版权协议">原创</a><span class="post-meta-categories"><a class="post-meta-categories" href="/categories/Web-APIs笔记/">Web APIs笔记</a></span><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/"><span class="tags-name tags-punctuation">Web APIs笔记</span></a></div></div></div></div><h1 class="post-title">JavaScript 进阶</h1><div id="post-meta"><div class="meta-secondline"></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><div class="post-ai"><div class="ai-title"><div class="ai-title-left"><i class="ai-title-icon scoicon sco-robot-fill"></i><div class="ai-title-text">文章摘要</div></div><div class="ai-tag" id="ai-tag">GPT 4</div></div><div class="ai-explanation" style="display: block;"></div><div class="ai-suggestions"></div><div class="ai-bottom"><div class="ai-tips">此内容根据文章生成，并经过人工审核，仅用于文章内容的解释与总结</div><a class="ai-report" title="投诉" target="_blank" rel="noopener" href="https://blog.wzsco.top/about/">投诉</a></div></div><article class="post-content" id="article-container"><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote>
<p>作用域规定了变量能够被访问的范围，离开这个范围变量就不能被访问</p>
</blockquote>
<p><strong>作用域分为：</strong></p>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>局部作用域分为函数作用域和块作用域。</p>
<p><strong>函数作用域：</strong></p>
<blockquote>
<p>在函数内部声明的变量只能在函数内部被访问，外部无法访问</p>
</blockquote>
<p>总结：</p>
<ol>
<li>函数内部声明的变量，在函数外部无法被访问</li>
<li>函数的参数也是函数内部的局部的变量</li>
<li>不同函数内部声明的变量无法相互访问</li>
<li>函数执行完毕后，函数的变量实际被清空了</li>
</ol>
<p><strong>块作用域：</strong></p>
<blockquote>
<p>在JavaScript中使用 <code>&#123;&#125;</code> 包裹的代码块内部声明的变量外部将有可能无法被访问</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// i 只能的该代码块中被访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 超出了t的作用域 ，报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ol>
<li><code>let</code> 声明的变量，<code>const</code> 声明的常量，都会产生块级作用域</li>
<li><code>var</code> 声明的变量不会产生块级作用域</li>
<li>不同代码块之间的变量无法相互访问</li>
<li>推荐使用 <code>let</code> 和  <code>const</code></li>
</ol>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><blockquote>
<p>在 <code>&lt;script&gt;</code> 标签 和 <code>.js</code> 文件的<strong>最外层</strong>就是全局作用域，在此声明的变量在函数内部也可以访问，全局作用域下声明的变量，任何其他作用域都可以被访问</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局作用域，下声明变量num</span></span><br><span class="line"><span class="keyword">const</span> num=<span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//函数内部可以使用</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li>为 window 对象动态添加的属性默认也是全局的，不推荐</li>
<li>函数未使用任何关键字声明的变量为全局变量，不推荐</li>
<li>尽可能少的声明全局变量，防止全局变量被污染</li>
</ol>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><blockquote>
<p>作用域链本质是底层的变量查找机制</p>
</blockquote>
<ul>
<li>函数在被执行时，会优先找当前函数作用域中查找变量</li>
<li>如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局作用域</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="comment">//局部作用域</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">g</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>()</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<ol>
<li>嵌套更新的作用域串联起来形成了作用域链</li>
<li>相同作用域链中按着从小到大的规则查找变量</li>
<li>子作用域能够访问父级作用域，父级作用域无法访问子级作用域</li>
</ol>
<h3 id="JS-的垃圾回收机制"><a href="#JS-的垃圾回收机制" class="headerlink" title="JS 的垃圾回收机制"></a>JS 的垃圾回收机制</h3><blockquote>
<p>垃圾回收机制 (Garbage Collection) 简称 GC</p>
<p>JS 中的内存的分配和回收都是自动完成的，，内存在不使用的时候会被垃圾回收器自动回收。</p>
<p>但如果不了解JS的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况</p>
<p>不再用到的内存，没有及时释放，就叫做内存泄漏</p>
</blockquote>
<p><strong>内存的生命周期 ：</strong></p>
<ol>
<li>内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</li>
<li>内存使用：即读写内存，也就是使用变量、函数等</li>
<li>内存回收：使用完毕，由垃圾回收自动回收不再使用的内存</li>
<li><ul>
<li>全局变量一般不会回收(关闭页面回收)；</li>
<li>一般情况下局部变量的值, 不用了, 会被自动回收掉</li>
</ul>
</li>
</ol>
<p><strong>垃圾回收算法说明</strong></p>
<blockquote>
<p>所谓垃圾回收, 核心思想就是如何判断内存是否已经不再会被使用了, 如果是, 就视为垃圾, 释放掉<br>下面介绍两种常见的浏览器垃圾回收算法: 引用计数法 和 标记清除法</p>
</blockquote>
<p>引用计数<br>IE采用的引用计数算法, 定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。<br>算法：</p>
<ol>
<li>跟踪记录每个值被引用的次数。</li>
<li>如果这个值的被引用了一次，那么就记录次数1</li>
<li>多次引用会累加。</li>
<li>如果减少一个引用就减1。</li>
<li>如果引用次数是0 ，则释放内存。</li>
</ol>
<p>引用计数算法是个简单有效的算法。<br>但它却存在一个致命的问题：嵌套引用。<br>如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。</p>
<p>标记清除法<br>现代的浏览器已经不再使用引用计数算法了。<br>现代浏览器通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的。<br>核心：</p>
<ol>
<li>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。</li>
<li>就是从根部（在JS中就是全局对象）出发定时扫描内存中的对象。 凡是能从根部到达的对象，都是还需要使用的。</li>
<li>那些无法由根部出发触及到的对象被标记为不再使用，稍后进 行回收。</li>
</ol>
<p><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720101238312.png"></p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote>
<p>概念：一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域<br>简单理解：闭包 = 内层函数 + 外层函数的变量</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br><span class="line">outer</span><br><span class="line"><span class="comment">//	内层函数调用外层函数的变量，就是闭包</span></span><br></pre></td></tr></table></figure>

<p>作用： 封闭数据，提供操作，外部也可以访问函数内部的变量</p>
<p>基本格式：</p>
<p><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720102143313.png"></p>
<p>闭包应用：实现数据的私有<br>比如，我们要做个统计函数调用次数，函数调用一次，就++</p>
<p>普通写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//2</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<p>这个count 是个全局变量，很容易被修改 </p>
<p>闭包写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">        count++</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result =<span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">result</span>() <span class="comment">//2</span></span><br><span class="line"><span class="title function_">result</span>() <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<p>实现了数据私有，无法直接修改count</p>
<p> 闭包可能引起的问题：内存泄漏</p>
<h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><blockquote>
<p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问（仅存在于var声明变量）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//不报错 控制台显示undefined</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>变量在未声明即被访问时会报语法错误</li>
<li>变量在var声明之前即被访问，变量的值为 undefined</li>
<li>let / const  声明的变量不存在变量提升</li>
<li>变量提升出现在相同作用域当中</li>
<li>实际开发中推荐先声明再访问变量</li>
</ol>
<h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li><p>动态参数</p>
<p>arguments 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求和函数 不管用户传入几个实参，都要把和求出来</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        s += <span class="variable language_">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">5</span>,<span class="number">10</span>) <span class="comment">//15</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//6</span></span><br></pre></td></tr></table></figure></li>
<li><p>剩余参数</p>
<p>剩余参数允许我们将一个不定数量的参数表示为一个数组</p>
<ol>
<li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li>
<li>借助 <code>...</code> 获取的剩余实参，是个真数组</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...other</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; other.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        s += other[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">5</span>,<span class="number">10</span>) <span class="comment">//15</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//6</span></span><br></pre></td></tr></table></figure>

<p>区别：</p>
<ol>
<li>… 是语法符号，置于最末函数形参之前，用于获取多余的实参</li>
<li>借助 … 获取的剩余实参，是个真数组</li>
</ol>
</li>
</ul>
<hr>
<p>展开运算符：<code>...</code></p>
<blockquote>
<p>展开运算符 (…)， 将一个数组进行展开，不会修改原数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">//1 2 3 4 5</span></span><br></pre></td></tr></table></figure>

<p>典型运用场景： 求数组最大值(最小值)、合并数组等</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> arr2=[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="comment">//最大值</span></span><br><span class="line"><span class="keyword">const</span> max=<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)</span><br><span class="line"><span class="comment">//合拼</span></span><br><span class="line"><span class="keyword">const</span> arr3=[...arr,...arr2]</span><br></pre></td></tr></table></figure>

<p>展开运算符 or 剩余参数<br>剩余参数：函数参数使用，得到真数组<br>展开运算符：数组中使用，数组展开</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">//1.箭头 无参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.只有一个参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x=&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.函数体只有一行代码，可以写一行上，无需写 return 直接返回值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x,y</span>) =&gt; x + y  <span class="comment">//返回 x + y 的值</span></span><br><span class="line"><span class="comment">//加括号的函数体返回对象字面量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn1</span> = uname =&gt;(&#123;uname : uname&#125;) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn1</span>(<span class="string">&#x27;叶湘伦&#x27;</span>)) <span class="comment">//控制台：&#123;uname:&quot;叶湘伦&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>箭头函数属于表达式函数，因此不存在函数提升</li>
<li>箭头函数只有一个参数时可以省略圆括号 ()</li>
<li>箭头函数函数体只有一行代码时可以省略花括号 {}，并自动做为返回值被<br>返回</li>
<li>加括号的函数体返回对象字面量表达式</li>
</ol>
<p> <strong>箭头函数参数：</strong></p>
<ol>
<li>普通函数有 <code>arguments</code> 动态参数</li>
<li>箭头函数没有 <code>arguments </code>动态参数，但是有 剩余参数 <code>..args</code></li>
</ol>
<p> <strong>箭头函数 this：</strong><br>在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的 this 值<br>箭头函数不会创建自己的 this ,它只会从自己的作用域链的上一层沿用 this 。</p>
<p><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720110228858.png"></p>
<p><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720110259612.png"></p>
<p>在开发中【使用箭头函数前需要考虑函数中 this 的值】，事件回调函数使用箭头函数时，this 为全局的 window，因此，DOM事件回调函数为了简便，还是不太推荐使用箭头函数</p>
<h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><blockquote>
<p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通的数组</span></span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="comment">// 批量声明变量 a b c </span></span><br><span class="line">  <span class="comment">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span></span><br><span class="line">  <span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>基本语法：</p>
<ol>
<li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li>
<li>变量的顺序对应数组单元值的位置依次进行赋值操作</li>
<li>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></li>
<li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li>
<li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li>
</ol>
<p><strong>对象解构</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line"> <span class="keyword">const</span> user = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 批量声明变量 name age</span></span><br><span class="line"> <span class="comment">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span></span><br><span class="line"> <span class="keyword">const</span> &#123;name, age&#125; = user</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 小明</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>赋值运算符 <code>=</code> 左侧的 <code>&#123;&#125;</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li>
<li>对象属性的值将被赋值给与属性名相同的变量</li>
<li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li>
<li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li>
</ol>
<h2 id="遍历数组-forEach-方法"><a href="#遍历数组-forEach-方法" class="headerlink" title="遍历数组 forEach 方法"></a>遍历数组 forEach 方法</h2><blockquote>
<p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">遍历数组.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">当前数组元素,索引号</span>)&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>forEach 主要是遍历数组</li>
<li>参数当前数组元素是必须要写的， 索引号可选。</li>
</ol>
<h2 id="筛选数组-filter-方法"><a href="#筛选数组-filter-方法" class="headerlink" title="筛选数组 filter 方法"></a>筛选数组 filter 方法</h2><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720111855654.png"  style="zoom: 200%;" />

<blockquote>
<p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
</blockquote>
<p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">遍历数组.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">当前数组元素,索引号</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> 筛选条件</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">//筛选数组大于30的元素</span></span><br><span class="line"><span class="keyword">const</span> arr=[<span class="number">10</span>,<span class="number">26</span>,<span class="number">62</span>,<span class="number">61</span>,<span class="number">56</span>,<span class="number">12</span>,<span class="number">36</span>]</span><br><span class="line"><span class="keyword">const</span> re = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">30</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re) <span class="comment">//[62,61,56,36]</span></span><br></pre></td></tr></table></figure>

<p>返回值：返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组<br>参数：currentValue 必须写， index 可选<br>因为返回新数组，所以不会影响原数组</p>
<h2 id="对象创建方法"><a href="#对象创建方法" class="headerlink" title="对象创建方法"></a>对象创建方法</h2><ul>
<li><p>利用字面量创建</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;叶湘伦&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>利用 new Object 创建对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;叶湘伦&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>利用构造函数创建</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Stu</span> = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="string">&#x27;叶湘伦&#x27;</span>，<span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>语法：大写字母开头的函数</li>
<li>约定：它们的命名以大写字母开头。只能由 “new” 操作符来执行。</li>
</ul>
<p><strong>说明：</strong></p>
<ol>
<li>使用 new 关键字调用函数的行为被称为实例化</li>
<li>实例化构造函数时没有参数可以省略（）</li>
<li>构造函数内部不用写 return ，返回值即为新建的对象</li>
<li>new Object（） new Date（） 也是实例化构造函数</li>
</ol>
<p><strong>实列化执行过程：</strong></p>
<ol>
<li>创建一个新空对象</li>
<li>构造函数 this 指向新对象</li>
<li>执行构造函数代码，修改 this ，添加新的属性</li>
<li>返回新的对象</li>
</ol>
</li>
</ul>
<h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><blockquote>
<p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="comment">//构造函数内部的 this 就是实例对象</span></span><br><span class="line">    <span class="comment">//实例对象中动态添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">      <span class="comment">//实例对象中动态添加方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化 ，Stu 是实列对象</span></span><br><span class="line"><span class="comment">// Stu 实际就是构造函数内部的 this</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Stu</span> = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="string">&#x27;叶湘伦&#x27;</span>，<span class="number">18</span>)</span><br><span class="line"><span class="comment">//访问实例属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Stu</span>.<span class="property">name</span>)</span><br><span class="line"><span class="comment">//调用实列方法</span></span><br><span class="line"><span class="title class_">Stu</span>.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>实例对象的属性和方法即为实例成员</li>
<li>为构造函数传入参数，动态创建结构相同但值不同的对象</li>
<li>构造函数创建的实例对象彼此独立互不影响。</li>
</ol>
<p><strong>静态成员：</strong></p>
<blockquote>
<p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">   <span class="comment">//实例成员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态属性</span></span><br><span class="line"><span class="title class_">Obj</span>.<span class="property">eyes</span> = <span class="number">2</span> </span><br><span class="line"><span class="title class_">Obj</span>.<span class="property">arms</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="title class_">Obj</span>.<span class="property">walk</span> = funtion () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;走路中&#x27;</span>)</span><br><span class="line">    <span class="comment">//this 指向 person</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>静态成员指的是添加到构造函数本身的属性和方法</li>
<li>一般公共特征的属性或方法静态成员设置为静态成员</li>
<li>静态成员方法中的 <code>this</code> 指向构造函数本身</li>
</ol>
<h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><p> 在 JavaScript 中<strong>最主要</strong>的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。</p>
<p>在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的，JavaScript 基础阶段学习的 <code>Date</code> 就是内置的构造函数。</p>
<p>引用类型：</p>
<p><code>Object</code> :</p>
<p>三个常用静态方法（静态方法就是只有构造函数Object可以调用的）</p>
<p><code>Object.keys</code> 静态方法获取对象中所有属性（键）</p>
<p><code>Object.values</code> 静态方法获取对象中所有属性值</p>
<p><code>Object.assign</code> 静态方法常用于对象拷贝</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.keys</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;叶湘伦&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">key</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [&#x27;name&#x27;,&#x27;age&#x27;]  返回是一个数组</span></span><br><span class="line"><span class="comment">//Object.values</span></span><br><span class="line"><span class="keyword">const</span> arr2 =<span class="title class_">Object</span>.<span class="title function_">values</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)  <span class="comment">// [&#x27;叶湘伦&#x27;,18]  返回是一个数组</span></span><br><span class="line"><span class="comment">//Object.assign</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2,obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)  <span class="comment">// &#123;name:&#x27;叶湘伦&#x27;,age:18&#125;</span></span><br><span class="line"><span class="comment">//使用：经常使用的场景给对象添加属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj,&#123;<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// &#123;name:&#x27;叶湘伦&#x27;,age:18,sex:&#x27;男&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><code>Array</code> :</p>
<p>数组常见实例方法-核心方法</p>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220721112028550.png"  style="zoom:150%;" />

<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>forEach</td>
<td>遍历数组</td>
<td>不返回值，用于不改变值，经常用于查找打印输出值</td>
</tr>
<tr>
<td>filter</td>
<td>过滤数组</td>
<td>筛选数组元素，并生成新数组</td>
</tr>
<tr>
<td>map</td>
<td>迭代数组</td>
<td>返回新数组，新数组里面的元素是处理之后的值，经常用于处理数据</td>
</tr>
<tr>
<td>reduce</td>
<td>累积器</td>
<td>返回函数累计处理的结果，经常用于求和等</td>
</tr>
</tbody></table>
<p>总结：</p>
<img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220721115506798.png"  style="zoom:150%;" />

<ol>
<li><p>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</p>
</li>
<li><p>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环 (重点)</p>
</li>
<li><p>实例方法 <code>filter</code> 过滤数组单元值，生成新数组(重点)</p>
</li>
<li><p>实例方法 <code>map</code> 迭代原数组，生成新数组(重点)</p>
</li>
<li><p>实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p>
</li>
<li><p>实例方法 <code>find</code> 查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)</p>
</li>
<li><p>实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p>
</li>
<li><p>实例方法<code>some</code> 检测数组中的元素是否满足指定条件 <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p>
</li>
<li><p>实例方法 <code>concat</code> 合并两个数组，返回生成新数组</p>
</li>
<li><p>实例方法 <code>sort</code> 对原数组单元值排序</p>
</li>
<li><p>实例方法 <code>splice</code> 删除或替换原数组单元</p>
</li>
<li><p>实例方法 <code>reverse</code> 反转数组</p>
</li>
<li><p>实例方法 <code>findIndex</code> 查找元素的索引值</p>
</li>
</ol>
<p><code>String</code>：</p>
<p>总结：</p>
<ol>
<li>实例属性 <code>length</code> 用来获取字符串的度长(重点)</li>
<li>实例方法 <code>split(&#39;分隔符&#39;)</code> 用来将字符串拆分成数组(重点)</li>
<li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取(重点)</li>
<li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头(重点)</li>
<li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false(重点)</li>
<li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li>
<li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li>
<li>实例方法 <code>indexOf</code> 检测是否包含某字符</li>
<li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li>
<li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li>
<li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li>
</ol>
<p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p>
<hr>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote>
<p>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象</p>
</blockquote>
<p><strong>作用：</strong></p>
<ol>
<li><p>共享方法</p>
</li>
<li><p>可以把那些不变的方法，直接定义在 prototype 对象上</p>
</li>
</ol>
<p>constructor 属性： 指向该原型对象的构造函数</p>
<p>对象原型：<br>对象都会有一个属性 <code>__proto__</code> 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有<code> __proto__</code> 原型的存在</p>
<p><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220722105529340.png"></p>
<p><strong>总结：</strong></p>
<ol>
<li><code>prototype</code>是什么？哪里来的？</li>
</ol>
<ul>
<li>原型（原型对象）</li>
<li>构造函数都自动有原型</li>
</ul>
<ol start="2">
<li><code>constructor</code>属性在哪里？作用干啥的？</li>
</ol>
<ul>
<li><p><code>prototype</code>原型和对象原型<code>__proto__</code>里面都有</p>
</li>
<li><p>都指向创建实例对象/原型的构造函数</p>
</li>
</ul>
<ol start="3">
<li><code>__proto__</code>属性在哪里？指向谁？</li>
</ol>
<ul>
<li>在实例对象里面</li>
<li>指向原型 <code>prototype</code></li>
</ul>
<p>原型继承</p>
<blockquote>
<p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性。</p>
</blockquote>
<ol>
<li><p>封装-抽取公共部分</p>
<ul>
<li>把男人和女人公共的部分抽取出来放到人类里面</li>
</ul>
</li>
<li><p>继承-让男人和女人都能继承人类的一些属性和方法</p>
</li>
</ol>
<ul>
<li>把男人女人公共的属性和方法抽取出来 People</li>
<li>然后赋值给Man的原型对象，可以共享这些属性和方法</li>
<li>注意让constructor指回Man这个构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">People</span> = &#123;</span><br><span class="line">    <span class="attr">head</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">eyes</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">leys</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//男人</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//公共属性和方法给原型</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">People</span></span><br><span class="line"><span class="comment">//如果我们给男人添加了一个吸烟的方法，发现女人自动也添加这个方法</span></span><br><span class="line"><span class="comment">//男人和女人都同时使用了同一个对象，根据引用类型的特点，他们指向同一个对象，修改一个就会都影响</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">smoking</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//女人</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woamn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//独有方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">body</span> =<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承写法完善 ,解决上面问题</span></span><br><span class="line"><span class="comment">//男人和女人不要使用同一个对象，但是不同对象里面包含相同的属性和方法</span></span><br><span class="line"><span class="comment">//答案：构造函数</span></span><br><span class="line"><span class="comment">//new 每次都会创建一个新的对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>) = &#123;</span><br><span class="line">    <span class="attr">head</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">eyes</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">leys</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//男人</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//公共属性和方法</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> =<span class="keyword">new</span> <span class="title class_">People</span>()</span><br></pre></td></tr></table></figure>

<p><strong>原型链：</strong></p>
<blockquote>
<p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链</p>
</blockquote>
<p><img data-lazy-src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220722111316754.png"></p>
<p>原型链-查找规则：</p>
<ol>
<li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li>
<li>如果没有就查找它的原型（也就是 <code>__proto__</code>指向的 <code>prototype </code>原型对象）</li>
<li>如果还没有就查找原型对象的原型（<code>Object</code> 的原型对象）</li>
<li>依此类推一直找到 <code>Object </code>为止（null）</li>
<li><code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</li>
</ol>
<hr>
<h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p><strong>拷贝的是地址</strong><br><strong>常见方法：</strong></p>
<ol>
<li>拷贝对象：<code>Object.assgin()</code>  展开运算符 <code>&#123;...obj&#125; </code>拷贝对象</li>
<li>拷贝数组：<code>Array.prototype.concat()</code> 或者 <code>[...arr]</code></li>
</ol>
<p><strong>总结：</strong></p>
<ol>
<li>直接赋值和浅拷贝有什么区别？</li>
</ol>
<ul>
<li>直接赋值的方法，只要是对象，都会相互影响，因为是直接拷贝对<br>象栈里面的地址</li>
<li>浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会<br>相互影响</li>
</ul>
<ol start="2">
<li>浅拷贝怎么理解？</li>
</ol>
<ul>
<li>拷贝对象之后，里面的属性值是简单数据类型直接拷贝值</li>
<li>如果属性值是引用数据类型则拷贝的是地址</li>
</ul>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p><strong>拷贝的是对象，不是地址</strong></p>
<p>常见方法：</p>
<ol>
<li>通过递归实现深拷贝</li>
<li>lodash/cloneDeep</li>
<li>通过JSON.stringify()实现</li>
</ol>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="throw-抛异常"><a href="#throw-抛异常" class="headerlink" title="throw 抛异常"></a>throw 抛异常</h3><p>总结：</p>
<ol>
<li><code>throw</code> 抛出异常信息，程序也会终止执行</li>
<li><code>throw </code>后面跟的是错误提示信息</li>
<li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li>
</ol>
<h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try/catch"></a>try/catch</h3><p>总结：</p>
<ol>
<li><code>try...catch</code> 用于捕获错误信息</li>
<li>将预估可能发生错误的代码写在 <code>try</code> 代码段中</li>
<li>如果 <code>try</code> 代码段中出现错误后，会执行 <code>catch </code>代码段，并截获到错误信息</li>
<li><code>finally</code> 不管是否有错误，都会执行</li>
</ol>
<p> <strong>debugger</strong> ：类似浏览器调试打断点</p>
<h2 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h2><h3 id="this指向-普通函数"><a href="#this指向-普通函数" class="headerlink" title="this指向-普通函数"></a>this指向-普通函数</h3><blockquote>
<p>普通函数的调用方式决定了 this 的值，即【谁调用 this 的值指向谁】</p>
</blockquote>
<p>普通函数没有明确调用者时 this 值为 window，严格模式下没有调用者时 this 的值为 undefined</p>
<h3 id="this指向-箭头函数"><a href="#this指向-箭头函数" class="headerlink" title="this指向-箭头函数"></a>this指向-箭头函数</h3><p>箭头函数中的 this 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 this ！</p>
<ol>
<li>箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的</li>
<li>箭头函数中的this引用的就是最近作用域中的this</li>
<li>向外层作用域中，一层一层查找this，直到有this的定义</li>
</ol>
<h3 id="改变this"><a href="#改变this" class="headerlink" title="改变this"></a>改变this</h3><p><code>call()</code> 方法调用函数，同时指定被调用函数中 this 的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn.<span class="title function_">call</span>(thisArg,arg1,arg2,...)</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li><p><code>thisArg</code>：在 fn 函数运行时指定的 <code>this</code> 值</p>
</li>
<li><p><code>arg1，arg2</code>：传递的其他参数</p>
</li>
<li><p>返回值就是函数的返回值，因为它就是调用函数</p>
</li>
</ol>
<hr>
<p><code>apply()</code> 调用函数，同时指定被调用函数中 this 的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn.<span class="title function_">apply</span>(thisArg,[argArray])</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li><code>thisArg</code>：在fn函数运行时指定的 this 值</li>
<li><code>argsArray</code>：传递的值，必须包含在数组里面</li>
<li>返回值就是函数的返回值，因为它就是调用函数</li>
<li>因此 <code>apply</code> 主要跟数组有关系，比如使用 <code>Math.max() </code>求数组的最大值</li>
</ol>
<hr>
<p><code>bind()</code> 不会调用函数。但是能改变函数内部this 指向</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn.<span class="title function_">bind</span>(thisArg,arg1,arg2,...)</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li><code>thisArg</code>：在 fn 函数运行时指定的 <code>this</code> 值</li>
<li><code>arg1，arg2</code>：传递的其他参数</li>
<li>返回由指定的 this 值和初始化参数改造的 原函数拷贝 （新函数）</li>
<li>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用  bind，比如改变定时器内部的 this 指向.</li>
</ol>
<hr>
<p>总结：</p>
<ul>
<li><p>区别</p>
<ol>
<li><code>call</code> 和 <code>apply</code> 会调用函数, 并且改变函数内部 this 指向</li>
<li><code>call</code> 和 <code>apply</code> 传递的参数不一样, <code>call</code> 传递参数 <code>aru1, aru2..</code> 形式 <code>apply</code> 必须数组形式<code>[arg]</code></li>
<li><code>bind</code> 不会调用函数, 可以改变函数内部 this 指向</li>
</ol>
</li>
<li><p>主要应用场景</p>
<ol>
<li>call 调用函数并且可以传递参数</li>
<li>apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li>
<li>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</li>
</ol>
</li>
</ul>
<hr>
<h2 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h2><p> <strong>节流：</strong></p>
<blockquote>
<p>就是指连续触发事件但是在 n 秒中只执行一次函数，比如可以利用节流实现 1s之内 只能触发一次鼠标移动事件</p>
</blockquote>
<p> <strong>防抖：</strong></p>
<blockquote>
<p>指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p>
</blockquote>
<p><strong>使用场景</strong></p>
<ul>
<li>节流： 鼠标移动，页面尺寸发生变化，滚动条滚动等开销比较大的情况下</li>
<li>防抖： 搜索框输入，设定每次输入完毕n秒后发送请求，如果期间还有输入，则从新计算时间</li>
</ul>
<hr>
<h1 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h1><hr>
<h2 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h2><ul>
<li><a target="_blank" rel="noopener" href="https://gitee.com/">Gitee</a></li>
<li><a target="_blank" rel="noopener" href="https://github.com/">Github</a></li>
<li><a target="_blank" rel="noopener" href="https://www.nowcoder.com/">NOWCODER</a></li>
<li><a target="_blank" rel="noopener" href="https://leetcode-cn.com/">LeetCode</a></li>
<li><a target="_blank" rel="noopener" href="https://codetop.cc/home">CodeTop</a></li>
<li><a target="_blank" rel="noopener" href="https://www.wondercv.com/">WonderCV</a></li>
<li><a target="_blank" rel="noopener" href="https://mail.qq.com/">QQMail</a></li>
<li><a target="_blank" rel="noopener" href="https://email.163.com/">NetEase Mail</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/">bilibili</a></li>
<li><a target="_blank" rel="noopener" href="https://www.zhihu.com/">知乎</a></li>
<li><a target="_blank" rel="noopener" href="https://36kr.com/">36 氪</a></li>
<li><a target="_blank" rel="noopener" href="https://juejin.cn/">掘金</a></li>
<li><a target="_blank" rel="noopener" href="https://www.jianshu.com/">简书</a></li>
<li><a target="_blank" rel="noopener" href="https://www.feishu.cn/">飞书</a></li>
<li><a target="_blank" rel="noopener" href="https://shimo.im/">石墨文档</a></li>
<li><a target="_blank" rel="noopener" href="https://weread.qq.com/">微信读书</a></li>
<li><a target="_blank" rel="noopener" href="https://haoma.baidu.com/">百度号码平台</a></li>
<li><a target="_blank" rel="noopener" href="https://fanyi.baidu.com/">百度翻译</a></li>
<li><a target="_blank" rel="noopener" href="https://www.baidu.com/">百度一下</a></li>
</ul>
<h2 id="我爱官网"><a href="#我爱官网" class="headerlink" title="我爱官网"></a>我爱官网</h2><ul>
<li><a target="_blank" rel="noopener" href="https://docschina.org/">印记中文-前端中文文档集合</a></li>
<li><a target="_blank" rel="noopener" href="https://cn.vuejs.org/">Vue.js</a></li>
<li><a target="_blank" rel="noopener" href="https://router.vuejs.org/zh/">Vue Router</a></li>
<li><a target="_blank" rel="noopener" href="https://vant-contrib.gitee.io/vant/##/zh-CN/home">Vant</a></li>
<li><a target="_blank" rel="noopener" href="https://nutui.jd.com/#/">Nut UI</a></li>
<li><a target="_blank" rel="noopener" href="https://didi.github.io/cube-ui/#/zh-CN">Cube UI</a></li>
<li><a target="_blank" rel="noopener" href="https://element.eleme.cn/#/zh-CN">Element UI</a></li>
<li><a target="_blank" rel="noopener" href="https://www.iviewui.com/">IView UI</a></li>
<li><a target="_blank" rel="noopener" href="https://reactjs.org/">React</a></li>
<li><a target="_blank" rel="noopener" href="https://ant.design/index-cn">Ant Design</a></li>
<li><a target="_blank" rel="noopener" href="https://redux.js.org/">Redux</a></li>
<li><a target="_blank" rel="noopener" href="https://www.redux.org.cn/">Redux 中文文档</a></li>
<li><a target="_blank" rel="noopener" href="http://nodejs.cn/">Node.js 中文网</a></li>
<li><a target="_blank" rel="noopener" href="https://www.npmjs.com/">npm</a></li>
<li><a target="_blank" rel="noopener" href="http://www.axios-js.com/">axios 中文文档</a></li>
<li><a target="_blank" rel="noopener" href="https://www.lodashjs.com/">Lodash 中文文档</a></li>
<li><a target="_blank" rel="noopener" href="https://www.swiper.com.cn/">Swiper 中文网</a></li>
<li><a target="_blank" rel="noopener" href="https://echarts.apache.org/zh/index.html">Echarts</a></li>
<li><a target="_blank" rel="noopener" href="https://less.bootcss.com/">Less</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bootcss.com/">Bootstrap 中文网</a></li>
<li><a target="_blank" rel="noopener" href="https://www.jquery123.com/">jQuery API 中文文档</a></li>
</ul>
<h2 id="我爱工具"><a href="#我爱工具" class="headerlink" title="我爱工具"></a>我爱工具</h2><ul>
<li><a target="_blank" rel="noopener" href="https://docsify.js.org/##/">docsify</a></li>
<li><a target="_blank" rel="noopener" href="https://www.kancloud.cn/">看云</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bootcdn.cn/">BootCDN - Bootstrap 中文网开源项目免费 CDN 加速服务</a></li>
<li><a target="_blank" rel="noopener" href="https://www.cnblogs.com/jpfss/p/10457026.html">各大开源软件镜像源</a></li>
<li><a target="_blank" rel="noopener" href="http://koala-app.com/index-zh.html">Koala-Less 编译工具</a></li>
<li><a target="_blank" rel="noopener" href="https://caniuse.com/">Can I use ?</a></li>
<li><a target="_blank" rel="noopener" href="https://tool.oschina.net/">OSCHINA 实用在线工具</a></li>
<li><a target="_blank" rel="noopener" href="https://www.apipost.cn/">ApiPost</a></li>
<li><a target="_blank" rel="noopener" href="https://www.showdoc.com.cn/">ShowDoc</a></li>
<li><a target="_blank" rel="noopener" href="http://rap2.taobao.org/account/login">RAP 接口管理平台</a></li>
<li><a target="_blank" rel="noopener" href="https://www.postman.com/">Postman</a></li>
<li><a target="_blank" rel="noopener" href="https://jsbin.com/?html,output">JS Bin</a></li>
<li><a target="_blank" rel="noopener" href="https://www.iconfont.cn/">iconfont</a></li>
<li><a target="_blank" rel="noopener" href="https://icomoon.io/">IcoMoon</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bitbug.net/">在线制作 ico 图标</a></li>
</ul>
<h2 id="我爱学习"><a href="#我爱学习" class="headerlink" title="我爱学习"></a>我爱学习</h2><ul>
<li><a target="_blank" rel="noopener" href="https://es6.ruanyifeng.com/">ES6 入门教程 - ECMAScript 6 入门（阮一峰）</a></li>
<li><a target="_blank" rel="noopener" href="https://wangdoc.com/javascript/index.html">JavaScript 教程（阮一峰）</a></li>
<li><a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/">MDN 文档</a></li>
<li><a target="_blank" rel="noopener" href="https://www.ruanyifeng.com/blog/">阮一峰的网络日志</a></li>
<li><a target="_blank" rel="noopener" href="https://www.liaoxuefeng.com/">廖雪峰的官方网站</a></li>
<li><a target="_blank" rel="noopener" href="https://tech.meituan.com/">美团技术团队</a></li>
<li><a target="_blank" rel="noopener" href="https://cnodejs.org/">CNode：Node.js 专业中文社区</a></li>
<li><a target="_blank" rel="noopener" href="https://www.w3school.com.cn/index.html">W3school</a></li>
<li><a target="_blank" rel="noopener" href="https://www.w3cschool.cn/">w3cschool</a></li>
<li><a target="_blank" rel="noopener" href="https://www.runoob.com/">菜鸟教程</a></li>
<li><a target="_blank" rel="noopener" href="https://www.kancloud.cn/pillys/qianduan/2049475">前端面试宝典-看云文档</a></li>
</ul>
<h2 id="我爱项目"><a href="#我爱项目" class="headerlink" title="我爱项目"></a>我爱项目</h2><ul>
<li><a target="_blank" rel="noopener" href="http://doc.toutiao.liulongbin.top/">黑马头条-移动端</a></li>
</ul>
<h2 id="我爱视频"><a href="#我爱视频" class="headerlink" title="我爱视频"></a>我爱视频</h2><ul>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV14J4114768">黑马 pink 前端教程</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1ux411d75J">黑马 JavaScript 基础</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1k4411w7sV">黑马 JS DOM BOM 教程</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1a4411w7Gx">黑马 jQuery</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1zz411q7j3">黑马 ES6 高级语法</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV12J411m7MG">黑马 4 小时上手 Vue</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1RE411W776">黑马 Vue 音乐播放器</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1zq4y1p7ga">黑马 Vue2+Vue3 全套</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1x64y1S7S7">黑马 Vue 全家桶实战</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV14y4y1g7M4">黑马 React</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1Ns411N7HU">黑马 Node</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1uK411H7on">尚硅谷 ES6 教程</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1WC4y1b78y">尚硅谷 3 小时入门 Ajax</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1vy4y1s7k6">尚硅谷 5 小时打通 Git</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1e7411j7T5">尚硅谷 Webpack</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1bs411E7pD">尚硅谷 Node</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1Zy4y1K7SH">尚硅谷 Vue2+Vue3 全套</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1Vf4y1T7bw">尚硅谷 Vue 项目：尚品汇</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1wy4y1D7JT">尚硅谷 React</a></li>
<li><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV15741177Eh">coderwhy Vue</a></li>
</ul>
<h2 id="我爱杂七杂八棒棒"><a href="#我爱杂七杂八棒棒" class="headerlink" title="我爱杂七杂八棒棒"></a>我爱杂七杂八棒棒</h2><ul>
<li><a target="_blank" rel="noopener" href="https://adzhp.cn/">爱达杂货铺</a></li>
<li><a target="_blank" rel="noopener" href="https://search.chongbuluo.com/">虫部落</a></li>
<li><a target="_blank" rel="noopener" href="https://vip.bljiex.cc/">VIP 视频在线解析</a></li>
<li><a target="_blank" rel="noopener" href="https://www.aigei.com/">爱给网-音乐配乐-3D 模型-视频素材-免费下载</a></li>
<li><a target="_blank" rel="noopener" href="https://www.ear0.com/">耳聆网-音效素材库</a></li>
<li><a target="_blank" rel="noopener" href="http://c.dituhui.com/">大众制图</a></li>
<li><a target="_blank" rel="noopener" href="https://sso.tubiaoxiu.com/login">图表秀</a></li>
<li><a target="_blank" rel="noopener" href="https://www.weiciyun.com/">微词云</a></li>
<li><a target="_blank" rel="noopener" href="https://www.allhistory.com/">全历史</a></li>
<li><a target="_blank" rel="noopener" href="https://topbook.cc/overview">Topbook</a></li>
<li><a target="_blank" rel="noopener" href="https://www.logosc.cn/">LOGO 神器</a></li>
</ul>
</article><div class="post-copyright"><div class="post-copyright__author_group"><a class="post-copyright__author_img" href="/about/"><img class="post-copyright__author_img_front" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"></a><div class="post-copyright__author_name">XC's Blog</div><div class="post-copyright__author_desc"></div></div><div class="post-tools" id="post-tools"><div class="post-tools-left"><div id="quit-box" onclick="RemoveRewardMask()"></div></div></div><div class="post-copyright__notice"><span class="post-copyright-info">本文是原创文章，采用<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</a>协议，完整转载请注明来自<a href="/">XC's Blog</a></span></div></div><div class="post-tools-right"><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/"><span class="tags-punctuation"></span>Web APIs笔记<span class="tagsPageCount">10</span></a></div></div></div><nav class="needEndHide pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JS-ES6%E6%A8%A1%E5%9D%97%E5%8C%96"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">ES6模块化与异步编程</div></div></a></div><div class="next-post pull-right"><a href="/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%AC%E4%BA%94%E5%A4%A9"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">JavaScript 第五天</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="scoicon sco-star-smile-fill"></i><span>喜欢这篇的人也看了</span><div class="relatedPosts-link"><a onclick="event.preventDefault(); toRandomPost();" href="javascript:void(0);" rel="external nofollow" data-pjax-state="">随便逛逛</a></div></div><div class="relatedPosts-list"><div><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E4%B8%83%E5%A4%A9" title="Web APIs第七天"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="cover"><div class="content is-center"><div class="title">Web APIs第七天</div></div></a></div><div><a href="/WebAPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WebAPIs%E7%AC%AC%E5%85%AD%E5%A4%A9" title="Web APIs第六天"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webapis.jpg" alt="cover"><div class="content is-center"><div class="title">Web APIs第六天</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="card-content"><div class="card-info-avatar is-center"><div class="author-info__top-group"><div class="author-info__sayhi" id="author-info__sayhi" onclick="sco.changeSayHelloText()">sayhello.morning</div></div></div><div class="avatar-img-group"><img class="avatar-img" alt="头像" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><div class="avatar-sticker"><img class="avatar-sticker-img" data-lazy-src="https://bu.dusays.com/2023/12/30/659011053e246.png" alt="心情贴纸"></div></div><div class="author-info__description_group"><div class="author-info__description">分享自己对编程的<b>热爱</b>，对美好生活的<b>向往</b>，对知识海洋<b>探索历程</b>。</div><div class="author-info__description2">相信你可以在这里找到对你有用的知识和教程。</div></div><div class="author-info__bottom-group"><a class="author-info__bottom-group-left" href="/about/"><div class="author-info__name">XC's Blog</div><div class="author-info__desc"></div></a><div class="card-info-social-icons is-center"></div></div></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="scoicon sco-menu-line"></i><span>文章目录</span></div><div class="toc-content" id="toc-content"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="toc-text">作用域</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="toc-text">局部作用域</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F"><span class="toc-text">全局作用域</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE"><span class="toc-text">作用域链</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#JS-%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6"><span class="toc-text">JS 的垃圾回收机制</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%97%AD%E5%8C%85"><span class="toc-text">闭包</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87"><span class="toc-text">变量提升</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6"><span class="toc-text">函数进阶</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87"><span class="toc-text">函数提升</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0"><span class="toc-text">函数参数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0"><span class="toc-text">箭头函数</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84"><span class="toc-text">数组解构</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84-forEach-%E6%96%B9%E6%B3%95"><span class="toc-text">遍历数组 forEach 方法</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%AD%9B%E9%80%89%E6%95%B0%E7%BB%84-filter-%E6%96%B9%E6%B3%95"><span class="toc-text">筛选数组 filter 方法</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%96%B9%E6%B3%95"><span class="toc-text">对象创建方法</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1"><span class="toc-text">实例对象</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%86%85%E7%BD%AE%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"><span class="toc-text">内置构造函数</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8E%9F%E5%9E%8B"><span class="toc-text">原型</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D"><span class="toc-text">深浅拷贝</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%B5%85%E6%8B%B7%E8%B4%9D"><span class="toc-text">浅拷贝</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%B7%B1%E6%8B%B7%E8%B4%9D"><span class="toc-text">深拷贝</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86"><span class="toc-text">异常处理</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#throw-%E6%8A%9B%E5%BC%82%E5%B8%B8"><span class="toc-text">throw 抛异常</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#try-catch"><span class="toc-text">try&#x2F;catch</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%A4%84%E7%90%86this"><span class="toc-text">处理this</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#this%E6%8C%87%E5%90%91-%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0"><span class="toc-text">this指向-普通函数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#this%E6%8C%87%E5%90%91-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0"><span class="toc-text">this指向-箭头函数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%94%B9%E5%8F%98this"><span class="toc-text">改变this</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96"><span class="toc-text">节流和防抖</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90"><span class="toc-text">网站推荐</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99"><span class="toc-text">常用网站</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%88%91%E7%88%B1%E5%AE%98%E7%BD%91"><span class="toc-text">我爱官网</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%88%91%E7%88%B1%E5%B7%A5%E5%85%B7"><span class="toc-text">我爱工具</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%88%91%E7%88%B1%E5%AD%A6%E4%B9%A0"><span class="toc-text">我爱学习</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%88%91%E7%88%B1%E9%A1%B9%E7%9B%AE"><span class="toc-text">我爱项目</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%88%91%E7%88%B1%E8%A7%86%E9%A2%91"><span class="toc-text">我爱视频</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%88%91%E7%88%B1%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E6%A3%92%E6%A3%92"><span class="toc-text">我爱杂七杂八棒棒</span></a></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="scoicon sco-map-line"></i><span>最近发布</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题"><img alt="整个前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题">整个前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img alt="常见前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题">常见前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台"><img alt="硅谷甄选运营平台" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台">硅谷甄选运营平台</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天"><img alt="Vue第三天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天">Vue第三天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天"><img alt="Vue第二天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天">Vue第二天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9">Vue框架笔记</a></div></div></div></div></div></div></main><footer id="footer"><div id="sco-footer-bar"><div class="footer-logo"><span class="scoicon">XC's Blog</span></div><div class="footer-bar-description">来自XC's Blog - 的文章</div><a class="footer-bar-link" href="/">了解更多</a></div><div id="footer_deal"><div class="footer_mini_logo" id="footer_mini_logo" title="返回顶部" onclick="sco.toTop()"><img data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg" alt="返回顶部"></div></div><div id="sco-footer"></div><div id="footer-bar"><div class="footer-bar-links"><div class="footer-bar-left"><div class="copyright">© 2021 - 2024 By&nbsp;<a class="footer-bar-link" href="/">XC's Blog</a></div></div><div class="footer-bar-right"><a class="footer-bar-link" target="_blank" rel="noopener" href="https://github.com/wleelw/hexo-theme-solitude" title="主题">主题</a><a class="footer-bar-link cc"><i class="scoicon sco-copyright-line"></i><i class="scoicon sco-creative-commons-by-line"></i><i class="scoicon sco-creative-commons-nc-line"></i><i class="scoicon sco-creative-commons-nd-line"></i></a></div></div></div></footer></div><!-- inject body--><div><script src="/js/main.js?v=1.5.1"></script><script src="/js/utils.js?v=1.5.1"></script><script src="https://cdn.cbd.int/solitude-source/js/universe.min.js"></script><script>dark()
</script><script src="https://cdn.staticfile.org/pjax/0.2.8/pjax.min.js"></script><script src="https://cdn.staticfile.org/vanilla-lazyload/17.8.5/lazyload.iife.min.js"></script><script src="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.js"></script><script src="/js/sco-ai.min.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js"></script><script src="https://cdn.staticfile.org/meting/2.0.1/Meting.min.js"></script><script>const meting_api = 'https://meting.qjqq.cn/?server=:server&type=:type&id=:id&auth=:auth&r=:r';
</script><script src="/js/covercolor/local.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/pace/1.2.4/pace.min.js"></script></div><div id="js-pjax"><script async src="https://cdn.staticfile.org/busuanzi/2.3.0/bsz.pure.mini.min.js"></script><script id="config-diff">var PAGE_CONFIG = {
    is_post: true,
    is_page: false,
    is_home: false,
    page: 'post',
    toc: true,
    comment: false,
}
</script></div><!-- newest comment--><!-- pjax--><script>let pjaxSelectors = [
    'title',
    '#body-wrap',
    '#site-config',
    'meta[name="description"]',
    '#js-pjax',
    'meta[property^="og:"]',
]

const pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
})

document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
})

document.addEventListener('pjax:complete', () => {
    window.refreshFn()
})

document.addEventListener('pjax:error', (e) => {
    if (e.request.status === 404) {
        pjax.loadUrl('/404.html')
    }
})</script><!-- theme--><script>initTheme = () => {
    const cachedMode = saveToLocal.get('theme');
    if (cachedMode === undefined)
        document.documentElement.setAttribute('data-theme', 'light');
    else
        document.documentElement.setAttribute('data-theme', cachedMode);
}
initTheme()</script><!-- search--><!-- music--><div class="needEndHide" id="nav-music" onclick="sco.musicToggle()"><div id="nav-music-hoverTips">音乐已暂停</div><meting-js id="8407304077" server="netease" type="playlist" mutex="true" preload="none" data-lrctype="0" order="random" theme="var(--sco-main)"></meting-js></div></body></html><script>const posts=["Vue笔记/前端面试题","Vue笔记/面试题","Vue笔记/硅谷甄选项目笔记","Vue笔记/vue第三天","Vue笔记/vue第二天","Vue笔记/Vue第一天","Vue笔记/vue框架笔记","Vue前置基础/5.ES6模块化与Webpack入门","Vue前置基础/1.Vue前置JS功底","Vue前置基础/4.跨域的基本概念","Vue前置基础/3.NPM的使用","Vue前置基础/2.Nodejs基础","Ajax学习笔记/黑马头条数据管理平台","Ajax学习笔记/Promise笔记","Ajax学习笔记/Ajax第四天","Ajax学习笔记/Ajax第三天","Ajax学习笔记/Ajax第二天","Ajax学习笔记/Ajax第一天","WebAPI学习笔记/JS进阶复习","WebAPI学习笔记/JS进阶第四天","WebAPI学习笔记/JS进阶第三天","WebAPI学习笔记/JS进阶第二天","WebAPI学习笔记/JS进阶第一天","WebAPI学习笔记/WebAPIs第七天","WebAPI学习笔记/WebAPIs第六天","WebAPI学习笔记/WebAPIs第五天","WebAPI学习笔记/WebAPIs第四天","WebAPI学习笔记/WebAPIs第三天","WebAPI学习笔记/WebAPIs第二天","WebAPI学习笔记/WebAPIs第一天","WebAPI学习笔记/WebAPIs学习笔记","WebAPI学习笔记/JS-ES6模块化","WebAPI学习笔记/JavaScript进阶","JavaScript学习笔记/JavaScript第五天","JavaScript学习笔记/JavaScript第四天","JavaScript学习笔记/JavaScript第三天","JavaScript学习笔记/JavaScript第二天","JavaScript学习笔记/JavaScript第一天","基础学习路线/移动开发-响应式布局","基础学习路线/移动开发-rem布局","基础学习路线/移动开发-flex布局","基础学习路线/移动开发-流式布局","基础学习路线/CSS3转换问题","基础学习路线/CSS-2D-3D转换","基础学习路线/前端168个单词","基础学习路线/CSS高级技巧","前端技术栈/前端路线","Hexo/图床方案汇总","其他技术栈/Windows软件推荐","Hexo/Butterfly主题配置","Hexo/Qexo","JavaScript/This指向与改变This指向","JavaScript/JS防抖与节流","JavaScript/如何在1分钟内完美解释什么是 JSONP 请求？","前端技术栈/移动端最佳适配解决方案","GitHub/Git常用命令","前端技术栈/来自2.5年前端小白的总结","网站资源/如何买到合适的域名","其他技术栈/CentOS一键安装Docker","网站资源/阿里云资源合集","其他技术栈/15个前端必备学习网站","其他技术栈/CSS3（圆角边框、阴影、浮动详解及示例）","网络协议/浅谈 HTTP 和 HTTPS","学习笔记/CSS属性大全","基础学习路线/CSS第五天-定位","基础学习路线/CSS第四天-浮动","基础学习路线/CSS第三天","基础学习路线/CSS第二天","基础学习路线/CSS第一天","基础学习路线/HTML第二天","基础学习路线/HTML第一天","学习笔记/「学习笔记」JavaScript基础","学习笔记/HTML与CSS进阶","Vue笔记/Vue X-数组对象的双向数据绑定","学习笔记/「学习笔记」CSS基础","学习笔记/「学习笔记」HTML基础","学习笔记/HTML基础","Windows/PE-Win10教程","Windows/Win系统网站-KMS","安卓玩机/Magisk卡刷-通刷官方-了解Fastboot","其他技术栈/前端开发免费资源大汇总","GitHub/Git基础-Github自定义域名","学习笔记/CSS笔记","Vscode/Vscode笔记-24款插件","其他技术栈/免费常用的前端CDN库","其他技术栈/软件及网站推荐","Vscode/记录 Vscode 插件","Hexo/Hexo音乐排行-Netlify CMS","GitHub/玩转GitHub","jQuery/jQuery自动触发事件与bootstrapjQuery插件用法","Hexo/使用Hexo和Github搭建个人博客","Hexo/Hexo博客搭建指南","Hexo/Hexo相关","Markdown/Markdown基础--高级教程","Markdown/Markdown基础教程"];function toRandomPost(){ pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]); };</script>