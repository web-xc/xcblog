<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>JavaScript 第一天 | XC's Blog</title><noscript>开启JavaScript才能访问本站哦~</noscript><link rel="icon" href="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><!-- index.css--><link rel="stylesheet" href="/css/index.css?v=1.5.1"><!-- inject head--><link rel="stylesheet" href="https://cdn.cbd.int/solitude-source/icon/scoicon.min.css"><link rel="stylesheet" href="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.css"><!-- aplayer--><link rel="stylesheet" href="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css"><!-- swiper--><!-- Open Graph--><meta name="description" content="JavaScript 基础第一天 JavaScript是一种运行在浏览器的编程语言，可实现人机交互效果 网页特效 (监听用户行为让网页作出对应反馈) 表单验证 (针对表单数据的合法性进行判断) 数据交互 (获取后台数据, 渲染到前端) 服务端编程 (node.js) JavaScrip"><!-- pwa--><script>(win => {
        win.saveToLocal = {
            set: function setWithExpiry(key, value, ttl) {
                if (ttl === 0)
                    return
                const now = new Date()
                const expiryDay = ttl * 86400000
                const item = {
                    value: value,
                    expiry: now.getTime() + expiryDay,
                }
                localStorage.setItem(key, JSON.stringify(item))
            },

            get: function getWithExpiry(key) {
                const itemStr = localStorage.getItem(key)

                if (!itemStr) {
                    return undefined
                }
                const item = JSON.parse(itemStr)
                const now = new Date()

                if (now.getTime() > item.expiry) {
                    localStorage.removeItem(key)
                    return undefined
                }
                return item.value
            }
        }

        const DarkModeStatus = localStorage.getItem('theme')
        if (DarkModeStatus !== null) {
            if (DarkModeStatus === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-theme', 'light')
            }
        }

        const asideStatus = saveToLocal.get('aside-status')
        if (asideStatus !== undefined) {
            if (asideStatus === 'hide') {
                document.documentElement.classList.add('hide-aside')
            } else {
                document.documentElement.classList.remove('hide-aside')
            }
        }
    }
)(window)

console.log(
    "%c Program: Hexo %c Theme: Hexo-Theme-Solitude %c Version: v1.5.1",
    "border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#ff3842;margin:10px 0",
    "padding: 5px 10px;color:white;background:#3e9f50;",
    "border-radius:0 5px 5px 0;padding: 5px 10px;background:#0084ff;"
);</script><!-- global head--><script>const GLOBAL_CONFIG = {
    root: '/',
    algolia: undefined,
    localsearch: undefined,
    runtime: '2021-04-20 00:00:00',
    lazyload: {
        enable: true,
        error: '/img/error_load.png'
    },
    hightlight: {
        enable: true,
        limit: 200,
        expand: false,
        copy: true,
    },
    randomlinks: false,
    lang: {
        theme: {
            dark: '已切换至深色模式',
            light: '已切换至浅色模式',
        },
        copy: {
            success: '复制成功',
            error: '复制失败',
        },
        backtop: '返回顶部',
        time: {
            recent: '最近',
            yesterday: '昨天',
            berforeyesterday: '前天',
            daybefore: '天前',
            runtime: '天',
        },
        search: {
            empty: '找不到你查询的内容：${query}',
            hit: '找到 ${hits} 条结果，用时 ${time} 毫秒',
            placeholder: '输入关键词快速查找',
        },
        chs: {
            chs_to_cht: '繁體中文',
            cht_to_chs: '简体中文',
        }
    },
    aside: {
        sayhello: {
            morning: '一日之计在于晨',
            noon: '吃饱了才有力气干活',
            afternoon: '集中精力，攻克难关',
            night: '不要太劳累了，早睡更健康',
            goodnight: '睡个好觉，保证精力充沛',
        },
        sayhello2: ["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙","🤝 专修交互与设计","🏃 脚踏实地行动派","🧱 团队小组发动机","💢 壮汉人狠话不多","🎮 电竞游戏爱好者"],
    },
    covercolor: {
        enable: true
    },
    comment: {
        enable: false,
        type: '',
        commentBarrage: false,
        randomInfoStart: ["聪敏的","可爱的","美丽的"],
        randomInfoEnd: ["白菜","小可爱","小仙女"],
        twikoo: {
            url: '',
            accessToken: ''
        },
        waline: {
            url: '',
        }
    },
    lightbox: 'null',
    rightside: {
        enable: false
    },
    ai: {
        enable: true,
        key: '',
        talk: '我是王卓Sco开发的摘要生成助理ScoGPT，ScoGPT在静态部署时进行摘要的撰写，并且在访客访问时通过ScoCorrection转译后的文本摘要实现工具。我在这里只负责已经生成的摘要显示，你无法与我直接沟通，但我可以回答一些预设的问题。',
        randomPost: false,
    },
    music: {
        enable: false,
    },
    translate: undefined,
};</script><meta name="generator" content="Hexo 6.3.0"></head><body id="body"><!-- universe--><canvas id="universe"></canvas><!-- loading--><!-- console--><div id="console"><div class="close-btn" onclick="sco.hideConsole()"><i class="scoicon sco-close-fill"></i></div><div class="button-group"><div class="console-btn-item"><a class="darkmode_switchbutton" onclick="sco.switchDarkMode()" title="昼夜切换" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i></a></div><div class="console-btn-item" id="consoleHideAside"><a class="asideSwitch" onclick="sco.switchHideAside()" title="边栏显示控制" href="javascript:void(0);"><i class="scoicon sco-side-bar-fill"></i></a></div><div class="console-btn-item" id="consoleMusic" onclick="sco.musicToggle()"><a class="music-switch" title="音乐开关" href="javascript:void(0);"><i class="scoicon sco-disc-fill"></i></a></div></div><div class="console-mask" onclick="sco.hideConsole()"></div></div><!-- sidebar--><div id="sidebar" style="zoom: 1;"><div id="menu-mask" style="display: none;"></div><div id="sidebar-menus"><span class="sidebar-menu-item-title">功能</span><div class="sidebar-menu-item"><a class="darkmode_switchbutton menu-child" onclick="sco.switchDarkMode()" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i><span>显示模式</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div><span class="sidebar-menu-item-title">标签</span><div class="card-widget card-tags card-archives card-webinfo card-allinfo"><div class="card-tag-cloud"><a href="/tags/Ajax%E7%AC%94%E8%AE%B0/">Ajax笔记<sup>6</sup></a><a href="/tags/Hexo/">Hexo<sup>6</sup></a><a href="/tags/Qexo/">Qexo<sup>1</sup></a><a href="/tags/GitHub/">GitHub<sup>3</sup></a><a href="/tags/JavaScript/">JavaScript<sup>3</sup></a><a href="/tags/Markdown/">Markdown<sup>2</sup></a><a href="/tags/JavaScript%E7%AC%94%E8%AE%B0/">JavaScript笔记<sup>5</sup></a><a href="/tags/Vscode/">Vscode<sup>2</sup></a><a href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/">Vue前置基础<sup>5</sup></a><a href="/tags/Vue%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/">Vue框架笔记<sup>6</sup></a><a href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/">面试题<sup>2</sup></a><a href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/">Web APIs笔记<sup>10</sup></a><a href="/tags/JavaScript%E9%AB%98%E7%BA%A7/">JavaScript高级<sup>5</sup></a><a href="/tags/Windows/">Windows<sup>3</sup></a><a href="/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF%E6%A0%88/">其他技术栈<sup>6</sup></a><a href="/tags/jQuery/">jQuery<sup>1</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/">前端技术栈<sup>3</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CSS/">学习笔记-CSS<sup>9</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-HTML/">学习笔记-HTML<sup>2</sup></a><a href="/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/">前端经验<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/">前端笔记<sup>3</sup></a><a href="/tags/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/">网站资源<sup>2</sup></a><a href="/tags/%E5%AE%89%E5%8D%93%E7%8E%A9%E6%9C%BA/">安卓玩机<sup>1</sup></a><a href="/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/">网络协议<sup>1</sup></a></div></div></div></div><!-- keyboard--><div class="post" id="body-wrap"><header class="post-bg" id="page-header"><nav class="show" id="nav"><div id="nav-group"><div id="blog_name"><a id="site-name" href="/" title="返回博客主页"><span class="title">XC's Blog</span></a></div><div id="page-name-mask"><div id="page-name"><a id="page-name-text" onclick="sco.toTop()">JavaScript 第一天</a></div></div><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div></div><div id="nav-left"></div><div id="nav-right"><div class="nav-button" id="randomPost_button"><a class="site-page" onclick="toRandomPost()" title="随机一篇文章" href="javascript:void(0);"><i class="scoicon sco-signal-tower-fill"></i></a></div><div class="nav-button" id="nav-console"><a class="console_switchbutton" onclick="sco.showConsole()" title="中控台" href="javascript:void(0);"><i class="scoicon sco-dashboard-fill"></i></a></div><div class="nav-button" id="nav-totop" onclick="sco.toTop()"><a class="totopbtn"><i class="scoicon sco-arrow-up-line"></i><span id="percent">0</span></a></div><div id="toggle-menu"><a class="site-page"><i class="scoicon sco-menu-line"></i></a></div></div></div></nav><div class="coverdiv" id="coverdiv"><img class="nolazyload" id="post-cover" src="https://npm.elemecdn.com/webxc/cover/js1.webp" alt="JavaScript 第一天"></div><div id="post-info"><div id="post-firstinfo"><div class="meta-firstline"><a class="post-meta-original" title="该文章为原创文章，注意版权协议">原创</a><span class="post-meta-categories"><a class="post-meta-categories" href="/categories/JavaScript笔记/">JavaScript笔记</a></span><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/JavaScript%E7%AC%94%E8%AE%B0/"><span class="tags-name tags-punctuation">JavaScript笔记</span></a></div></div></div></div><h1 class="post-title">JavaScript 第一天</h1><div id="post-meta"><div class="meta-secondline"></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><div class="post-ai"><div class="ai-title"><div class="ai-title-left"><i class="ai-title-icon scoicon sco-robot-fill"></i><div class="ai-title-text">文章摘要</div></div><div class="ai-tag" id="ai-tag">GPT 4</div></div><div class="ai-explanation" style="display: block;"></div><div class="ai-suggestions"></div><div class="ai-bottom"><div class="ai-tips">此内容根据文章生成，并经过人工审核，仅用于文章内容的解释与总结</div><a class="ai-report" title="投诉" target="_blank" rel="noopener" href="https://blog.wzsco.top/about/">投诉</a></div></div><article class="post-content" id="article-container"><h3 id="JavaScript-基础第一天"><a href="#JavaScript-基础第一天" class="headerlink" title="JavaScript 基础第一天"></a>JavaScript 基础第一天</h3><ol>
<li>JavaScript是一种运行在浏览器的编程语言，可实现人机交互效果</li>
<li>网页特效 (监听用户行为让网页作出对应反馈) </li>
<li>表单验证 (针对表单数据的合法性进行判断) </li>
<li>数据交互 (获取后台数据, 渲染到前端) </li>
<li>服务端编程 (node.js) </li>
</ol>
<img data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/jsone.jpg" style="zoom:33%;" />

<h4 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成:"></a>JavaScript的组成:</h4><ol>
<li>ECMAScript (基础语法 )、Web APIs (DOM、BOM) </li>
<li>ECMAScript: 规定了js基础语法核心知识 比如：变量、分支语句、循环语句、对象等等</li>
<li>DOM 操作文档，比如对页面元素进行移动、大小、添加删除等操作</li>
<li>BOM 操作浏览器，比如页面弹窗，检测窗口宽度、存储数据到浏览器等等</li>
<li>权威网站：<a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript">MDN</a></li>
</ol>
<img data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/jstwo.jpg" style="zoom:33%;" />

<hr>
<h3 id="JavaScript-书写位置"><a href="#JavaScript-书写位置" class="headerlink" title="JavaScript 书写位置:"></a>JavaScript 书写位置:</h3><h4 id="内部-JS"><a href="#内部-JS" class="headerlink" title="内部 JS:"></a>内部 JS:</h4><ol>
<li>直接写在html文件里，用script标签包住</li>
<li>将script放在HTML文件底部的原因是浏览器会按照代码在文件中的顺序加载HTML</li>
<li>如果先加载的JS修改下方的HTML，那么它可能由于HTML尚未被加载而失效</li>
<li>因此，将JSt代码放在HTML的底部通常是最好的策略</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="外部-JS"><a href="#外部-JS" class="headerlink" title="外部 JS:"></a>外部 JS:</h4><ol>
<li>代码写在以.js结尾的文件里, 通过script标签引入到html中</li>
<li>script标签中间无需写代码，否则会被忽略</li>
<li>外部JS会使代码更加有序，更易于复用，没了脚本的混合，HTML会更加易读</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;JS.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="内联-JS"><a href="#内联-JS" class="headerlink" title="内联 JS:"></a>内联 JS:</h4><ol>
<li>代码写在标签内部, 了解即可，后面vue框架会用这种模式</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;你好&#x27;)&quot;</span>&gt;</span>请点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释:"></a>JavaScript 注释:</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释:"></a>单行注释:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释 ctrl + /</span></span><br></pre></td></tr></table></figure>

<h4 id="块注释"><a href="#块注释" class="headerlink" title="块注释:"></a>块注释:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 块注释 Shift+Alt+A */</span> </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="JavaScript-结束符"><a href="#JavaScript-结束符" class="headerlink" title="JavaScript 结束符:"></a>JavaScript 结束符:</h3><ol>
<li>代表语句结束、英文分号 ;  、可写可不写</li>
<li>换行符会识别成结束符, 所以一个完整语句，不要手动换行</li>
<li>为了风格统一，要么都写，要么都不写</li>
</ol>
<hr>
<h3 id="JavaScript-输入-输出语法"><a href="#JavaScript-输入-输出语法" class="headerlink" title="JavaScript 输入 输出语法:"></a>JavaScript 输入 输出语法:</h3><ol>
<li>人和计算机打交道的规则约定，程序员操控计算机，需要计算机能看懂</li>
<li>输出和输入可理解为人和计算机交互，用户通过键盘、鼠标向计算机输入信息，计算机处理后再展示结果给用户 ，这便是一次输入和输出的过程</li>
</ol>
<h3 id="输入语法："><a href="#输入语法：" class="headerlink" title="输入语法："></a>输入语法：</h3><ol>
<li>显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prompt</span>(<span class="string">&#x27;我是输入语法&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="输出语法："><a href="#输出语法：" class="headerlink" title="输出语法："></a>输出语法：</h3><ol>
<li>向body内输出内容, 输出内容写的是html标签，会被解析成网页元素</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h2&gt;我是输出&lt;/h2&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="页面弹出警告对话框"><a href="#页面弹出警告对话框" class="headerlink" title="页面弹出警告对话框:"></a>页面弹出警告对话框:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我是警告对话框&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="控制台输出语法，开发调试使用"><a href="#控制台输出语法，开发调试使用" class="headerlink" title="控制台输出语法，开发调试使用:"></a>控制台输出语法，开发调试使用:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是控制台输出&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量:"></a>字面量:</h4><ol>
<li>在计算机科学中，字面量 (literal) 是在计算机中描述事/物</li>
<li>我们工资是：100 此时100就是 数字字面量   ‘你好啊’ 字符串字面量</li>
<li>还有 [] 数组字面量 {} 对象字面量 等等…</li>
</ol>
<hr>
<h4 id="变量是什么？"><a href="#变量是什么？" class="headerlink" title="变量是什么？"></a>变量是什么？</h4><ol>
<li>计算机中用来存储数据的“容器”，简单理解就是一个个的盒子，可以让计算机变得有记忆</li>
<li>用来存放数据，变量指的是容器<strong>而不是数据</strong></li>
</ol>
<h3 id="变量的基本使用"><a href="#变量的基本使用" class="headerlink" title="变量的基本使用:"></a>变量的基本使用:</h3><ol>
<li><p>变量通过 let 来声明 通过 = 赋值</p>
</li>
<li><p>变量通过变量名来获得里面的数据``, 可同时声明多个变量</p>
</li>
</ol>
<h4 id="声明变量："><a href="#声明变量：" class="headerlink" title="声明变量："></a>声明变量：</h4><ol>
<li>使用变量，首先创建变量 (声明变量) </li>
<li>声明变量有两部分构成：声明关键字、变量名 (标识）</li>
<li>let 即关键字 (let: 允许、许可、让、要)，关键字是系统提供专门用来声明变量的词语</li>
</ol>
<h4 id="变量赋值："><a href="#变量赋值：" class="headerlink" title="变量赋值："></a>变量赋值：</h4><ol>
<li>注意：是通过变量名来获得变量里面的数据</li>
<li>定义一个变量后，就能初始化它 (赋值)  在变量名之后跟上一个“=”，然后是数值</li>
<li>也可以声明变量的时候同时给变量初始化</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Number</span> = <span class="number">10</span> <span class="comment">// Number变量名称，也叫标识符</span></span><br></pre></td></tr></table></figure>

<h4 id="更新变量："><a href="#更新变量：" class="headerlink" title="更新变量："></a>更新变量：</h4><ol>
<li>变量赋值后，可以通过一个不同的值来更新它</li>
<li>let <strong>不允许多次声明一个变量</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Number</span> = <span class="number">10</span></span><br><span class="line"><span class="title class_">Number</span> = <span class="number">20</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>) <span class="comment">// 输出结果为20</span></span><br></pre></td></tr></table></figure>

<h4 id="声明多个变量："><a href="#声明多个变量：" class="headerlink" title="声明多个变量："></a>声明多个变量：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Number</span> = <span class="number">10</span>, uname = <span class="string">&#x27;你好&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值:"></a>交换变量的值:</h4><ol>
<li><p>使用一个<strong>临时变量做中间存储</strong></p>
</li>
<li><p>声明一个临时变量 temp </p>
</li>
<li><p>把num1的值赋值给 temp </p>
</li>
<li><p>把num2的值赋值给num1 </p>
</li>
<li><p>把temp的值给num2</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unm1 = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line"><span class="keyword">let</span> unm2 = <span class="string">&#x27;林俊杰&#x27;</span></span><br><span class="line"><span class="comment">// 使用一个 临时变量 用来做中间存储</span></span><br><span class="line"><span class="keyword">let</span> temp</span><br><span class="line"><span class="comment">// 把num1的值赋值给 temp</span></span><br><span class="line">temp = unm1</span><br><span class="line"><span class="comment">//  把num2的值赋值给num1</span></span><br><span class="line">unm1 = unm2</span><br><span class="line"><span class="comment">// 把temp的值给num2</span></span><br><span class="line">unm2 = temp</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(unm1, unm2)</span><br></pre></td></tr></table></figure>

<h4 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质:"></a>变量的本质:</h4><ol>
<li>内存：计算机中存储数据的地方，相当于一个空间</li>
<li>变量：是程序在内存中申请的一块用来存放数据的小空间</li>
</ol>
<h3 id="变量命名规则与规范"><a href="#变量命名规则与规范" class="headerlink" title="变量命名规则与规范:"></a>变量命名规则与规范:</h3><ol>
<li>不能有特殊含义字符，如JS内置的一些英语词汇：let、var、if、for 等..</li>
<li>只能用下划线、字母、数字、$组成，<strong>数字不能开头</strong></li>
<li>字母区分大小写，如 Age 和 age 是不同的变量</li>
<li>起名要有意义, <strong>遵守小驼峰命名法</strong>, 例：userName</li>
</ol>
<hr>
<h4 id="let-和-var-："><a href="#let-和-var-：" class="headerlink" title="let 和 var ："></a>let 和 var ：</h4><ol>
<li><p>let 为了解决 var 的一些问题</p>
</li>
<li><p>以后声明变量统一使用 let</p>
</li>
<li><p>var 声明:</p>
</li>
<li><p>可以先使用 在声明 (不合理) </p>
</li>
<li><p>var 声明过的变量可重复声明 (不合理) 比如变量提升、全局变量、没有块级作用域等等..</p>
</li>
</ol>
<hr>
<h3 id="JS数组"><a href="#JS数组" class="headerlink" title="JS数组:"></a>JS数组:</h3><ol>
<li>数组(Array)是一种可以按顺序保存多个数据</li>
<li>数组是按顺序保存，每个数据都有自己的编号 </li>
<li>计算机中的编号从0开始，所以星期一编号为0，星期二编号为1，以此类推 </li>
<li>在数组中，数据的编号也叫索引或下标 </li>
<li>数组可以存储任意类型的数据</li>
<li>取出来是什么类型的，就根据这种类型特点来访问</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<ol>
<li>元素：数组中保存的每个数据都叫数组元素</li>
<li>下标：数组中数据的编号 </li>
<li>长度：数组中数据的个数，通过数组的length属性获得</li>
</ol>
<hr>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型:"></a>数据类型:</h3><ol>
<li>更加充分和高效的利用内存</li>
<li>也更加方便开发人员的使用数据</li>
</ol>
<h4 id="JS-数据类型整体分为-两大类："><a href="#JS-数据类型整体分为-两大类：" class="headerlink" title="JS 数据类型整体分为 两大类："></a>JS 数据类型整体分为 两大类：</h4><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型 :"></a>基本数据类型 :</h4><ol>
<li>number 数字型 </li>
<li>string 字符串型 </li>
<li>boolean 布尔型 </li>
<li>undefined 未定义型 </li>
<li>null 空类型</li>
</ol>
<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型:"></a>引用数据类型:</h4><ol>
<li>object 对象function 函数 array 数组</li>
<li>function 函数 </li>
<li>array 数组</li>
</ol>
<h3 id="数字类型-number"><a href="#数字类型-number" class="headerlink" title="数字类型  number  :"></a>数字类型  number  :</h3><ol>
<li>即数学中的数字，可以是整数、小数、正数、负数</li>
<li>JS中的正数、负数、小数等 统一称为 数字类型</li>
<li>JS是弱数据类型，变量到底属于哪种类型，只有赋值之后，才能确认</li>
<li>Java是强数据类型 例如 int a = 3 必须是整数</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string :"></a>字符串类型 string :</h3><ol>
<li>通过单引号 (‘ ‘) 、双引号 (“ “) 或反引号(``)包裹的数据都叫字符串</li>
<li>无论单引或双引必须<strong>成对使用</strong></li>
<li>单引/双引可互相嵌套，但不以自已嵌套自已 (外双内单，外单内双) </li>
<li>必要时可使用转义符 \，输出单引或双引</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="string">&#x27;我是字符串类型&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 字符串拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我叫周杰伦&#x27;</span> + <span class="string">&#x27;我叫林俊杰&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> uname1 = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line"><span class="keyword">let</span> uname2 = <span class="string">&#x27;林俊杰&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname1 + uname2)</span><br></pre></td></tr></table></figure>

<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串:"></a>模板字符串:</h3><ol>
<li>内容拼接变量时，用 ${} 包住变量, 使得拼接字符串更简便</li>
<li>拼接字符串和变量, 在没有它之前，要拼接变量比较麻烦</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`大家好, 我叫<span class="subst">$&#123;name&#125;</span>, 今年<span class="subst">$&#123;name1&#125;</span>岁了`</span>)</span><br></pre></td></tr></table></figure>

<h3 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型 boolean :"></a>布尔类型 boolean :</h3><ol>
<li><p>表示肯定或否定时在计算机中对应的是布尔类型数据</p>
</li>
<li><p>它有两个固定的值 true 和 false，表示肯定的数据用 true (真) ，表示否定的数据用 false (假) </p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="未定义类型-undefined"><a href="#未定义类型-undefined" class="headerlink" title="未定义类型 undefined :"></a>未定义类型 undefined :</h3><ol>
<li><p>未定义是比较特殊的类型，只有一个值 undefined</p>
</li>
<li><p>只声明变量，不赋值的情况下，变量默认值为undefined</p>
</li>
<li><p>开发中经常声明一个变量，等待传送过来的数据。 如果不知道这个数据是否传递过来，此时可通过检测这个变量是不是undefined，即可判断用户是否 有数据传递过来</p>
</li>
</ol>
<h3 id="null-空类型"><a href="#null-空类型" class="headerlink" title="null 空类型 :"></a>null 空类型 :</h3><ol>
<li>null 表示 值为空</li>
<li>官方解释：把null作为<strong>尚未创建的对象</strong> </li>
<li>将来有个变量里面存放的是个对象，但是对象还没创建好，可以先给个null </li>
</ol>
<h4 id="null-和-undefined-区别："><a href="#null-和-undefined-区别：" class="headerlink" title="null 和 undefined 区别："></a>null 和 undefined 区别：</h4><ol>
<li>undefined 表示没有赋值</li>
<li>null 表示赋值了，但内容为空</li>
</ol>
<h3 id="控制台-输出语句-和-检测数据类型"><a href="#控制台-输出语句-和-检测数据类型" class="headerlink" title="控制台 输出语句 和 检测数据类型 :"></a>控制台 输出语句 和 检测数据类型 :</h3><ol>
<li>控制台语句经常用于测试结果来使用</li>
<li>数字型和布尔型颜色为蓝色，字符串和undefined颜色为灰色</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 typeof 关键字检测数据类型</span></span><br><span class="line"><span class="keyword">let</span> unm1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> unm2 = <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="keyword">let</span> unm3 = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> unm4 = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> unm5 = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> unm1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> unm2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> unm3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> unm4)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> unm5)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换:"></a>类型转换:</h3><h5 id="为什么需要类型转换"><a href="#为什么需要类型转换" class="headerlink" title="为什么需要类型转换?"></a>为什么需要类型转换?</h5><ol>
<li>JS是弱数据类型： JS也不知道变量到底属于哪种数据类型，只有赋值了才清楚</li>
<li>坑：使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单进行加法运算</li>
<li>此时需要转换变量的数据类型, 就是把一种数据类型的变量转换成需要的数据类型</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;100 + 100&#x27;</span>) <span class="comment">// 输出结果100100</span></span><br></pre></td></tr></table></figure>

<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换:"></a>隐式转换:</h3><ol>
<li><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为 隐式转换</p>
</li>
<li><p>+ 号两边只要有一个是字符串，都会把另外一个转成字符串</p>
</li>
<li><p>除了+以外的算术运算符 比如 - * / 等都会把数据转成数字类型</p>
</li>
<li><p>缺点: 转换类型不明确，靠经验才能总结</p>
</li>
<li><p>技巧: +号作为正号解析可以转换成Number</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+uname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="string">&#x27;10&#x27;</span> + <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> * <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换:"></a>显式转换:</h3><ol>
<li>编写程序时过度依靠系统内部的隐式转换是不严谨的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为避免因隐式转换带来的问题，通常跟逻辑需要对数据进行显示转换</li>
</ol>
<h4 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型:"></a>转换为数字型:</h4><h5 id="Number-数据"><a href="#Number-数据" class="headerlink" title="Number 数据 :"></a>Number 数据 :</h5><ol>
<li>转成数字类型</li>
<li>如果字符串内容里有非数字，转换失败时结果为 NaN（Not a Number) 即不是一个数字</li>
<li>NaN也是Number类型的数据，<strong>代表非数字</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(uname))</span><br></pre></td></tr></table></figure>

<h5 id="parseInt-数据-只保留整数"><a href="#parseInt-数据-只保留整数" class="headerlink" title="parseInt ( 数据 ) 只保留整数:"></a>parseInt ( 数据 ) 只保留整数:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="string">&#x27;10.99&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(uname))</span><br></pre></td></tr></table></figure>

<h5 id="parseFloat-数据-可以保留小数"><a href="#parseFloat-数据-可以保留小数" class="headerlink" title="parseFloat ( 数据 ) 可以保留小数:"></a>parseFloat ( 数据 ) 可以保留小数:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="string">&#x27;9.9&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(uname))</span><br></pre></td></tr></table></figure>

<h3 id="转换为字符型"><a href="#转换为字符型" class="headerlink" title="转换为字符型:"></a>转换为字符型:</h3><h5 id="String-数据"><a href="#String-数据" class="headerlink" title="String( 数据 ):"></a>String( 数据 ):</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(uname))</span><br></pre></td></tr></table></figure>

<h5 id="变量-toString-进制"><a href="#变量-toString-进制" class="headerlink" title="变量.toString( 进制 ) :"></a>变量.toString( 进制 ) :</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uname = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname.<span class="title function_">toString</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="用户订单信息打印-点击查看"><a href="#用户订单信息打印-点击查看" class="headerlink" title="用户订单信息打印: 点击查看"></a>用户订单信息打印: <a target="_blank" rel="noopener" href="https://www.webxc.eu.org/4/JavaScript%E5%9F%BA%E7%A1%80%E6%A1%88%E4%BE%8B/%E7%94%A8%E6%88%B7%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF%E6%A1%88%E4%BE%8B.html">点击查看</a></h4><h4 id="JS简单实现加法器-点击查看"><a href="#JS简单实现加法器-点击查看" class="headerlink" title="JS简单实现加法器: 点击查看"></a>JS简单实现加法器: <a target="_blank" rel="noopener" href="https://www.webxc.eu.org/4/JavaScript%E5%9F%BA%E7%A1%80%E6%A1%88%E4%BE%8B/JS%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%B3%95%E5%99%A8.html">点击查看</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">// JS简单实现加法器</span></span><br><span class="line">      <span class="keyword">let</span> number1 = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第一个数&#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> number2 = +<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第二个数&#x27;</span>)</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">`计算结果为: <span class="subst">$&#123;number1 + number2&#125;</span>`</span>)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`计算结果为: <span class="subst">$&#123;number1 + number2&#125;</span>`</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="本节单词"><a href="#本节单词" class="headerlink" title="本节单词:"></a>本节单词:</h4><ol>
<li>prompt</li>
<li>document</li>
<li>write</li>
<li>alert</li>
<li>console</li>
<li>log</li>
<li>let</li>
<li>var</li>
<li>number </li>
<li>string </li>
<li>boolean </li>
<li>undefined</li>
<li>null</li>
<li>typeof</li>
<li>true</li>
<li>false</li>
<li>nan</li>
<li>parseInt</li>
<li>parsefloat</li>
<li>string</li>
<li>tostring</li>
</ol>
</article><div class="post-copyright"><div class="post-copyright__author_group"><a class="post-copyright__author_img" href="/about/"><img class="post-copyright__author_img_front" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"></a><div class="post-copyright__author_name">XC's Blog</div><div class="post-copyright__author_desc"></div></div><div class="post-tools" id="post-tools"><div class="post-tools-left"><div id="quit-box" onclick="RemoveRewardMask()"></div></div></div><div class="post-copyright__notice"><span class="post-copyright-info">本文是原创文章，采用<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</a>协议，完整转载请注明来自<a href="/">XC's Blog</a></span></div></div><div class="post-tools-right"><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/JavaScript%E7%AC%94%E8%AE%B0/"><span class="tags-punctuation"></span>JavaScript笔记<span class="tagsPageCount">5</span></a></div></div></div><nav class="needEndHide pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%AC%E4%BA%8C%E5%A4%A9"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">JavaScript 第二天</div></div></a></div><div class="next-post pull-right"><a href="/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">移动开发-响应式</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="scoicon sco-star-smile-fill"></i><span>喜欢这篇的人也看了</span><div class="relatedPosts-link"><a onclick="event.preventDefault(); toRandomPost();" href="javascript:void(0);" rel="external nofollow" data-pjax-state="">随便逛逛</a></div></div><div class="relatedPosts-list"><div><a href="/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%AC%E4%BA%94%E5%A4%A9" title="JavaScript 第五天"><img class="cover" data-lazy-src="https://npm.elemecdn.com/webxc/cover/js1.webp" alt="cover"><div class="content is-center"><div class="title">JavaScript 第五天</div></div></a></div><div><a href="/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%AC%E5%9B%9B%E5%A4%A9" title="JavaScript 第四天"><img class="cover" data-lazy-src="https://npm.elemecdn.com/webxc/cover/js1.webp" alt="cover"><div class="content is-center"><div class="title">JavaScript 第四天</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="card-content"><div class="card-info-avatar is-center"><div class="author-info__top-group"><div class="author-info__sayhi" id="author-info__sayhi" onclick="sco.changeSayHelloText()">sayhello.morning</div></div></div><div class="avatar-img-group"><img class="avatar-img" alt="头像" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><div class="avatar-sticker"><img class="avatar-sticker-img" data-lazy-src="https://bu.dusays.com/2023/12/30/659011053e246.png" alt="心情贴纸"></div></div><div class="author-info__description_group"><div class="author-info__description">分享自己对编程的<b>热爱</b>，对美好生活的<b>向往</b>，对知识海洋<b>探索历程</b>。</div><div class="author-info__description2">相信你可以在这里找到对你有用的知识和教程。</div></div><div class="author-info__bottom-group"><a class="author-info__bottom-group-left" href="/about/"><div class="author-info__name">XC's Blog</div><div class="author-info__desc"></div></a><div class="card-info-social-icons is-center"></div></div></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="scoicon sco-menu-line"></i><span>文章目录</span></div><div class="toc-content" id="toc-content"><ol class="toc"><li class="toc-item toc-level-3"><a class="toc-link" href="#JavaScript-%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E5%A4%A9"><span class="toc-text">JavaScript 基础第一天</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#JavaScript%E7%9A%84%E7%BB%84%E6%88%90"><span class="toc-text">JavaScript的组成:</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#JavaScript-%E4%B9%A6%E5%86%99%E4%BD%8D%E7%BD%AE"><span class="toc-text">JavaScript 书写位置:</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%86%85%E9%83%A8-JS"><span class="toc-text">内部 JS:</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%A4%96%E9%83%A8-JS"><span class="toc-text">外部 JS:</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%86%85%E8%81%94-JS"><span class="toc-text">内联 JS:</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#JavaScript-%E6%B3%A8%E9%87%8A"><span class="toc-text">JavaScript 注释:</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A"><span class="toc-text">单行注释:</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%9D%97%E6%B3%A8%E9%87%8A"><span class="toc-text">块注释:</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#JavaScript-%E7%BB%93%E6%9D%9F%E7%AC%A6"><span class="toc-text">JavaScript 结束符:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#JavaScript-%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E8%AF%AD%E6%B3%95"><span class="toc-text">JavaScript 输入 输出语法:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%BE%93%E5%85%A5%E8%AF%AD%E6%B3%95%EF%BC%9A"><span class="toc-text">输入语法：</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%BE%93%E5%87%BA%E8%AF%AD%E6%B3%95%EF%BC%9A"><span class="toc-text">输出语法：</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%A1%B5%E9%9D%A2%E5%BC%B9%E5%87%BA%E8%AD%A6%E5%91%8A%E5%AF%B9%E8%AF%9D%E6%A1%86"><span class="toc-text">页面弹出警告对话框:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E8%AF%AD%E6%B3%95%EF%BC%8C%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E4%BD%BF%E7%94%A8"><span class="toc-text">控制台输出语法，开发调试使用:</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%AD%97%E9%9D%A2%E9%87%8F"><span class="toc-text">字面量:</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><span class="toc-text">变量是什么？</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%98%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"><span class="toc-text">变量的基本使用:</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%EF%BC%9A"><span class="toc-text">声明变量：</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%EF%BC%9A"><span class="toc-text">变量赋值：</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%9B%B4%E6%96%B0%E5%8F%98%E9%87%8F%EF%BC%9A"><span class="toc-text">更新变量：</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%A3%B0%E6%98%8E%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%EF%BC%9A"><span class="toc-text">声明多个变量：</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BA%A4%E6%8D%A2%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC"><span class="toc-text">交换变量的值:</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%AC%E8%B4%A8"><span class="toc-text">变量的本质:</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E4%B8%8E%E8%A7%84%E8%8C%83"><span class="toc-text">变量命名规则与规范:</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#let-%E5%92%8C-var-%EF%BC%9A"><span class="toc-text">let 和 var ：</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#JS%E6%95%B0%E7%BB%84"><span class="toc-text">JS数组:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"><span class="toc-text">数据类型:</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#JS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%95%B4%E4%BD%93%E5%88%86%E4%B8%BA-%E4%B8%A4%E5%A4%A7%E7%B1%BB%EF%BC%9A"><span class="toc-text">JS 数据类型整体分为 两大类：</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"><span class="toc-text">基本数据类型 :</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"><span class="toc-text">引用数据类型:</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B-number"><span class="toc-text">数字类型  number  :</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B-string"><span class="toc-text">字符串类型 string :</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2"><span class="toc-text">模板字符串:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B-boolean"><span class="toc-text">布尔类型 boolean :</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B-undefined"><span class="toc-text">未定义类型 undefined :</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#null-%E7%A9%BA%E7%B1%BB%E5%9E%8B"><span class="toc-text">null 空类型 :</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#null-%E5%92%8C-undefined-%E5%8C%BA%E5%88%AB%EF%BC%9A"><span class="toc-text">null 和 undefined 区别：</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%8E%A7%E5%88%B6%E5%8F%B0-%E8%BE%93%E5%87%BA%E8%AF%AD%E5%8F%A5-%E5%92%8C-%E6%A3%80%E6%B5%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"><span class="toc-text">控制台 输出语句 和 检测数据类型 :</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"><span class="toc-text">类型转换:</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"><span class="toc-text">为什么需要类型转换?</span></a></li></ol></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2"><span class="toc-text">隐式转换:</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%98%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2"><span class="toc-text">显式转换:</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%AD%97%E5%9E%8B"><span class="toc-text">转换为数字型:</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#Number-%E6%95%B0%E6%8D%AE"><span class="toc-text">Number 数据 :</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#parseInt-%E6%95%B0%E6%8D%AE-%E5%8F%AA%E4%BF%9D%E7%95%99%E6%95%B4%E6%95%B0"><span class="toc-text">parseInt ( 数据 ) 只保留整数:</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#parseFloat-%E6%95%B0%E6%8D%AE-%E5%8F%AF%E4%BB%A5%E4%BF%9D%E7%95%99%E5%B0%8F%E6%95%B0"><span class="toc-text">parseFloat ( 数据 ) 可以保留小数:</span></a></li></ol></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E5%9E%8B"><span class="toc-text">转换为字符型:</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#String-%E6%95%B0%E6%8D%AE"><span class="toc-text">String( 数据 ):</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#%E5%8F%98%E9%87%8F-toString-%E8%BF%9B%E5%88%B6"><span class="toc-text">变量.toString( 进制 ) :</span></a></li></ol></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E7%94%A8%E6%88%B7%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF%E6%89%93%E5%8D%B0-%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B"><span class="toc-text">用户订单信息打印: 点击查看</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#JS%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%B3%95%E5%99%A8-%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B"><span class="toc-text">JS简单实现加法器: 点击查看</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%9C%AC%E8%8A%82%E5%8D%95%E8%AF%8D"><span class="toc-text">本节单词:</span></a></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="scoicon sco-map-line"></i><span>最近发布</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题"><img alt="整个前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题">整个前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img alt="常见前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题">常见前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台"><img alt="硅谷甄选运营平台" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台">硅谷甄选运营平台</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天"><img alt="Vue第三天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天">Vue第三天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天"><img alt="Vue第二天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天">Vue第二天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9">Vue框架笔记</a></div></div></div></div></div></div></main><footer id="footer"><div id="sco-footer-bar"><div class="footer-logo"><span class="scoicon">XC's Blog</span></div><div class="footer-bar-description">来自XC's Blog - 的文章</div><a class="footer-bar-link" href="/">了解更多</a></div><div id="footer_deal"><div class="footer_mini_logo" id="footer_mini_logo" title="返回顶部" onclick="sco.toTop()"><img data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg" alt="返回顶部"></div></div><div id="sco-footer"></div><div id="footer-bar"><div class="footer-bar-links"><div class="footer-bar-left"><div class="copyright">© 2021 - 2024 By&nbsp;<a class="footer-bar-link" href="/">XC's Blog</a></div></div><div class="footer-bar-right"><a class="footer-bar-link" target="_blank" rel="noopener" href="https://github.com/wleelw/hexo-theme-solitude" title="主题">主题</a><a class="footer-bar-link cc"><i class="scoicon sco-copyright-line"></i><i class="scoicon sco-creative-commons-by-line"></i><i class="scoicon sco-creative-commons-nc-line"></i><i class="scoicon sco-creative-commons-nd-line"></i></a></div></div></div></footer></div><!-- inject body--><div><script src="/js/main.js?v=1.5.1"></script><script src="/js/utils.js?v=1.5.1"></script><script src="https://cdn.cbd.int/solitude-source/js/universe.min.js"></script><script>dark()
</script><script src="https://cdn.staticfile.org/pjax/0.2.8/pjax.min.js"></script><script src="https://cdn.staticfile.org/vanilla-lazyload/17.8.5/lazyload.iife.min.js"></script><script src="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.js"></script><script src="/js/sco-ai.min.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js"></script><script src="https://cdn.staticfile.org/meting/2.0.1/Meting.min.js"></script><script>const meting_api = 'https://meting.qjqq.cn/?server=:server&type=:type&id=:id&auth=:auth&r=:r';
</script><script src="/js/covercolor/local.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/pace/1.2.4/pace.min.js"></script></div><div id="js-pjax"><script async src="https://cdn.staticfile.org/busuanzi/2.3.0/bsz.pure.mini.min.js"></script><script id="config-diff">var PAGE_CONFIG = {
    is_post: true,
    is_page: false,
    is_home: false,
    page: 'post',
    toc: true,
    comment: false,
}
</script></div><!-- newest comment--><!-- pjax--><script>let pjaxSelectors = [
    'title',
    '#body-wrap',
    '#site-config',
    'meta[name="description"]',
    '#js-pjax',
    'meta[property^="og:"]',
]

const pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
})

document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
})

document.addEventListener('pjax:complete', () => {
    window.refreshFn()
})

document.addEventListener('pjax:error', (e) => {
    if (e.request.status === 404) {
        pjax.loadUrl('/404.html')
    }
})</script><!-- theme--><script>initTheme = () => {
    const cachedMode = saveToLocal.get('theme');
    if (cachedMode === undefined)
        document.documentElement.setAttribute('data-theme', 'light');
    else
        document.documentElement.setAttribute('data-theme', cachedMode);
}
initTheme()</script><!-- search--><!-- music--><div class="needEndHide" id="nav-music" onclick="sco.musicToggle()"><div id="nav-music-hoverTips">音乐已暂停</div><meting-js id="8407304077" server="netease" type="playlist" mutex="true" preload="none" data-lrctype="0" order="random" theme="var(--sco-main)"></meting-js></div></body></html><script>const posts=["Vue笔记/前端面试题","Vue笔记/面试题","Vue笔记/硅谷甄选项目笔记","Vue笔记/vue第三天","Vue笔记/vue第二天","Vue笔记/Vue第一天","Vue笔记/vue框架笔记","Vue前置基础/5.ES6模块化与Webpack入门","Vue前置基础/1.Vue前置JS功底","Vue前置基础/4.跨域的基本概念","Vue前置基础/3.NPM的使用","Vue前置基础/2.Nodejs基础","Ajax学习笔记/黑马头条数据管理平台","Ajax学习笔记/Promise笔记","Ajax学习笔记/Ajax第四天","Ajax学习笔记/Ajax第三天","Ajax学习笔记/Ajax第二天","Ajax学习笔记/Ajax第一天","WebAPI学习笔记/JS进阶复习","WebAPI学习笔记/JS进阶第四天","WebAPI学习笔记/JS进阶第三天","WebAPI学习笔记/JS进阶第二天","WebAPI学习笔记/JS进阶第一天","WebAPI学习笔记/WebAPIs第七天","WebAPI学习笔记/WebAPIs第六天","WebAPI学习笔记/WebAPIs第五天","WebAPI学习笔记/WebAPIs第四天","WebAPI学习笔记/WebAPIs第三天","WebAPI学习笔记/WebAPIs第二天","WebAPI学习笔记/WebAPIs第一天","WebAPI学习笔记/WebAPIs学习笔记","WebAPI学习笔记/JS-ES6模块化","WebAPI学习笔记/JavaScript进阶","JavaScript学习笔记/JavaScript第五天","JavaScript学习笔记/JavaScript第四天","JavaScript学习笔记/JavaScript第三天","JavaScript学习笔记/JavaScript第二天","JavaScript学习笔记/JavaScript第一天","基础学习路线/移动开发-响应式布局","基础学习路线/移动开发-rem布局","基础学习路线/移动开发-flex布局","基础学习路线/移动开发-流式布局","基础学习路线/CSS3转换问题","基础学习路线/CSS-2D-3D转换","基础学习路线/前端168个单词","基础学习路线/CSS高级技巧","前端技术栈/前端路线","Hexo/图床方案汇总","其他技术栈/Windows软件推荐","Hexo/Butterfly主题配置","Hexo/Qexo","JavaScript/This指向与改变This指向","JavaScript/JS防抖与节流","JavaScript/如何在1分钟内完美解释什么是 JSONP 请求？","前端技术栈/移动端最佳适配解决方案","GitHub/Git常用命令","前端技术栈/来自2.5年前端小白的总结","网站资源/如何买到合适的域名","其他技术栈/CentOS一键安装Docker","网站资源/阿里云资源合集","其他技术栈/15个前端必备学习网站","其他技术栈/CSS3（圆角边框、阴影、浮动详解及示例）","网络协议/浅谈 HTTP 和 HTTPS","学习笔记/CSS属性大全","基础学习路线/CSS第五天-定位","基础学习路线/CSS第四天-浮动","基础学习路线/CSS第三天","基础学习路线/CSS第二天","基础学习路线/CSS第一天","基础学习路线/HTML第二天","基础学习路线/HTML第一天","学习笔记/「学习笔记」JavaScript基础","学习笔记/HTML与CSS进阶","Vue笔记/Vue X-数组对象的双向数据绑定","学习笔记/「学习笔记」CSS基础","学习笔记/「学习笔记」HTML基础","学习笔记/HTML基础","Windows/PE-Win10教程","Windows/Win系统网站-KMS","安卓玩机/Magisk卡刷-通刷官方-了解Fastboot","其他技术栈/前端开发免费资源大汇总","GitHub/Git基础-Github自定义域名","学习笔记/CSS笔记","Vscode/Vscode笔记-24款插件","其他技术栈/免费常用的前端CDN库","其他技术栈/软件及网站推荐","Vscode/记录 Vscode 插件","Hexo/Hexo音乐排行-Netlify CMS","GitHub/玩转GitHub","jQuery/jQuery自动触发事件与bootstrapjQuery插件用法","Hexo/使用Hexo和Github搭建个人博客","Hexo/Hexo博客搭建指南","Hexo/Hexo相关","Markdown/Markdown基础--高级教程","Markdown/Markdown基础教程"];function toRandomPost(){ pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]); };</script>