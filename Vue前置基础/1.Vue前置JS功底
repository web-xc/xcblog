<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Vue前置JS功底 | XC's Blog</title><noscript>开启JavaScript才能访问本站哦~</noscript><link rel="icon" href="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><!-- index.css--><link rel="stylesheet" href="/css/index.css?v=1.5.1"><!-- inject head--><link rel="stylesheet" href="https://cdn.cbd.int/solitude-source/icon/scoicon.min.css"><link rel="stylesheet" href="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.css"><!-- aplayer--><link rel="stylesheet" href="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css"><!-- swiper--><!-- Open Graph--><meta name="description" content="1. JS值类型与引用类型的区别1. 值类型&amp;#x2F;简单数据类型: string、number、boolean、undefined、null值存在栈中 赋值拷贝也是栈数据 修改拷贝数据对原数据没有影响 1234let num1 &amp;#x3D; 10let num2 &amp;#x3D; num1num2 &amp;#x3D; 20console.log"><!-- pwa--><script>(win => {
        win.saveToLocal = {
            set: function setWithExpiry(key, value, ttl) {
                if (ttl === 0)
                    return
                const now = new Date()
                const expiryDay = ttl * 86400000
                const item = {
                    value: value,
                    expiry: now.getTime() + expiryDay,
                }
                localStorage.setItem(key, JSON.stringify(item))
            },

            get: function getWithExpiry(key) {
                const itemStr = localStorage.getItem(key)

                if (!itemStr) {
                    return undefined
                }
                const item = JSON.parse(itemStr)
                const now = new Date()

                if (now.getTime() > item.expiry) {
                    localStorage.removeItem(key)
                    return undefined
                }
                return item.value
            }
        }

        const DarkModeStatus = localStorage.getItem('theme')
        if (DarkModeStatus !== null) {
            if (DarkModeStatus === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark')
            } else {
                document.documentElement.setAttribute('data-theme', 'light')
            }
        }

        const asideStatus = saveToLocal.get('aside-status')
        if (asideStatus !== undefined) {
            if (asideStatus === 'hide') {
                document.documentElement.classList.add('hide-aside')
            } else {
                document.documentElement.classList.remove('hide-aside')
            }
        }
    }
)(window)

console.log(
    "%c Program: Hexo %c Theme: Hexo-Theme-Solitude %c Version: v1.5.1",
    "border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#ff3842;margin:10px 0",
    "padding: 5px 10px;color:white;background:#3e9f50;",
    "border-radius:0 5px 5px 0;padding: 5px 10px;background:#0084ff;"
);</script><!-- global head--><script>const GLOBAL_CONFIG = {
    root: '/',
    algolia: undefined,
    localsearch: undefined,
    runtime: '2021-04-20 00:00:00',
    lazyload: {
        enable: true,
        error: '/img/error_load.png'
    },
    hightlight: {
        enable: true,
        limit: 200,
        expand: false,
        copy: true,
    },
    randomlinks: false,
    lang: {
        theme: {
            dark: '已切换至深色模式',
            light: '已切换至浅色模式',
        },
        copy: {
            success: '复制成功',
            error: '复制失败',
        },
        backtop: '返回顶部',
        time: {
            recent: '最近',
            yesterday: '昨天',
            berforeyesterday: '前天',
            daybefore: '天前',
            runtime: '天',
        },
        search: {
            empty: '找不到你查询的内容：${query}',
            hit: '找到 ${hits} 条结果，用时 ${time} 毫秒',
            placeholder: '输入关键词快速查找',
        },
        chs: {
            chs_to_cht: '繁體中文',
            cht_to_chs: '简体中文',
        }
    },
    aside: {
        sayhello: {
            morning: '一日之计在于晨',
            noon: '吃饱了才有力气干活',
            afternoon: '集中精力，攻克难关',
            night: '不要太劳累了，早睡更健康',
            goodnight: '睡个好觉，保证精力充沛',
        },
        sayhello2: ["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙","🤝 专修交互与设计","🏃 脚踏实地行动派","🧱 团队小组发动机","💢 壮汉人狠话不多","🎮 电竞游戏爱好者"],
    },
    covercolor: {
        enable: true
    },
    comment: {
        enable: false,
        type: '',
        commentBarrage: false,
        randomInfoStart: ["聪敏的","可爱的","美丽的"],
        randomInfoEnd: ["白菜","小可爱","小仙女"],
        twikoo: {
            url: '',
            accessToken: ''
        },
        waline: {
            url: '',
        }
    },
    lightbox: 'null',
    rightside: {
        enable: false
    },
    ai: {
        enable: true,
        key: '',
        talk: '我是王卓Sco开发的摘要生成助理ScoGPT，ScoGPT在静态部署时进行摘要的撰写，并且在访客访问时通过ScoCorrection转译后的文本摘要实现工具。我在这里只负责已经生成的摘要显示，你无法与我直接沟通，但我可以回答一些预设的问题。',
        randomPost: false,
    },
    music: {
        enable: false,
    },
    translate: undefined,
};</script><meta name="generator" content="Hexo 6.3.0"></head><body id="body"><!-- universe--><canvas id="universe"></canvas><!-- loading--><!-- console--><div id="console"><div class="close-btn" onclick="sco.hideConsole()"><i class="scoicon sco-close-fill"></i></div><div class="button-group"><div class="console-btn-item"><a class="darkmode_switchbutton" onclick="sco.switchDarkMode()" title="昼夜切换" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i></a></div><div class="console-btn-item" id="consoleHideAside"><a class="asideSwitch" onclick="sco.switchHideAside()" title="边栏显示控制" href="javascript:void(0);"><i class="scoicon sco-side-bar-fill"></i></a></div><div class="console-btn-item" id="consoleMusic" onclick="sco.musicToggle()"><a class="music-switch" title="音乐开关" href="javascript:void(0);"><i class="scoicon sco-disc-fill"></i></a></div></div><div class="console-mask" onclick="sco.hideConsole()"></div></div><!-- sidebar--><div id="sidebar" style="zoom: 1;"><div id="menu-mask" style="display: none;"></div><div id="sidebar-menus"><span class="sidebar-menu-item-title">功能</span><div class="sidebar-menu-item"><a class="darkmode_switchbutton menu-child" onclick="sco.switchDarkMode()" href="javascript:void(0);"><i class="scoicon sco-moon-clear-fill"></i><span>显示模式</span></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div><span class="sidebar-menu-item-title">标签</span><div class="card-widget card-tags card-archives card-webinfo card-allinfo"><div class="card-tag-cloud"><a href="/tags/Ajax%E7%AC%94%E8%AE%B0/">Ajax笔记<sup>6</sup></a><a href="/tags/Hexo/">Hexo<sup>6</sup></a><a href="/tags/Qexo/">Qexo<sup>1</sup></a><a href="/tags/GitHub/">GitHub<sup>3</sup></a><a href="/tags/JavaScript/">JavaScript<sup>3</sup></a><a href="/tags/Markdown/">Markdown<sup>2</sup></a><a href="/tags/JavaScript%E7%AC%94%E8%AE%B0/">JavaScript笔记<sup>5</sup></a><a href="/tags/Vscode/">Vscode<sup>2</sup></a><a href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/">Vue前置基础<sup>5</sup></a><a href="/tags/Vue%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/">Vue框架笔记<sup>6</sup></a><a href="/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/">面试题<sup>2</sup></a><a href="/tags/Web-APIs%E7%AC%94%E8%AE%B0/">Web APIs笔记<sup>10</sup></a><a href="/tags/JavaScript%E9%AB%98%E7%BA%A7/">JavaScript高级<sup>5</sup></a><a href="/tags/Windows/">Windows<sup>3</sup></a><a href="/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF%E6%A0%88/">其他技术栈<sup>6</sup></a><a href="/tags/jQuery/">jQuery<sup>1</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88/">前端技术栈<sup>3</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-CSS/">学习笔记-CSS<sup>9</sup></a><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-HTML/">学习笔记-HTML<sup>2</sup></a><a href="/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/">移动开发<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C/">前端经验<sup>4</sup></a><a href="/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/">前端笔记<sup>3</sup></a><a href="/tags/%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90/">网站资源<sup>2</sup></a><a href="/tags/%E5%AE%89%E5%8D%93%E7%8E%A9%E6%9C%BA/">安卓玩机<sup>1</sup></a><a href="/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/">网络协议<sup>1</sup></a></div></div></div></div><!-- keyboard--><div class="post" id="body-wrap"><header class="post-bg" id="page-header"><nav class="show" id="nav"><div id="nav-group"><div id="blog_name"><a id="site-name" href="/" title="返回博客主页"><span class="title">XC's Blog</span></a></div><div id="page-name-mask"><div id="page-name"><a id="page-name-text" onclick="sco.toTop()">Vue前置JS功底</a></div></div><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><span>首页</span></a></div></div></div><div id="nav-left"></div><div id="nav-right"><div class="nav-button" id="randomPost_button"><a class="site-page" onclick="toRandomPost()" title="随机一篇文章" href="javascript:void(0);"><i class="scoicon sco-signal-tower-fill"></i></a></div><div class="nav-button" id="nav-console"><a class="console_switchbutton" onclick="sco.showConsole()" title="中控台" href="javascript:void(0);"><i class="scoicon sco-dashboard-fill"></i></a></div><div class="nav-button" id="nav-totop" onclick="sco.toTop()"><a class="totopbtn"><i class="scoicon sco-arrow-up-line"></i><span id="percent">0</span></a></div><div id="toggle-menu"><a class="site-page"><i class="scoicon sco-menu-line"></i></a></div></div></div></nav><div class="coverdiv" id="coverdiv"><img class="nolazyload" id="post-cover" src="https://npm.elemecdn.com/webxc/cover/js1.webp" alt="Vue前置JS功底"></div><div id="post-info"><div id="post-firstinfo"><div class="meta-firstline"><a class="post-meta-original" title="该文章为原创文章，注意版权协议">原创</a><span class="post-meta-categories"><a class="post-meta-categories" href="/categories/Vue前置基础/">Vue前置基础</a></span><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/"><span class="tags-name tags-punctuation">Vue前置基础</span></a></div></div></div></div><h1 class="post-title">Vue前置JS功底</h1><div id="post-meta"><div class="meta-secondline"></div></div></div><section class="main-hero-waves-area waves-area"><svg class="waves-svg" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z"></path></defs><g class="parallax"><use href="#gentle-wave" x="48" y="0"></use><use href="#gentle-wave" x="48" y="3"></use><use href="#gentle-wave" x="48" y="5"></use><use href="#gentle-wave" x="48" y="7"></use></g></svg></section></header><main class="layout" id="content-inner"><div id="post"><div class="post-ai"><div class="ai-title"><div class="ai-title-left"><i class="ai-title-icon scoicon sco-robot-fill"></i><div class="ai-title-text">文章摘要</div></div><div class="ai-tag" id="ai-tag">GPT 4</div></div><div class="ai-explanation" style="display: block;"></div><div class="ai-suggestions"></div><div class="ai-bottom"><div class="ai-tips">此内容根据文章生成，并经过人工审核，仅用于文章内容的解释与总结</div><a class="ai-report" title="投诉" target="_blank" rel="noopener" href="https://blog.wzsco.top/about/">投诉</a></div></div><article class="post-content" id="article-container"><h2 id="1-JS值类型与引用类型的区别"><a href="#1-JS值类型与引用类型的区别" class="headerlink" title="1. JS值类型与引用类型的区别"></a>1. JS值类型与引用类型的区别</h2><h4 id="1-值类型-简单数据类型-string、number、boolean、undefined、null"><a href="#1-值类型-简单数据类型-string、number、boolean、undefined、null" class="headerlink" title="1. 值类型/简单数据类型: string、number、boolean、undefined、null"></a>1. 值类型/简单数据类型: string、number、boolean、undefined、null</h4><p>值存在栈中 赋值拷贝也是栈数据 修改拷贝数据对原数据没有影响</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> num2 = num1</span><br><span class="line">num2 = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2) <span class="comment">// 10 20</span></span><br></pre></td></tr></table></figure>

<h4 id="2-引用类型-复杂数据类型-Array、function、Object"><a href="#2-引用类型-复杂数据类型-Array、function、Object" class="headerlink" title="2.引用类型/复杂数据类型: Array、function、Object"></a>2.引用类型/复杂数据类型: Array、function、Object</h4><p>栈中存储地址 堆中存储数据 赋值时拷贝的是栈地址 修改拷贝数据(堆)对原数据有影响</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num3 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> num4 = num3</span><br><span class="line">num4[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num3, num4)</span><br></pre></td></tr></table></figure>

<h4 id="3-变量修改-栈与堆的区别"><a href="#3-变量修改-栈与堆的区别" class="headerlink" title="3. 变量修改 栈与堆的区别"></a>3. 变量修改 栈与堆的区别</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num4 = <span class="number">10</span></span><br><span class="line"><span class="comment">// 只是修改了栈中数据 但地址对应的数据没有影响</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num3, num4)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span> <span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    arr = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [100,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params"></span>) &#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn4</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [100,2,3]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-字符串方法"><a href="#2-字符串方法" class="headerlink" title="2. 字符串方法"></a>2. 字符串方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. split(,) 把字符串转换为数组 和join()相反</span></span><br><span class="line"><span class="keyword">let</span> n1 = <span class="string">&#x27;red, blue&#x27;</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"><span class="comment">// 2. replace(&#x27;替换前的字符&#x27;, &#x27;替换后的字符&#x27;)</span></span><br><span class="line"><span class="keyword">let</span> n2 = <span class="string">&#x27;蔡徐坤&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2.<span class="title function_">replace</span>(<span class="string">&#x27;蔡&#x27;</span>, <span class="string">&#x27;嗯&#x27;</span>))</span><br><span class="line"><span class="comment">// 删除某个字符 把字符替换为空字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2.<span class="title function_">replace</span>(<span class="string">&#x27;蔡&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment">// 应用场景:</span></span><br><span class="line"><span class="comment">// 1. 名字替换为 xx先生</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2.<span class="title function_">replace</span>(<span class="string">&#x27;徐坤&#x27;</span>, <span class="string">&#x27;先生&#x27;</span>))</span><br><span class="line"><span class="comment">// 2. 敏感词替换</span></span><br><span class="line"><span class="keyword">let</span> n3 = <span class="string">&#x27;你是傻逼&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n3.<span class="title function_">replace</span>(<span class="string">&#x27;傻逼&#x27;</span>, <span class="string">&#x27;**&#x27;</span>))</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="3-数组的增删改查方法以及返回值"><a href="#3-数组的增删改查方法以及返回值" class="headerlink" title="3. 数组的增删改查方法以及返回值"></a>3. 数组的增删改查方法以及返回值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">1.</span> 新增数组</span><br><span class="line"><span class="comment">// .push 在数组最后面添加元素, 返回值是新数组的长度</span></span><br><span class="line"><span class="comment">// .unshift 在数组最前面面添加元素, 返回值是新数组的长度</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>)</span><br><span class="line"><span class="number">2.</span> 删除数组</span><br><span class="line"><span class="comment">// .pop 删除数据的最后一个元素, 返回值是删除的那个元素</span></span><br><span class="line"><span class="comment">// .shift 删除数据的最前一个元素, 返回值是删除的那个元素</span></span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br><span class="line">arr.<span class="title function_">shift</span>() </span><br><span class="line"><span class="number">3.</span> 查询数组</span><br><span class="line"><span class="comment">// .slice(起始下标, 结束下标), 返回 起始下标&lt;=范围下标&lt;结束下标 的数组</span></span><br><span class="line"><span class="comment">// .splice(起始下标, 删除数量, ...删除位置新增的元素)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="number">4.</span> 数组.<span class="title function_">join</span>(<span class="string">&#x27;分隔符&#x27;</span>) 将数组每一个元素用分隔符拼接成字符串</span><br><span class="line"><span class="comment">// 应用场景: 将商品标签 [&#x27;自营&#x27;, &#x27;进口&#x27;] 转换为 自营|进口</span></span><br><span class="line"><span class="comment">// 应用场景: 将演出歌手 [&#x27;周杰伦&#x27;, &#x27;周慧妹&#x27;] 转换为 周杰伦$$周慧妹</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>))</span><br><span class="line"><span class="number">5.</span> 数组.<span class="property">reverse</span> 翻转数组(修改原数组)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>(arr))</span><br><span class="line"><span class="comment">// 应用场景: 翻转字符串</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;蔡徐坤&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"><span class="number">6.</span> .<span class="property">sort</span> 数组排序 按照<span class="variable constant_">ASCII</span>编码顺序排序</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sort</span>())</span><br><span class="line"><span class="comment">// 两个引用数据类型, 是不比较堆数据的, 只比较栈地址</span></span><br><span class="line"><span class="keyword">let</span> obj = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;华为&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;</span><br><span class="line">]</span><br><span class="line">obj.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">age</span> - b.<span class="property">age</span> <span class="comment">// 从小到大排序</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-数组的遍历方法"><a href="#4-数组的遍历方法" class="headerlink" title="4. 数组的遍历方法"></a>4. 数组的遍历方法</h2><h3 id="1-数组forEach-是没有return的也没有返回值"><a href="#1-数组forEach-是没有return的也没有返回值" class="headerlink" title="1. 数组forEach 是没有return的也没有返回值"></a>1. 数组forEach 是没有return的也没有返回值</h3><ol>
<li>应用场景: 修改数组的每一个元素值</li>
<li>金典面试题: 如何终止forEach? (try-catch)</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach 用来遍历数组对象</span></span><br><span class="line"><span class="comment">// 加强版for循环</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;小米&#x27;</span>,<span class="string">&#x27;苹果&#x27;</span>,<span class="string">&#x27;华为&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 数组元素</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 数组下标</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-数组map"><a href="#2-数组map" class="headerlink" title="2. 数组map"></a>2. 数组map</h3><ol>
<li>return 会新数组返回值</li>
<li>应用场景: 数组的转换: 根据数组的元素, 得到一个全新的数组</li>
<li>由于map创建一个新数组, 在没有使用返回的数组情况下调用它是不恰当的:</li>
<li>应该使用forEach或for…of作为代替</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;<span class="attr">name</span>: i&#125;) <span class="comment">// 数组的转换</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-数组filter"><a href="#2-数组filter" class="headerlink" title="2. 数组filter"></a>2. 数组filter</h3><ol>
<li>return true: 满足筛选条件的 放入新数组中</li>
<li>return true: 不满足筛选条件的 不放入新数组</li>
<li>filter方法自身返回值: 满足条件的新数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 筛选20以上的数组</span></span><br><span class="line"><span class="keyword">let</span> n1 = [<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">let</span> fn = n1.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 数组元素</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 数组下标</span></span><br><span class="line">    <span class="comment">// 筛选20以上的数组</span></span><br><span class="line">    <span class="keyword">return</span> a &gt;= <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2. 筛选完 会创建符合条件的新数组 </span></span><br><span class="line"><span class="comment">// 不符合条件则返回空数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn) <span class="comment">// [20, 30]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 箭头函数写法</span></span><br><span class="line"><span class="keyword">let</span> say = n1.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">40</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(say)</span><br></pre></td></tr></table></figure>

<h3 id="3-数组-indexOf-查找元素下标-只能找值类型下标"><a href="#3-数组-indexOf-查找元素下标-只能找值类型下标" class="headerlink" title="3. 数组 indexOf(): 查找元素下标(只能找值类型下标)"></a>3. 数组 indexOf(): 查找元素下标(只能找值类型下标)</h3><h3 id="4-数组-findIndex-查找元素下标-只能找引用类型下标"><a href="#4-数组-findIndex-查找元素下标-只能找引用类型下标" class="headerlink" title="4. 数组 findIndex(): 查找元素下标(只能找引用类型下标)"></a>4. 数组 findIndex(): 查找元素下标(只能找引用类型下标)</h3><ol>
<li>return true: 找到了, 循环结束, 返回当前元素下标</li>
<li>return false: 没找到, 循环继续, 最终返回-1</li>
<li>findIndex方法自身返回值: 元素下标 || -1</li>
<li>应用场景: 找到对象元素中 元素的下标</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;小东&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;小刚&#x27;</span>, <span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> n1 = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">age</span> == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="5-数组find和findIndex作用是一样的-返回值是元素本身"><a href="#5-数组find和findIndex作用是一样的-返回值是元素本身" class="headerlink" title="5. 数组find和findIndex作用是一样的, 返回值是元素本身"></a>5. 数组find和findIndex作用是一样的, 返回值是元素本身</h3><ol>
<li>应用场景: 修改对象数组中某一个对象属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n2 = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">age</span> == <span class="number">2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 所有对象</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2) <span class="comment">// 返回小刚对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2.<span class="property">age</span> *= <span class="number">0.1</span>) <span class="comment">// 0.2</span></span><br></pre></td></tr></table></figure>

<h3 id="6-数组reduce方法"><a href="#6-数组reduce方法" class="headerlink" title="6. 数组reduce方法"></a>6. 数组reduce方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduce累计器 返回累计处理的结果 用于求和..</span></span><br><span class="line"><span class="keyword">let</span> n4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">// reduce(function (上一次值, 当前值)&#123;&#125;, 初始值</span></span><br><span class="line"><span class="comment">// 1. 没有初始值</span></span><br><span class="line"><span class="keyword">let</span> n5 = n4.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n5)</span><br><span class="line"><span class="comment">// 2. 有初始值</span></span><br><span class="line"><span class="keyword">let</span> n6 = n4.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;, <span class="number">10</span>) <span class="comment">// 初始值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n6)</span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">let</span> n7 = n4.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n7)</span><br><span class="line"><span class="comment">// 3. reduce 执行过程</span></span><br><span class="line"><span class="comment">// 01. 没有初始值 </span></span><br><span class="line"><span class="comment">// 上一次值是数组的第一个值</span></span><br><span class="line"><span class="comment">// 每一次循环 就会把返回值给下一次循环的上一次值</span></span><br><span class="line"><span class="keyword">let</span> n8 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> n9 = n8.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n9)</span><br><span class="line"><span class="comment">// 上一次值  当前值  返回值  (第一次循环)</span></span><br><span class="line"><span class="comment">//    1       2       3</span></span><br><span class="line"><span class="comment">// 上一次值  当前值  返回值  (第二次循环)</span></span><br><span class="line"><span class="comment">//    3       3       6 </span></span><br><span class="line"><span class="comment">// 02. 有初始值 把初始值做为上一次值</span></span><br><span class="line"><span class="keyword">let</span> n10 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> n11 = n10.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n11)</span><br><span class="line"><span class="comment">// 上一次值  当前值  返回值  (第一次循环)</span></span><br><span class="line"><span class="comment">//    10       1      11 </span></span><br><span class="line"><span class="comment">// 上一次值  当前值  返回值  (第二次循环)</span></span><br><span class="line"><span class="comment">//    11       13     13 </span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-箭头函数和普通函数的区别"><a href="#5-箭头函数和普通函数的区别" class="headerlink" title="5. 箭头函数和普通函数的区别"></a>5. 箭头函数和普通函数的区别</h2><ul>
<li>this指向不同</li>
</ul>
<h3 id="1-function函数的this指向-谁调用函数-this就指向谁"><a href="#1-function函数的this指向-谁调用函数-this就指向谁" class="headerlink" title="1. function函数的this指向: 谁调用函数, this就指向谁"></a>1. function函数的this指向: 谁调用函数, this就指向谁</h3><ol>
<li>普通函数: fn() this指向window</li>
<li>对象方法: fn.方法名() this指向对象</li>
<li>构造函数: new 函数名 this指向实例对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// window</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: fn</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">a</span>() <span class="comment">// 指向obj</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">fn</span>() <span class="comment">// 指向fn</span></span><br></pre></td></tr></table></figure>

<h3 id="2-箭头函数this-箭头函数没有this-本质是访问上级作用域this"><a href="#2-箭头函数this-箭头函数没有this-本质是访问上级作用域this" class="headerlink" title="2. 箭头函数this: 箭头函数没有this 本质是访问上级作用域this"></a>2. 箭头函数this: 箭头函数没有this 本质是访问上级作用域this</h3><ol>
<li>箭头函数不能作为构造函数(报错) </li>
<li>箭头函数不能使用上下文修改this(call、apply、bind)</li>
<li>箭头函数不能使用arguments(报错)</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">f.<span class="title function_">call</span>(<span class="string">&#x27;你好&#x27;</span>) <span class="comment">// 还是window</span></span><br></pre></td></tr></table></figure>

<h3 id="3-经典面试题"><a href="#3-经典面试题" class="headerlink" title="3. 经典面试题"></a>3. 经典面试题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="title function_">age</span>(<span class="params"></span>) &#123; <span class="comment">// 等价于 age function() &#123;&#125;</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向window</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn1</span>()</span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">fn2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向obj1 fn1跟fn2平级作用域</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn2</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">// say是箭头函数 this指向上级window</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向window</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn1</span>()</span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">fn2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 指向window</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn2</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.<span class="title function_">age</span>()</span><br><span class="line">obj1.<span class="title function_">say</span>()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-原型与原型链"><a href="#6-原型与原型链" class="headerlink" title="6. 原型与原型链"></a>6. 原型与原型链</h2><ol>
<li>对象原型__proto__的意义是为对象成员查找机制提供一条路线</li>
<li>原型链是一个查找规则</li>
<li>可查找一些属性和方法 沿着一条路走</li>
<li>先看当前原型对象上面有没有</li>
<li>果没有再往上一层的原型对象查找</li>
<li>如果有 就可使用</li>
<li>往上查找最终找到Object为止(null)</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 原型链</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> n1 = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="comment">// new的实例化对象等于fn.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1.<span class="property">__proto__</span> == fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为Object也是构造函数 那么就有prototype和constructor</span></span><br><span class="line"><span class="comment">// fn.protptype里的__proto__就等于 Object.constructor</span></span><br><span class="line"><span class="comment">// Object.constructor 在指回Obj 所以__proto__指向Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object的对象有prototype 那么protytype就一定有__proto__</span></span><br><span class="line"><span class="comment">// Object对象最大 所以指向null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>) <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. instanceof运算符用于检测构造函数prototype属性</span></span><br><span class="line"><span class="comment">// 是否出现在某个实例对象的原型对象上</span></span><br><span class="line"><span class="comment">// n1 属于 fn</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1 <span class="keyword">instanceof</span> fn) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// n1 属于 Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// n1 不属于 Array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1 <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 数组 属于 Array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 数组 属于 Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

</article><div class="post-copyright"><div class="post-copyright__author_group"><a class="post-copyright__author_img" href="/about/"><img class="post-copyright__author_img_front" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"></a><div class="post-copyright__author_name">XC's Blog</div><div class="post-copyright__author_desc"></div></div><div class="post-tools" id="post-tools"><div class="post-tools-left"><div id="quit-box" onclick="RemoveRewardMask()"></div></div></div><div class="post-copyright__notice"><span class="post-copyright-info">本文是原创文章，采用<a target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CC BY-NC-SA 4.0</a>协议，完整转载请注明来自<a href="/">XC's Blog</a></span></div></div><div class="post-tools-right"><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/"><span class="tags-punctuation"></span>Vue前置基础<span class="tagsPageCount">5</span></a></div></div></div><nav class="needEndHide pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/5.ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8EWebpack%E5%85%A5%E9%97%A8"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">ES6模块化与Webpack入门</div></div></a></div><div class="next-post pull-right"><a href="/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/4.%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">跨域的基本概念</div></div></a></div></nav><div class="relatedPosts"><div class="headline"><i class="scoicon sco-star-smile-fill"></i><span>喜欢这篇的人也看了</span><div class="relatedPosts-link"><a onclick="event.preventDefault(); toRandomPost();" href="javascript:void(0);" rel="external nofollow" data-pjax-state="">随便逛逛</a></div></div><div class="relatedPosts-list"><div><a href="/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/5.ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8EWebpack%E5%85%A5%E9%97%A8" title="ES6模块化与Webpack入门"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/webpack.jpg" alt="cover"><div class="content is-center"><div class="title">ES6模块化与Webpack入门</div></div></a></div><div><a href="/Vue%E5%89%8D%E7%BD%AE%E5%9F%BA%E7%A1%80/4.%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" title="跨域的基本概念"><img class="cover" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/跨域.jpg" alt="cover"><div class="content is-center"><div class="title">跨域的基本概念</div></div></a></div></div></div></div><div class="aside-content" id="aside-content"><div class="card-widget card-info"><div class="card-content"><div class="card-info-avatar is-center"><div class="author-info__top-group"><div class="author-info__sayhi" id="author-info__sayhi" onclick="sco.changeSayHelloText()">sayhello.morning</div></div></div><div class="avatar-img-group"><img class="avatar-img" alt="头像" data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg"><div class="avatar-sticker"><img class="avatar-sticker-img" data-lazy-src="https://bu.dusays.com/2023/12/30/659011053e246.png" alt="心情贴纸"></div></div><div class="author-info__description_group"><div class="author-info__description">分享自己对编程的<b>热爱</b>，对美好生活的<b>向往</b>，对知识海洋<b>探索历程</b>。</div><div class="author-info__description2">相信你可以在这里找到对你有用的知识和教程。</div></div><div class="author-info__bottom-group"><a class="author-info__bottom-group-left" href="/about/"><div class="author-info__name">XC's Blog</div><div class="author-info__desc"></div></a><div class="card-info-social-icons is-center"></div></div></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="scoicon sco-menu-line"></i><span>文章目录</span></div><div class="toc-content" id="toc-content"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-JS%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">1. JS值类型与引用类型的区别</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#1-%E5%80%BC%E7%B1%BB%E5%9E%8B-%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-string%E3%80%81number%E3%80%81boolean%E3%80%81undefined%E3%80%81null"><span class="toc-text">1. 值类型&#x2F;简单数据类型: string、number、boolean、undefined、null</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#2-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B-%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-Array%E3%80%81function%E3%80%81Object"><span class="toc-text">2.引用类型&#x2F;复杂数据类型: Array、function、Object</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-%E5%8F%98%E9%87%8F%E4%BF%AE%E6%94%B9-%E6%A0%88%E4%B8%8E%E5%A0%86%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">3. 变量修改 栈与堆的区别</span></a></li></ol></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95"><span class="toc-text">2. 字符串方法</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-%E6%95%B0%E7%BB%84%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E8%BF%94%E5%9B%9E%E5%80%BC"><span class="toc-text">3. 数组的增删改查方法以及返回值</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95"><span class="toc-text">4. 数组的遍历方法</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-%E6%95%B0%E7%BB%84forEach-%E6%98%AF%E6%B2%A1%E6%9C%89return%E7%9A%84%E4%B9%9F%E6%B2%A1%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC"><span class="toc-text">1. 数组forEach 是没有return的也没有返回值</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-%E6%95%B0%E7%BB%84map"><span class="toc-text">2. 数组map</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-%E6%95%B0%E7%BB%84filter"><span class="toc-text">2. 数组filter</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-%E6%95%B0%E7%BB%84-indexOf-%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E4%B8%8B%E6%A0%87-%E5%8F%AA%E8%83%BD%E6%89%BE%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8B%E6%A0%87"><span class="toc-text">3. 数组 indexOf(): 查找元素下标(只能找值类型下标)</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-%E6%95%B0%E7%BB%84-findIndex-%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E4%B8%8B%E6%A0%87-%E5%8F%AA%E8%83%BD%E6%89%BE%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%8B%E6%A0%87"><span class="toc-text">4. 数组 findIndex(): 查找元素下标(只能找引用类型下标)</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-%E6%95%B0%E7%BB%84find%E5%92%8CfindIndex%E4%BD%9C%E7%94%A8%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84-%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AF%E5%85%83%E7%B4%A0%E6%9C%AC%E8%BA%AB"><span class="toc-text">5. 数组find和findIndex作用是一样的, 返回值是元素本身</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#6-%E6%95%B0%E7%BB%84reduce%E6%96%B9%E6%B3%95"><span class="toc-text">6. 数组reduce方法</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8C%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="toc-text">5. 箭头函数和普通函数的区别</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-function%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91-%E8%B0%81%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0-this%E5%B0%B1%E6%8C%87%E5%90%91%E8%B0%81"><span class="toc-text">1. function函数的this指向: 谁调用函数, this就指向谁</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0this-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E6%B2%A1%E6%9C%89this-%E6%9C%AC%E8%B4%A8%E6%98%AF%E8%AE%BF%E9%97%AE%E4%B8%8A%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Fthis"><span class="toc-text">2. 箭头函数this: 箭头函数没有this 本质是访问上级作用域this</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98"><span class="toc-text">3. 经典面试题</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#6-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE"><span class="toc-text">6. 原型与原型链</span></a></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="scoicon sco-map-line"></i><span>最近发布</span></div><div class="aside-list"><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题"><img alt="整个前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98" title="整个前端面试题">整个前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题"><img alt="常见前端面试题" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98" title="常见前端面试题">常见前端面试题</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台"><img alt="硅谷甄选运营平台" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0" title="硅谷甄选运营平台">硅谷甄选运营平台</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天"><img alt="Vue第三天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9" title="Vue第三天">Vue第三天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%B8%89%E5%A4%A9">Vue框架笔记</a></div></div><div class="aside-list-item"><a class="thumbnail" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天"><img alt="Vue第二天" data-lazy-src="https://cdn1.tianli0.top/gh/web-xc/iMG/postss/vue.png"></a><div class="content"><a class="title" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9" title="Vue第二天">Vue第二天</a><a class="article-recent_post_categories" href="/Vue%E7%AC%94%E8%AE%B0/vue%E7%AC%AC%E4%BA%8C%E5%A4%A9">Vue框架笔记</a></div></div></div></div></div></div></main><footer id="footer"><div id="sco-footer-bar"><div class="footer-logo"><span class="scoicon">XC's Blog</span></div><div class="footer-bar-description">来自XC's Blog - 的文章</div><a class="footer-bar-link" href="/">了解更多</a></div><div id="footer_deal"><div class="footer_mini_logo" id="footer_mini_logo" title="返回顶部" onclick="sco.toTop()"><img data-lazy-src="https://npm.elemecdn.com/webxc@1.0.0/logo/logo.jpg" alt="返回顶部"></div></div><div id="sco-footer"></div><div id="footer-bar"><div class="footer-bar-links"><div class="footer-bar-left"><div class="copyright">© 2021 - 2024 By&nbsp;<a class="footer-bar-link" href="/">XC's Blog</a></div></div><div class="footer-bar-right"><a class="footer-bar-link" target="_blank" rel="noopener" href="https://github.com/wleelw/hexo-theme-solitude" title="主题">主题</a><a class="footer-bar-link cc"><i class="scoicon sco-copyright-line"></i><i class="scoicon sco-creative-commons-by-line"></i><i class="scoicon sco-creative-commons-nc-line"></i><i class="scoicon sco-creative-commons-nd-line"></i></a></div></div></div></footer></div><!-- inject body--><div><script src="/js/main.js?v=1.5.1"></script><script src="/js/utils.js?v=1.5.1"></script><script src="https://cdn.cbd.int/solitude-source/js/universe.min.js"></script><script>dark()
</script><script src="https://cdn.staticfile.org/pjax/0.2.8/pjax.min.js"></script><script src="https://cdn.staticfile.org/vanilla-lazyload/17.8.5/lazyload.iife.min.js"></script><script src="https://cdn.staticfile.org/node-snackbar/0.1.16/snackbar.min.js"></script><script src="/js/sco-ai.min.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js"></script><script src="https://cdn.staticfile.org/meting/2.0.1/Meting.min.js"></script><script>const meting_api = 'https://meting.qjqq.cn/?server=:server&type=:type&id=:id&auth=:auth&r=:r';
</script><script src="/js/covercolor/local.js?v=1.5.1"></script><script src="https://cdn.staticfile.org/pace/1.2.4/pace.min.js"></script></div><div id="js-pjax"><script async src="https://cdn.staticfile.org/busuanzi/2.3.0/bsz.pure.mini.min.js"></script><script id="config-diff">var PAGE_CONFIG = {
    is_post: true,
    is_page: false,
    is_home: false,
    page: 'post',
    toc: true,
    comment: false,
}
</script></div><!-- newest comment--><!-- pjax--><script>let pjaxSelectors = [
    'title',
    '#body-wrap',
    '#site-config',
    'meta[name="description"]',
    '#js-pjax',
    'meta[property^="og:"]',
]

const pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
})

document.querySelectorAll('script[data-pjax]').forEach(item => {
    const newScript = document.createElement('script')
    const content = item.text || item.textContent || item.innerHTML || ""
    Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
    newScript.appendChild(document.createTextNode(content))
    item.parentNode.replaceChild(newScript, item)
})

document.addEventListener('pjax:complete', () => {
    window.refreshFn()
})

document.addEventListener('pjax:error', (e) => {
    if (e.request.status === 404) {
        pjax.loadUrl('/404.html')
    }
})</script><!-- theme--><script>initTheme = () => {
    const cachedMode = saveToLocal.get('theme');
    if (cachedMode === undefined)
        document.documentElement.setAttribute('data-theme', 'light');
    else
        document.documentElement.setAttribute('data-theme', cachedMode);
}
initTheme()</script><!-- search--><!-- music--><div class="needEndHide" id="nav-music" onclick="sco.musicToggle()"><div id="nav-music-hoverTips">音乐已暂停</div><meting-js id="8407304077" server="netease" type="playlist" mutex="true" preload="none" data-lrctype="0" order="random" theme="var(--sco-main)"></meting-js></div></body></html><script>const posts=["Vue笔记/前端面试题","Vue笔记/面试题","Vue笔记/硅谷甄选项目笔记","Vue笔记/vue第三天","Vue笔记/vue第二天","Vue笔记/Vue第一天","Vue笔记/vue框架笔记","Vue前置基础/5.ES6模块化与Webpack入门","Vue前置基础/1.Vue前置JS功底","Vue前置基础/4.跨域的基本概念","Vue前置基础/3.NPM的使用","Vue前置基础/2.Nodejs基础","Ajax学习笔记/黑马头条数据管理平台","Ajax学习笔记/Promise笔记","Ajax学习笔记/Ajax第四天","Ajax学习笔记/Ajax第三天","Ajax学习笔记/Ajax第二天","Ajax学习笔记/Ajax第一天","WebAPI学习笔记/JS进阶复习","WebAPI学习笔记/JS进阶第四天","WebAPI学习笔记/JS进阶第三天","WebAPI学习笔记/JS进阶第二天","WebAPI学习笔记/JS进阶第一天","WebAPI学习笔记/WebAPIs第七天","WebAPI学习笔记/WebAPIs第六天","WebAPI学习笔记/WebAPIs第五天","WebAPI学习笔记/WebAPIs第四天","WebAPI学习笔记/WebAPIs第三天","WebAPI学习笔记/WebAPIs第二天","WebAPI学习笔记/WebAPIs第一天","WebAPI学习笔记/WebAPIs学习笔记","WebAPI学习笔记/JS-ES6模块化","WebAPI学习笔记/JavaScript进阶","JavaScript学习笔记/JavaScript第五天","JavaScript学习笔记/JavaScript第四天","JavaScript学习笔记/JavaScript第三天","JavaScript学习笔记/JavaScript第二天","JavaScript学习笔记/JavaScript第一天","基础学习路线/移动开发-响应式布局","基础学习路线/移动开发-rem布局","基础学习路线/移动开发-flex布局","基础学习路线/移动开发-流式布局","基础学习路线/CSS3转换问题","基础学习路线/CSS-2D-3D转换","基础学习路线/前端168个单词","基础学习路线/CSS高级技巧","前端技术栈/前端路线","Hexo/图床方案汇总","其他技术栈/Windows软件推荐","Hexo/Butterfly主题配置","Hexo/Qexo","JavaScript/This指向与改变This指向","JavaScript/JS防抖与节流","JavaScript/如何在1分钟内完美解释什么是 JSONP 请求？","前端技术栈/移动端最佳适配解决方案","GitHub/Git常用命令","前端技术栈/来自2.5年前端小白的总结","网站资源/如何买到合适的域名","其他技术栈/CentOS一键安装Docker","网站资源/阿里云资源合集","其他技术栈/15个前端必备学习网站","其他技术栈/CSS3（圆角边框、阴影、浮动详解及示例）","网络协议/浅谈 HTTP 和 HTTPS","学习笔记/CSS属性大全","基础学习路线/CSS第五天-定位","基础学习路线/CSS第四天-浮动","基础学习路线/CSS第三天","基础学习路线/CSS第二天","基础学习路线/CSS第一天","基础学习路线/HTML第二天","基础学习路线/HTML第一天","学习笔记/「学习笔记」JavaScript基础","学习笔记/HTML与CSS进阶","Vue笔记/Vue X-数组对象的双向数据绑定","学习笔记/「学习笔记」CSS基础","学习笔记/「学习笔记」HTML基础","学习笔记/HTML基础","Windows/PE-Win10教程","Windows/Win系统网站-KMS","安卓玩机/Magisk卡刷-通刷官方-了解Fastboot","其他技术栈/前端开发免费资源大汇总","GitHub/Git基础-Github自定义域名","学习笔记/CSS笔记","Vscode/Vscode笔记-24款插件","其他技术栈/免费常用的前端CDN库","其他技术栈/软件及网站推荐","Vscode/记录 Vscode 插件","Hexo/Hexo音乐排行-Netlify CMS","GitHub/玩转GitHub","jQuery/jQuery自动触发事件与bootstrapjQuery插件用法","Hexo/使用Hexo和Github搭建个人博客","Hexo/Hexo博客搭建指南","Hexo/Hexo相关","Markdown/Markdown基础--高级教程","Markdown/Markdown基础教程"];function toRandomPost(){ pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]); };</script>